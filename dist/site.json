{"title":"WeDeploy‚Ñ¢","url":"https://wedeploy.com","githubRepo":"wedeploy/wedeploy.com","googleAnalytics":"UA-37033501-3","version":{"api":{"android":"0.1.0","javascript":"2.3.1"},"image":{"auth":"0.0.1","data":"0.0.1","email":"0.0.1","hosting":"0.0.1","liferay":"dxp-sp4-20170822"}},"index":{"children":{"chat":{"title":"Chat","url":"//chat.wedeploy.com/","weight":3,"content":"","srcFilePath":"src/pages/chat.fm","id":"chat"},"get-started":{"title":"Get Started","url":"//console.wedeploy.com/signup","weight":6,"content":"","srcFilePath":"src/pages/get-started.fm","id":"get-started"},"login":{"title":"Log in","url":"//console.wedeploy.com/login","weight":5,"content":"","srcFilePath":"src/pages/login.fm","id":"login"},"blog":{"title":"Blog","description":"Discover all the latest about WeDeploy.","type":"blog","weight":1,"content":" ","srcFilePath":"src/pages/blog/index.soy","id":"blog","url":"/blog/","children":{"3-reasons-why-you-should-use-environment-variables":{"title":"3 Reasons Why You Should Use Environment Variables","description":"There are some really big things coming down the pipe with our Beta release right around the corner, but we just couldn't wait to tell you about something we are really excited about: Environment Variables.","date":"March 29, 2017","author":"Jonni Lundy","image":"/images/blog/post-7--0.gif","layout":"blog","content":" There are some really big things coming down the pipe with our Beta release right around the corner, but we just couldn't wait to tell you about something we are really excited about: Environment Variables. Environments have been around for a while, mainly hiding in the deep code forests, so we wanted to highlight them and share that we wrote some fresh documentation so you can start using them right away! Here are a couple easy ways they can improve your app! ‚Äã üöÄ Change Hosting serve directory By default, WeDeploy Hosting looks to your service's root directory to know what files to serve, but what if you are using a Gulp or Grunt build task to compile your files? No problem, just add the WEDEPLOYWEBPATH key and use the build path as your value. See the full list at our Hosting Environment Variable Docs. üîê Integrate OAuth into your app Want your users to log in with Facebook, Google, or Github accounts? Perfect, because that is super easy to do with WeDeploy Auth. Start by just adding a few environment variables for each provider. See the full list at our Auth Environment Variable Docs. üìß Change Email provider WeDeploy Email supplies you with an email service straight out of the box, but what if you want to use your own SMTP server? With Environment Variables, you can change the email host, username, port, and much more. See the full list at our Email Environment Variable Docs. That's it! If you have any question, just shoot us an email or join the conversation on Slack. Happy coding! üíª ","srcFilePath":"src/pages/blog/3-reasons-why-you-should-use-environment-variables/index.md","id":"3-reasons-why-you-should-use-environment-variables","url":"/blog/3-reasons-why-you-should-use-environment-variables/"},"announcing-new-sdks-for-mobile-development":{"title":"Announcing new SDKs for Mobile Development","description":"Are you an Android or iOS developer? Do you need to deploy services quickly and easily to the cloud and focus on your mobile apps? Well today is a big day for you!","date":"May 26, 2017","author":"Jose M. Navarro","image":"/images/blog/post-11--0.png","layout":"blog","content":" {$page.description} Nowadays, we live in a world full of devices. From watching movies on your Apple TV, Receiving notifications on your smart watch, or reading books on your Kindle, we rarely go anywhere without our devices. It doesn't seem to be slowing down either; more and more devices are being built and more and more services are being created for them. Mobile and web development just isn't enough, we are entering an age of multi-device development. That's why WeDeploy was born with more than web development in mind. We understood that as more and more devices consumed API's, this would be the future of development. We didn't want to just use raw HTTP requests, so we built API Clients that could be called easily and safely. You already know about our JavaScript client, but starting today, there are two new kids on the block. Introducing the new WeDeploy iOS (Swift) and Android (Java) SDKs. With them, you will be able to build apps for the following platforms: Apple: iOS (iPhone, iPad, iPod Touch), watchOS (AppleWatch), tvOS (AppleTV), macOS (CarPlay and Desktop apps). Google: Android phones and tablets, Android Wear, Android TV, Android Auto and any platform that supports Java! What can I do on those mobile platforms? Mainly, the clients provides you access to: Data service: Search inside your schema-less database or communicate in realtime with other apps, not matter the platform, using WebSockets under the hood. ‚Ü≥ See iOS (Swift) and Android (Java) tutorials. Auth service: Create or authenticate users, reset passwords or sign-in using Google, Facebook or Github's OAuth2. ‚Ü≥ See iOS (Swift) and Android (Java) tutorials. Email service: Send emails directly from your app and check their delivery status. ‚Ü≥ See iOS (Swift) and Android (Java) tutorials. Raw HTTP Requests: and if you would like to build your own HTTP requests, you can using our fluent API. How do I start Just use the regular package managers for each platform. target 'MyApp' do use_frameworks! ... rest of your dependencies ... pod 'WeDeploy' end dependencies { ... rest of your dependencies ... compile 'com.wedeploy:com.wedeploy.android:@site.version.api.android@' } It's that easy! So, the only thing left to do is to go to the documentation and start deploying your mobile apps! Don't forget to let us know how it goes! You can connect with us on Twitter or join our community on Slack. ","srcFilePath":"src/pages/blog/announcing-new-sdks-for-mobile-development/index.md","id":"announcing-new-sdks-for-mobile-development","url":"/blog/announcing-new-sdks-for-mobile-development/"},"a-new-way-to-learn-wedeploy":{"title":"A New Way To Learn WeDeploy","description":"From the beginning, we knew that great documentation was crucial to successfully sharing WeDeploy with the world.","date":"April 19, 2017","author":"Jonni Lundy","image":"/images/blog/post-8--0.png","layout":"blog","content":" {$page.description} Since then, we have been exploring new ways to take the WeDeploy learning experience to the next level, which is why we are excited to announce a brand new sibling in the documentation family: Tutorials. Which topics are covered? Hosting: Deploy static files like HTML, CSS, and JS. Data: Deploy a to-do list app using our Data Service and JS. Auth: Deploy an authentication app using our Auth Service and JS. Email: Deploy an email-sending app using our Email Service and JS. Java: Deploy an app using Java and Spring Boot. Ruby: Deploy an app using Ruby and Sinatra. Node.js: Deploy an app using Node.js and Express. Liferay DXP: Deploy a Liferay DXP instance. Why tutorials? Everyone learns differently. Some simply want to grab snippets of code and implement them in their projects. Others want to see a walkthrough of how to use the code in a real-life situation. There is nothing like seeing the code in action, and that is exactly what tutorials provide! We felt like the first group was being well taken care of by our extensive documentation, but there was nothing for the second group. After brainstorming different ways to provide this kind of step-by-step flow for those users, we landed on the concept of a tutorial. What were our goals? We had three goals for our tutorials: Simple UX: This started with the design and bled all the way through to the words and phrasings we used. It had to be something that reflected one of the most important parts of the WeDeploy product itself: ease of use. Consistent Flow: Most users come with a goal in mind of what they want to implement and what stack they want to implement it with. But what about after they build that first app? We wanted to create a consistent experience and content flow across all the tutorials so that users could easily learn about other services that were not already familiar to them. Educational Content: The end goal of each tutorial is deploying and interacting with a fully functional app, but we didn't want users to just get to the end, we wanted them to learn something. We spent hours, even days, coming up with the balance between the difficulty and educational takeaway of the tutorial, and we are very excited with the results. What's in it for you? Like we said above, each tutorial takes you all the way from clone to deploy in a matter of minutes. This not only gives you a inside look into specific details of the service you are interested in, but it also teaches you about other things like source code file structure, API methods, configuration files, deployment flow using git, and so much more. --- So what are you waiting for? Unlock the power of WeDeploy by starting one of these tutorials today! Don't forget to let us know how it goes! You can connect with us on Twitter or join our community on Slack. ","srcFilePath":"src/pages/blog/a-new-way-to-learn-wedeploy/index.md","id":"a-new-way-to-learn-wedeploy","url":"/blog/a-new-way-to-learn-wedeploy/"},"happy-new-year-from-wedeploy":{"title":"Happy New Year from WeDeploy","description":"It‚Äôs officially 2017! Are you as excited as we are?","date":"Jan 03, 2017","author":"Zeno Rocha","image":"/images/blog/post-3--0.png","layout":"blog","content":" {$page.description} Last year, on September 20th, the very first app was created on WeDeploy. After that, we went to Chicago, Milan, London, Darmstad, and S√£o Paulo to spread the word about this new product. Today, we're serving hundreds of projects from awesome developers like you. We're proud. We're thankful. We're motivated! So, thank you all for being on this journey with us. We're serving hundreds of projects from awesome developers like you. And you know what, this is just the beginning. We have new and amazing stuff coming soon, including brand new services and tons of scalability improvements for you. Happy New Year! ","srcFilePath":"src/pages/blog/happy-new-year-from-wedeploy/index.md","id":"happy-new-year-from-wedeploy","url":"/blog/happy-new-year-from-wedeploy/"},"environment-variables-new-java-service-and-multiple-custom-domains":{"title":"Environment variables, new Java service, and multiple custom domains!","description":"We shipped some really interesting features recently and we would love to share them with you!","date":"Oct 31, 2016","author":"Eduardo Lundgren","image":"/images/blog/post-2--2.png","layout":"blog","content":" {$page.description} Environment Variables An important piece of any kind of deployment is setting up environment variables. This can be used to protect credentials for an external database or a secret key that only a production environment should use. Now you can do this by going to the \"Environment\" tab on any WeDeploy service. New Java Service As part of our mission to create a very broad platform for all developers, we're introducing a new Java service. If you're interested, check the boilerplate examples we created using Gradle, Maven, and Ant. As part of our mission to create a very broad platform for all developers, we're introducing a new Java service. Multiple Custom Domains In the past, you could only set one custom domain per project. Although that was useful for many people, there are many cases where you need to configure more than one domain. Now you have the ability to do that by going to the \"Settings\" menu on your project. If you have any questions, feel free to contact us. Happy coding! ","srcFilePath":"src/pages/blog/environment-variables-new-java-service-and-multiple-custom-domains/index.md","id":"environment-variables-new-java-service-and-multiple-custom-domains","url":"/blog/environment-variables-new-java-service-and-multiple-custom-domains/"},"liferay-hack-day":{"title":"Liferay Hack Day 2017","description":"The holiday season is an exciting time. Not only do we get to put all our diets on hold because of the never ending flow of tree shaped cookies and ooey gooey chocolate fudge, but it also means that the annual Liferay engineering retreat is right around the corner.","date":"Feb 15, 2017","author":"Jonni Lundy","image":"/images/blog/post-5--0.png","layout":"blog","content":" {$page.description} Every January, developers from all around the world gather at our Los Angeles office. It's an exhilarating time together full of talks, catered meals, new friendships, and even spontaneous adventures to the Hollywood sign and the Santa Monica Pier. On the final day of the retreat, we put on a hack day (because how could we bring all the engineers to one location without having one?!). Every year we are amazed at the creativity of the projects, and this year did not disappoint. There are only two requirements for their projects: The code needs to be new It has to be pushed to Github On top of that, this year we encouraged the teams to use WeDeploy to host their projects. Four teams did, and these were there projects. Game Room Availability Nobody wants to walk all the way down to the Game Room to find that the ping pong table is taken. Never fear, Game Room Availability app is here to show you in real time if anyone is using your game. What they used: WeDeploy‚Ñ¢ Hosting. Liferay Home Don't ever come home to a freezing cold house again. Liferay home will learn your habits, track your commute, and automate pretty much anything in your house. What they used: WeDeploy‚Ñ¢ Hosting, WeDeploy‚Ñ¢ Data. Release Notes Annoyed by manually checking for fix pack releases for Portal 7.0? This team created an app that fetched the fix pack information and sorted them by component so you easily find what you need. What they used: WeDeploy‚Ñ¢ Hosting. Chicken Fingers Don't let the name deceive you, this project was the real deal- and the grand prize winner of the hack day. Using voice recognition, they paved the way for a stellar hands-free-recipe cooking experience. What they used: WeDeploy‚Ñ¢ Hosting, WeDeploy‚Ñ¢ Data. We were so impressed with what the teams came up with in less than nine hours! We hope that these projects have inspired you to keep creating, to keep dreaming, and of course, to keep deploying. üöÄ ","srcFilePath":"src/pages/blog/liferay-hack-day/index.md","id":"liferay-hack-day","url":"/blog/liferay-hack-day/"},"my-first-three-months-with-wedeploy":{"title":"My First Three Months With WeDeploy","description":"Hey! My name is Jonni and I'm a UI intern on the WeDeploy team. I joined back in November and wanted to share a couple things from my first three months at Liferay.","date":"Jan 13, 2017","author":"Jonni Lundy","image":"/images/blog/post-4--0.png","layout":"blog","content":" {$page.description} I have no coding background. Before my internship, I had never opened DevTools in my life and I thought that Java and JavaScript were the same thing. Needless to say, I was a little intimidated of coming in as the new guy, but once I started using WeDeploy and working with the team, those fears drifted away like a bunch of balloons strapped to a house ('UP' anyone?). I still remember the first time I deployed. I had just finished making my very first website, and Zeno said I should try deploying it by myself. I honestly didn't know where to start, so I went to the docs, read through some guides, and gave it a shot. Within 15 minutes, it was live! It was one of the best feelings I've had during this internship. Knowing that I, the new guy who didn't know what an API was or how to run 'npm install', could deploy my own website faster than it takes me to run to Starbucks and get my triple ristretto hazelnut latte (with almond milk please). By far my favorite thing about being on the WeDeploy team is being able to get behind a product that is so powerful and yet incredibly intuitive to use. If I can deploy, then I'm sure you can! So what are you waiting for?! ","srcFilePath":"src/pages/blog/my-first-three-months-with-wedeploy/index.md","id":"my-first-three-months-with-wedeploy","url":"/blog/my-first-three-months-with-wedeploy/"},"the-first-wedeploy-hack-day-in-madrid":{"title":"The First WeDeploy Hack Day in Madrid","description":"With our Beta release approaching, we're looking for more and more developers to try out WeDeploy and give us feedback about how we can make it better.","date":"May 18, 2017","author":"Jonni Lundy","image":"/images/blog/post-10--0.jpg","layout":"blog","content":" {$page.description} Since we knew there were lots of great developers in Spain, we decided to jump on a plane and go to our Madrid office to host a WeDeploy hack day! We could feel the excitement in the office as the day drew near. I mean honestly, who can pass up the opportunity of a free day to play around with whatever creative dev project you want? But what were the rules? For this event, we simply asked each team to use WeDeploy in their projects. Other than that, they could build whatever they wanted. Let's do this! At 9am they all started to arrive and we gave everyone five minutes to write down project ideas. Then, they each presented their ideas to the whole group and mentioned specific resources or talent that they would need to accomplish it. The rest of the participants were free to join whatever project interested them. The ideas were ready, the teams were made, and the countdown was started. Nine hours later we got the results! So what did they build? For those who prefer to watch instead of read, here are the presentation videos. Emoji Chat Emojis have done a lot to help us communitate with each other in ways that words cannot. But what if we wanted to take our online communication to the next level? Hello Emoji Chat. Once you join the site, you will be assigned an emoji and you can start moving it around and interacting with the other emoji users, even sending classic text. What they used: WeDeploy Hosting, WeDeploy Data Salmorejo There is a workplace efficiency technique called Pomodoro that basically goes like this. You set a timer for 25 min and place a signal on your desk to notify your coworkers that you are busy. Then you focus only on one task during that time, and after the timer is done, you can tend to other things like meetings, emails, and coffee breaks. The problem is that sometimes you leave the signal up or maybe never put it there in the first place so the others at work don't know if they can interupt you or not. The good news is that this project fixes those problems with a Slack notification integration and a designated site to start and track the Salmorejos that are happening in your office. What they used: WeDeploy Hosting, WeDeploy Data Presenting the result of our #hackday. Salmorejo is alive! and WeDeploy too! @juliocamarero @izaera @Liferay_es @Liferay pic.twitter.com/1JmvcW3lwx&mdash; Carlos Lancha (@carloslancha) May 9, 2017 Multi-Device Pizza Ordering Ever been sitting on your couch and wanted to order a pizza but you don't have your computer with you or you want to be notified from your phone when the delivery is arriving? We have good news for you, this team created a multi-device system for ordering pizza, going from a Apple TV app, to your cell phone, to the deliverer's iPad, and then of course, to your hungry stomache. What they used: WeDeploy Data Tinder for Startups This team had an exciting day. Although they did not have a finished prototype at the end of the day, they had the opportunity of diving deep into many technologies that none of them had tried before. When presenting, they talked about all the things they had learned and how even though the didn't finish anything, the lessons they learned on the journey were invaluable. Eyes to Run Technology is doing great things in the world of helping the disabled, and this project was no different. This team created an app that paired up blind runners with non-blind partners so that they are able to pound the pavement again. This team also won the grand prize for the hack day! What they used: WeDeploy Hosting, WeDeploy Data, WeDeploy Auth, WeDeploy Java The day was a huge success, and we were impressed and inspired by what each team produced! We're also so thankful for the hospitality of the Madrid office and the courageous developers in the hack day that pushed the limits and tried things they weren't sure they were capable off. In the train heading home after the @wedeploy hackday. So many positive energy from #liferayers creating amazing projects... or products? üò≤&mdash; Manuel de la Pe√±a (@mdelapenya) May 9, 2017 Till next time, Spain! ","srcFilePath":"src/pages/blog/the-first-wedeploy-hack-day-in-madrid/index.md","id":"the-first-wedeploy-hack-day-in-madrid","url":"/blog/the-first-wedeploy-hack-day-in-madrid/"},"starting-an-iot-platform-with-wedeploy":{"title":"Starting an IoT platform with WeDeploy","description":"In this blog post I will guide you through the steps to create a minimal IoT platform which accepts metrics from remote devices. To build this multi-service project, I will use the WeDeploy Java, Hosting, and Data services.","date":"Mar 17, 2017","author":"Manuel de la Pe√±a","image":"/images/blog/post-6--0.png","layout":"blog","directory":"email-js","content":" {$page.description} I'm currently studying Research in Software Engineering and Computer Science for my master's degree and decided to build this platform to complete some requirements for a class about Ubiquitous Computing. In this class I've learned the basic concepts of IoT, starting with the initial intent to simulate the real world with smart devices. I believe the IoT train is passing and if we don't get on, we will miss out. That's why I decided to explore more. I realized that in the short period of time I had to accomplish this, I would need to learn how to use and configure a complete new tool like Kaa or Machina.io. But I just wanted a place to simulate an IoT platform super fast. Then a thought occured to me: Why not use WeDeploy to host my app? It already provides all the infrastructure I need. With WeDeploy, you manage git repositories and wrap them into services that can be deployed into the platform. It also offers a set of useful, already-configured services such as Data, Users and Auth, or even a E-mail. This allows any developer to streamline a project with minimal infrastructure configuration so they can just focus on coding the application they want to develop. The Stack So, here are the requirements for my project: An Android app that reads current speeds from a GPS and sends it each time the current location is changed. A server that reads the metrics sent by the Android app and stores them into persistent storage. A web interface to display the metrics stored in the database, reading from the server. The Android app is super easy to create, and has nothing to do with WeDeploy, just knowing the URL of the server where to send the metrics, so I won't go anymore into it. The two things that really matter are related to the API I wanted to create to accept the metrics sent by the devices and the visualisation of those metrics. Creating an API with WeDeploy In order to accept metrics from remote applications, I decided to create a REST API to handle the requests, and then it would store the metrics in a persistent storage. As WeDeploy offers a Data service, I decided that my REST API should communicate to that service to store the metrics. Then, I chose the framework to create the API. As I'm a Java developer, I chose Spring Boot to build it, which lets you create tiny applications and define REST resources in an extremely easy manner. So I created a project on the WeDeploy dashboard, and added a WeDeploy Java service named \"api\". I locally cloned the boilerplate-java project from Github, and started coding my REST API's there. Of course you can do this step with other technology you are more familiar with, and WeDeploy offers several server-side technologies to accomplish this including NodeJS and Ruby. Implementing a service In order to implement a WeDeploy service, it's mandatory to create a wedeploy.json file in the root of your folder, where you specify the id of the service. As this project is a Gradle project, WeDeploy will infer its type with a Java recipe, that will wrap the project up into the official Gradle Docker image. { \"id\": \"api\" } Defining REST resources The following block of code demonstrates how to handle HTTP GET and POST requests in a Spring Boot controller. /** We'll handle all HTTP request to the path '/sensors' under application context path @author Manuel de la Pe√±a */ @RestController @RequestMapping(\"/sensors\") public class SensorsRestController { /* Defines the resource for an specific sensor, identified by its sensorId, which is passed as input parameter to the method, using the annotation @PathVariable. It allows CORS requests from any domain. @return A collection of model domain objects */ @CrossOrigin(origins = \"*\") @RequestMapping(method = RequestMethod.GET, value = \"/{sensorId}\") public Collection getMetrics(@PathVariable String sensorId) {...} ... /* Define the resource for POST verb operations over this controller's path. The annotation @RequestBody indicates the type of the object that will be processed in the request. It allows CORS requests from any domain. */ @CrossOrigin(origins = \"*\") @RequestMapping(method = RequestMethod.POST) public ResponseEntity addMetric(@RequestBody Metric metric) {...} ... } Defining the save service Our API service needs to store the metrics in the WeDeploy Data service so I added a new service to the project on the WeDeploy dashboard, naming it data. Again, I cloned the boilerplate-data Github repository at the same level of my API service, and voil√†! I have two services under my WeDeploy project. Here it is the container.json file for this new data service: { \"id\": \"data\", \"image\": \"wedeploy/data:@site.version.image.data@\" } But this data service must be configured to create a collection of elements. These are the pieces of data I wanted to gather about the sensor: Platform (app-android, app-ios, app-console), Unique identifier Coordinates (longitude, latitude) Value Name (temperature, speed, pressure, etc.) Unit of measure (celsius degrees, kilometers per hour, atmospheres, etc.) Timestamp (the moment of request) And I also had to define how this collection of data is accessed, and which HTTP verbs are allowed. You can configure this in WeDeploy data service with the api.json descriptor. This block shows the three REST resources that are accepted by my data service, and their specific paths: two for retrieving data, and one for storing data. [ { \"description\": \"Returns all sensors that sent metrics to the platform\", \"path\": \"/sensors/*\", \"method\": \"GET\", \"data\": true }, { \"description\": \"Returns one sensor identified by its unique sensorId\", \"path\": \"/sensors/:sensorId\", \"method\": \"GET\", \"data\": true }, { \"description\": \"Stores one sensor's metrics\", \"path\": \"/sensors\", \"method\": \"POST\", \"data\": true, \"parameters\": { \"applicationId\": { \"type\": \"string\" }, \"sensorId\": { \"type\": \"string\" }, \"latitude\": { \"type\": \"string\" }, \"longitude\": { \"type\": \"string\" }, \"metric\": { \"type\": \"string\" }, \"metricName\": { \"type\": \"string\" }, \"metricUnits\": { \"type\": \"string\" }, \"timestamp\": { \"type\": \"string\" } } } ] As you can see for the POST operation, I can validate the input parameters that are sent to the WeDeploy data service. Storing in the WeDeploy Data service Ok, once I had the data service configured, how could I communicate with it from the Java service, which represents the API? Well, the smart guys from WeDeploy team have provided a set of libraries to communicate with any WeDeploy service in an easy manner: you can consume WeDeploy's APIs with language-specific clients. In my case I will use a Java client, which I added to Gradle dependencies in the Java service. dependencies { compile(\"com.github.wedeploy.api-java:api:0.0.1\") compile(\"com.github.wedeploy.api-java:api-client:0.0.1\") ... } Added the dependencies, the communication with the WeDeploy Data service is performed in this block of code: public class DataRepository { /** Name of the data service to communicate with */ private static final String DATASERVICEPATH = \"data\"; /** Path of the Sensors collection */ private static final String SENSORSDATAPATH = \"/sensors\"; ... /** We filter the collection by sensorId column. Then, we parse the JSON object that represents the body of the response into a collection of model entities. */ public Collection findBySensorId(String sensorId) { WeDeploy weDeploy = new WeDeploy(DATASERVICEPATH + SENSORSDATAPATH); Response response = weDeploy.filter(\"sensorId\", sensorId).get(); String body = response.body(); if (StringUtil.isBlank(body)) { return Collections.EMPTY_LIST; } JoddJsonParser parser = new JoddJsonParser(); return parser.parseAsList(body, SensorRow.class); } /** We retrieve the whole collection, without pagination. Then, we parse the JSON object that represents the body of the response into a collection of model entities. */ public Collection findAllSensors() { WeDeploy weDeploy = new WeDeploy(DATASERVICEPATH + SENSORSDATAPATH); Response response = weDeploy.get(); String body = response.body(); if (StringUtil.isBlank(body)) { return Collections.EMPTY_LIST; } JoddJsonParser parser = new JoddJsonParser(); return parser.parseAsList(body, SensorRow.class); } ... } Here the WeDeploy object hides the magic of communicating with other WeDeploy services. As I'm in the same project, it's possible to resolve the service name directly with only its name, without using its whole URL, because WeDeploy directly resolves service names when services run within the same project. Displaying data At that point I had built two services: a Java REST API developed with Spring Boot, and a WeDeploy Data service for persistence. Then I wanted to display the metrics in a web interface. So, I created a third WeDeploy service, Hosting, which allows uploading static files, such as HTML, CSS and JavaScript, and gave it the name ui. Bellow is the container.json file that I made to impliment the Hosting Service. { \"id\": \"ui\", \"image\": \"wedeploy/hosting:@site.version.image.hosting@\" } I know that this is not related to WeDeploy, but I wanted to display the metrics in two different ways: a datagrid with all metrics, and a Google Maps interface with a pin where a metric was sent. With the following code, which is not the WeDeploy JavaScript client, I can retrieve the JSON objects returned from the Spring Boot API with browser's native fetch capability, process the response, and draw the results in the screen. function getSensors(mode) { return fetch(myUrl) .then(function(response) { if(response.ok) { return response.json(); } else if (response.status !== 200) { return []; } }) .then(function(sensors) { if (!sensors || sensors.length === 0) { noResults(); // shows a not found message return; } if (mode == 'grid') { plotSensors(sensors); // draws a grid } else { mapSensors(sensors); // draws a google map } return this; }); } Please remember I'm a backend developer interested in Systems, so shame on me for this JavaScript code! Hey, at least I put it in a separate JavaScript file. üòÇ Thanks to the WeDeploy team, a JS client is also available. Super cool! You only need to add this script to your page and you're ready to go: Summary With WeDeploy I could accomplish the task of creating a very basic stack to handle requests. I wrote a a service representing an API for accepting requests, a service to store data, and a service representing a UI for the metrics. And all of that has been accomplish just using a couple lines of code + git skills, with no infrastructure knowledge needed! If you're curious about the end result, see: sensorsui-mdelapenya.wedeploy.io sensorsapi-mdelapenya.wedeploy.io ","srcFilePath":"src/pages/blog/starting-an-iot-platform-with-wedeploy/index.md","id":"starting-an-iot-platform-with-wedeploy","url":"/blog/starting-an-iot-platform-with-wedeploy/"},"uptime-status-new-ruby-service-and-more":{"title":"Uptime status, new Ruby service, and more!","description":"First of all, we would like to say thanks for trying WeDeploy! You're shaping the future of this product, so we appreciate you taking the time to provide some feedback.","date":"Oct 10, 2016","author":"Zeno Rocha","image":"/images/blog/post-1--0.png","layout":"blog","content":" {$page.description} You're shaping the future of this product. In the last few weeks we've been working day and night to make WeDeploy more stable. Almost two hundred projects have been created since we first launched and dozens of bugs have been fixed. Today, we would like to show you some of the things we're working on. Uptime Status Even though this is an alpha version and problems are somewhat expected, we recognize the importance of being transparent about outages. That's why we would like to share with you a new page where you can check WeDeploy's uptime status. Ruby Service Our mission is to create a platform for all kinds of developers. With that in mind, we're introducing a new Ruby service. You can get more information by reading the docs or checking this boilerplate. Go to Console to start using Ruby Service. Our mission is to create a platform for all kinds of developers. If you have any questions, feel free to contact us. ","srcFilePath":"src/pages/blog/uptime-status-new-ruby-service-and-more/index.md","id":"uptime-status-new-ruby-service-and-more","url":"/blog/uptime-status-new-ruby-service-and-more/"},"using-wedeploy-with-react-native-and-react-vr":{"title":"Using WeDeploy With React Native and React VR","description":"Throughout the development of WeDeploy, it has been our goal to support as many platforms and environments as possible.","date":"April 25, 2017","author":"Iliyan Peychev","image":"/images/blog/post-9--0.png","layout":"blog","content":" {$page.description} As a fundamental player in today's development around the world, JavaScript is a key member of that WeDeploy family, but until recently, our API Client only supported Web and Node.js applications. That's why we are excited to announce that React Native and React VR are joining the list too! If you are not aware of React Native, this is it in a nutshell - it allows you to build mobile applications using only JavaScript. Interestingly, you don't build a \"hybrid app\"; rather, you use the same UI building blocks as a regular iOS and Android application, and leverage the full power of the mobile platforms to create a real, first class mobile application. Also, React VR allows you to step into the the Virtual Reality and build VR websites and interactive 360 experiences with React. Using WeDeploy in React Native and React VR There is no difference between the usage of the JavaScript API for Web and React Native or React VR. The same API calls for Data, Auth, and Email are available when your app is running in React Native or React VR environment too. There are no API nuances - the same code you would write for a Web application, will run successfully on React Native and React VR too. Here is an example taken from the boilerplate application: WeDeploy .data('') .orderBy('id', 'desc') .limit(5) .get('tasks') .then((tasks) = { this.setState({ items: tasks }); }) .catch((error) = { console.error(error); }); The above code establishes a connection with the Data Service and retrieves the first five To-do tasks, then sets them to the state of the component to be rendered on the screen. Building an application To help you start building applications, we created an example To-Do List application. You may check the code here. The application is short but powerful enough to showcase a few fundamental things: Instantiating WeDeploy Working with the data service Working with Real-time events Sharing application code between iOS and Android. Here is what the To-Do List application looks like: Your browser doesn't support HTML5 video in WebM with VP8/VP9 or MP4 with H.264. We are excited to see what you start building with WeDeploy using React Native and React VR! ","srcFilePath":"src/pages/blog/using-wedeploy-with-react-native-and-react-vr/index.md","id":"using-wedeploy-with-react-native-and-react-vr","url":"/blog/using-wedeploy-with-react-native-and-react-vr/"},"wedeploy-beta-our-biggest-release-yet":{"title":"WeDeploy Beta: Our Biggest Release Yet","description":"We have been working tirelessly over the last months on some huge changes to WeDeploy, and today is the day we can finally tell you all about them.","date":"August 4, 2017","author":"Eduardo Lundgren","image":"http://wedeploy.com/images/blog/post-12--0.jpg","layout":"blog","content":" {$page.description} But first, a little backstory. Where We Started Exactly 316 days ago, we launched the first app on WeDeploy. It was such an exhilarating time, but we had our eyes set on the future. The thing is, WeDeploy didn't start as \"WeDeploy.\" Almost two years ago, a few of us spent our spare time working on this project called Launchpad. It was just a shadow of what WeDeploy is today, but it was a start. It was our start. After that first app was deployed, we got right back to work. Yes, we had achieved something, but it still had much room to grow. We needed to challenge our own mindset and imagination in order to create a platform that could change the way people develop software. We believe that this release puts us much closer to that goal. --- What Changed? 1. Completely New Infrastructure Probably the biggest change was moving the WeDeploy infrastructure from our servers in the Liferay Headquarters to AWS. We knew that in order to continue to grow and expand globally, we had to start preparing now. This move has greatly impacted the stability of WeDeploy and even though we don't support multi-region deployments yet, we are excited for that possibility in the near future. 2. Rewritten CLI, API and Dashboard One of our goals these past nine months was not to just build on top of what we had, but also to rethink the way we built WeDeploy. If improvement required a revamp of core pieces of code, then so be it! We've spent weeks refactoring the CLI, API and Dashboard (which is now known as Console) and I can confidently say, it was worth it! By refactoring, we gave ourselves the opportunity to not only clean up the code, but to also improve performance, usability and overall design. 3. HTTPS Out-of-the-Box Yes, now every project you deploy and every service you install will automatically be given an HTTPS certificate. This means your app will safely communicate with your users without you having to configure anything. We also make sure that those HTTPS certificates are valid by regularly renewing them. That way you can always trust that your application will be secured. 4. Custom Docker Services The container ecosystem has grown a lot in the past years and Docker is largely responsible for this success. Today we want to bring the benefits of this technology to you and facilitate the Docker-based development workflow. That's why we're introducing Dockerfile support. Back on alpha you were limited by the services we provided. Now, your imagination is the limit. This opens up the possibility to deploy pretty much anything and we look forward to see what you're going to create. Read more in the documentation or follow our step-by-step tutorial. 5. Volume Support With the addition of custom Docker services, new challenges arrived. For example, let's say you deploy an app with PHP and MySQL, then you start adding entries to your database. What happens when you restart that project without a proper setup? Well, you're going to lose all the data that was saved. In order to be able to persist and share data between services, we're introducing the concept of volumes. Quite simply, volumes are specially-designated directories that live outside of the file system where your code runs. This way, even if your application becomes unavailable due to a failure or other causes, your data persists. 6. Instant Deployment Before, you had two ways of deploying code. You could either connect with GitHub or create a remote pointing to our Git server. We noticed that people loved the convenience of integrating with GitHub so we're keeping that, but when using our Git server the experience was not as fluid, especially the authentication step that occured on every push. Because of that, we decided to rethink our CLI and introduce a new deploy command. Now you don't need to rely on Git for every deploy. All you need to do is type we login to authenticate only once and then run we deploy on your project folder. Read more on the documentation. 7. Automatic Code Detection If you used WeDeploy before, you probably remember this container.json file (now renamed to wedeploy.json). This file describes the name of the service, the environment variables needed, and most importantly, the kind of project you are deploying. WeDeploy needs to know what kind of project you are deploying in order to download dependencies, compile and build it in the right way. Together with your wedeploy.json, we'll try to determine what language your project uses. Deploy any project using Node.js, Java, Ruby or a Dockerfile and we'll take it from there. 8. Liferay Digital Experience Platform We're very excited about Liferay Digital Experience Platform (DXP). There are so many cool capabilities and we want to give WeDeploy users the opportunity to try them out in seconds. Today, we're introducing Liferay DXP with a 15-day trial license. Besides that, we're adding support for hot deployment. That means you can now create a deploy folder, then add themes, portlets, OSGi modules or a license by using WAR, JAR and XML files. What about Liferay Portal Community Edition? Since we have Docker support now, you can setup your own Dockerfile or grab an image from Docker Hub and deploy it here. Read more in the documentation or follow our step-by-step tutorial. 9. Zero Downtime Deployments During alpha, whenever a new deployment was triggered, your app would go offline for couple seconds until the new version was 100% ready. We knew that was not ideal, so we sat down to build a much better experience that minimizes downtime and user interruption. Now, you don't have to worry about your app being taken down during deployment of the new code. Push updates and restart your services with zero downtime. 10. Global DNS We know how tedious it is to set up your domains. That's why we're introducing a new reliable and scalable DNS solution. From now on, you can point your domains directly to our nameservers and we will automatically configure everything for you. We provide our DNS service across 7 different countries, including Australia, Germany, France, Netherlands, Singapore, United Kingdom and the United States. Our goal is to ensure that you always have high availability and low latency, resulting in a great experience for your users and your business. Read more in the documentation. --- What's Next? Because of the new URL format and other changes described here, we weren't able to migrate your projects for you. That would be a risky thing to do and we don't want your users to have any problems. All the projects you created on alpha still exist. However, on September 4th they will be unavailable, along with the previous Dashboard. But don't worry, we already have a Migration Guide ready so you can get started right away. We're very excited to be able to share this new release with you! Make sure to try it out for yourself and join our community on Slack to ask questions or let us know what you are building! ","srcFilePath":"src/pages/blog/wedeploy-beta-our-biggest-release-yet/index.md","id":"wedeploy-beta-our-biggest-release-yet","url":"/blog/wedeploy-beta-our-biggest-release-yet/"}},"childIds":["wedeploy-beta-our-biggest-release-yet","announcing-new-sdks-for-mobile-development","the-first-wedeploy-hack-day-in-madrid","using-wedeploy-with-react-native-and-react-vr","a-new-way-to-learn-wedeploy","3-reasons-why-you-should-use-environment-variables","starting-an-iot-platform-with-wedeploy","liferay-hack-day","my-first-three-months-with-wedeploy","happy-new-year-from-wedeploy","environment-variables-new-java-service-and-multiple-custom-domains","uptime-status-new-ruby-service-and-more"],"redirect":"/blog/wedeploy-beta-our-biggest-release-yet/"},"docs":{"title":"Documentation","description":"Everything you need to know to get started.","weight":2,"content":" WeDeploy Docs Center Start learning how to leverage the power of WeDeploy in your project. Choose a Guide Each one provides step by step coverage for every core feature. ","srcFilePath":"src/pages/docs/index.soy","id":"docs","url":"/docs/","children":{"auth":{"title":"Auth","url":"/docs/auth/getting-started/","icon":"persons","weight":3,"content":" ","srcFilePath":"src/pages/docs/auth/index.soy","id":"auth","location":"/docs/auth/","children":{"manage-users":{"title":"Manage Users","description":"Create, delete or update users by using WeDeploy Auth.","headerTitle":"Auth","layout":"guide","weight":2,"content":" {$page.title} {$page.description} If you are unfamiliar with our API, please visit the API Clients page first to learn how to install and configure it. Create user You create a new user in your WeDeploy project by calling the createUser method or by signing in a user for the first time using an identity provider such as Google or Facebook. WeDeploy .auth('https://-.wedeploy.io') .createUser({ email: 'user@domain.com', password: 'abc' }) .then(function(user) { // Successfully created. }) .catch(function(err) { // Not created. }); WeDeploy .auth('https://-.wedeploy.io') .createUser(email: \"user@domain.com\", password: \"abc\", name: \"somename\") .then { user - Void in // Successfully created. } .catch { err in // Not created. } WeDeploy .auth(\"\") .createUser(\"user@domain.com\", \"password\", \"somename\") .execute(); Get current user var currentUser = WeDeploy.auth('https://-.wedeploy.io').currentUser; if (currentUser) { // User is signed in. } else { // No user is signed in. } WeDeploy .auth('https://-.wedeploy.io') .getCurrentUser() .then { user - Void in // User found. } .catch { error in // User does not exist. } WeDeploy .auth(\"\") .getCurrentUser() .execute(); Get user WeDeploy .auth('https://-.wedeploy.io') .getUser(userId) .then(function(user) { // User found. }) .catch(function(err) { // User does not exist. }); WeDeploy .auth('https://-.wedeploy.io') .getUser(id: \"userId\") .then { user - Void in // User found. } .catch { error in // User does not exist. } WeDeploy .auth(\"\") .getUser(\"userId\") .execute(); Get all users WeDeploy .auth('https://..wedeploy.io') .getAllUsers() .then(function(res) { // res contains an array of users. }) .catch(function(err) { // An error happened. }); WeDeploy .auth(\"https://..wedeploy.io\") .getAllUsers() .then { res - Void in // res contains an array of users. } .catch { error in // An error happened. } WeDeploy .auth(\"https://-.wedeploy.io\") .getAllUsers() .execute(); Delete user There are two ways to delete a user. Delete currentUser WeDeploy .auth('https://..wedeploy.io') .currentUser .deleteUser() .then(function() { // Successfully deleted. }) .catch(function(err) { // Not deleted. }); Delete user by id WeDeploy .auth('https://..wedeploy.io') .deleteUser(\"userId\") .then(function() { // Successfully deleted. }) .catch(function(err) { // An error happened. }); WeDeploy .auth(\"https://..wedeploy.io\") .deleteUser(id: \"userId\") .then { _ - Void in // Successfully deleted. } .catch { error in // An error happened. } WeDeploy .auth(\"https://-.wedeploy.io\") .deleteUser(\"userId\") .execute(); Update user var currentUser = WeDeploy.auth('https://-.wedeploy.io').currentUser; currentUser .updateUser({ password: \"password\", email: \"eleven@hawkinslabs.com\", name: \"Eleven\", photoUrl: \"https://hawkinslabs.com/011/profile.jpg\" }) .then(function() { // Successfully updated. }) .catch(function(err) { // Not updated. }); WeDeploy .auth('https://-.wedeploy.io') .updateUser(id: \"userId\" , email: \"eleven@hawkinslabs.com\", password: \"password\", name: \"Eleven\") .then { _ - Void in // Successfully updated } .catch { err in // Not updated. } JSONObject fields = new JSONObject() .put(\"email\", \"eleven@hawkinslabs.com\") .put(\"password\", \"newPassword\") .put(\"name\", \"Eleven\"); WeDeploy .auth(\"\") .updateUser(\"userId\", fields) .execute(); Send a password reset email You can send a password reset email to a user with the sendPasswordResetEmail method. For example: WeDeploy .auth('https://-.wedeploy.io') .sendPasswordResetEmail(\"user@domain.com\") .then(function() { // Email sent. }) .catch(function(err) { // An error happened. }); WeDeploy .auth('https://-.wedeploy.io') .sendPasswordReset(email: \"user@domain.com\") .then { _ - Void in // Successfully signed out. } .catch { err in // Not signed out. } WeDeploy .auth(\"\") .sendPasswordResetEmail(\"user@domain.com\") .execute(); Sign-out WeDeploy .auth('https://-.wedeploy.io') .signOut() .then(function() { // User is signed out. }) .catch(function(err) { // User was signed out. }); WeDeploy .auth('https://-.wedeploy.io') .signOut() .then { _ - Void in // Successfully signed out. } .catch { err in // Not signed out. } WeDeploy .auth(\"\") .signOut() .execute(); What's next? Learn how to sign-in users using their email and password. ","srcFilePath":"src/pages/docs/auth/manage-users/index.md","id":"manage-users","url":"/docs/auth/manage-users/"},"getting-started":{"title":"Getting Started","description":"Provide authentication using email/password or popular third-party identity providers like Google, Facebook, and GitHub.","headerTitle":"Auth","layout":"guide","weight":1,"content":" Auth {$page.description} Our Auth service allows you to avoid the headache of operating your own user management system. Features like creating accounts, resetting passwords, and updating profiles are easily accomplished with a few lines of code using our SDKs. Try it yourself Want to see the process of deploying WeDeploy Auth step by step? Try the tutorial or see a source code demo. Check also the tutorial for Android and the tutorial for iOS. Configuring All WeDeploy projects use similar configuration files to prepare your projects for deployment. Learn more on our page about Getting Started with Deploying. Below is an example of a wedeploy.json for an Auth container. { \"id\": \"users\", \"image\": \"wedeploy/auth:@site.version.image.auth@\" } The id for your services are uniquely determined by you. What's next? Now we're ready to start managing users. ","srcFilePath":"src/pages/docs/auth/getting-started/index.md","id":"getting-started","url":"/docs/auth/getting-started/"},"environment-variables":{"title":"Environment Variables","description":"Use environment variables to control your app.","headerTitle":"Auth","layout":"guide","weight":7,"content":" {$page.title} {$page.description} If you are unfamiliar with how you can apply this concept, please visit our main Environment Variables page. Reference Here's a list of all the environment variables you can use with this service. | Key | Description | | - | - | | WEDEPLOYAUTHEMAIL_CONTENT | HTML code for password reset email | | WEDEPLOYAUTHEMAIL_SENDER | Set password reset email sender | | WEDEPLOYAUTHEMAIL_SUBJECT | Set password reset email subject | | WEDEPLOYAUTHFACEBOOK | Enable Facebook Auth integration | | WEDEPLOYAUTHFACEBOOKCLIENTID | Facebook OAuth ID | | WEDEPLOYAUTHFACEBOOKCLIENTSECRET | Facebook OAuth password | | WEDEPLOYAUTHGITHUB | Enable GitHub Auth integration | | WEDEPLOYAUTHGITHUBCLIENTID | GitHub OAuth ID | | WEDEPLOYAUTHGITHUBCLIENTSECRET | GitHub OAuth password | | WEDEPLOYAUTHGOOGLE | Enable Google Auth integration | | WEDEPLOYAUTHGOOGLECLIENTID | Google OAuth ID | | WEDEPLOYAUTHGOOGLECLIENTSECRET | Google OAuth password | | WEDEPLOYAUTHPASSWORD | Enable email and password Auth | | WEDEPLOYAUTHSECURE_FIELDS | Select which Auth fields are secured | ","srcFilePath":"src/pages/docs/auth/environment-variables/index.md","id":"environment-variables","url":"/docs/auth/environment-variables/"},"sign-in-with-facebook":{"title":"Sign-in With Facebook","description":"Let your users authenticate using their Facebook accounts.","headerTitle":"Auth","layout":"guide","weight":4,"content":" {$page.title} {$page.description} If you are unfamiliar with our API, please visit the API Clients page first to learn how to install and configure it. Authenticate Your users can authenticate in a way that redirects them to Facebook's sign-in page, where they're going to type their credentials, and then redirect back to your application. var auth = WeDeploy.auth('https://-.wedeploy.io'); var provider = new auth.provider.Facebook(); provider.setProviderScope(\"email\"); auth.signInWithRedirect(provider); auth.onSignIn(function(user) { // Fires when user is signed in after redirect. }); let auth = WeDeploy.auth('https://-.wedeploy.io'); let provider = AuthProvider(provider: .facebook, redirectUri: \"my-app://\") provider.providerScope = \"email\" auth.signInWithRedirect(provider: provider) { (user, error) in // Fires when user is signed in after redirect. } //Add WeDeploy.auth('https://-.wedeploy.io').handle(url: url) in AppDelegate's open url method // In AndroidManifest.xml, declare an intent filter for the Activity you want to receive the token. // Don't forget to replace [mypackagename] with you application package name. // On your Activity: AuthProvider provider = new AuthProvider.Builder() .redirectUri(\"oauth-wedeploy://[mypackagename]\") .provider(Provider.FACEBOOK) .providerScope(\"email\") .build(); WeDeploy.auth(authUrl) .signIn(this, provider); // Use Auth auth = TokenAuth.getAuthFromIntent(intent); to get the token from the Intent Attention Sign-in with Facebook provider is currently not available in Node.js and React Native environments. Setup app client id and secret Create a client id and client secret by registering your application on Facebook. Please be sure to add the callback url https://-.wedeploy.io/oauth/token in your application. For local development, use wedeploy.me instead. To use with custom domains you can change the sufix .wedeploy.io for your domain. After retrieving the client id and client secret you can configure them as environment variables on wedeploy.json. { \"id\": \"auth\", \"image\": \"wedeploy/auth\", \"env\": { \"WEDEPLOYAUTHFACEBOOK\": \"true\", \"WEDEPLOYAUTHFACEBOOKCLIENTID\": \"\", \"WEDEPLOYAUTHFACEBOOKCLIENTSECRET\": \"\" } } Or you can add those environment variables using the Console. What's next? Now we're ready to start enabling other login providers with Google. ","srcFilePath":"src/pages/docs/auth/sign-in-with-facebook/index.md","id":"sign-in-with-facebook","url":"/docs/auth/sign-in-with-facebook/"},"sign-in-with-github":{"title":"Sign-in With GitHub","description":"Let your users authenticate using their GitHub accounts.","headerTitle":"Auth","layout":"guide","weight":6,"content":" {$page.title} {$page.description} If you are unfamiliar with our API, please visit the API Clients page first to learn how to install and configure it. Authenticate Your users can authenticate in a way that redirects them to GitHub's sign-in page, where they're going to type their credentials, and then redirect back to your application. var auth = WeDeploy.auth('https://-.wedeploy.io'); var provider = new auth.provider.Github(); provider.setProviderScope(\"user:email\"); auth.signInWithRedirect(provider); auth.onSignIn(function(user) { // Fires when user is signed in after redirect. }); let auth = WeDeploy.auth('https://-.wedeploy.io'); let provider = AuthProvider(provider: .github, redirectUri: \"my-app://\") provider.providerScope = \"user:email\" auth.signInWithRedirect(provider: provider) { (user, error) in // Fires when user is signed in after redirect. } //Add WeDeploy.auth('https://-.wedeploy.io').handle(url: url) in AppDelegate's open url method // In AndroidManifest.xml, declare an intent filter for the Activity you want to receive the token. // Don't forget to replace [mypackagename] with you application package name. // On your Activity: AuthProvider provider = new AuthProvider.Builder() .redirectUri(\"oauth-wedeploy://[mypackagename]\") .provider(Provider.GITHUB) .providerScope(\"user:email\") .build(); WeDeploy.auth(authUrl) .signIn(this, provider); // Use Auth auth = TokenAuth.getAuthFromIntent(intent); to get the token from the Intent Attention Sign-in with GitHub provider is currently not available in Node.js and React Native environments. Setup app client id and secret Create a client id and client secret by registering your application on GitHub. Please be sure to add the callback url https://-.wedeploy.io/oauth/token in your application. For local development, use wedeploy.me instead. To use with custom domains you can change the sufix .wedeploy.io for your domain. After retrieving the client id and client secret you can configure them as environment variables of the authentication wedeploy.json. { \"id\": \"auth\", \"image\": \"wedeploy/auth\", \"env\": { \"WEDEPLOYAUTHGITHUB\": \"true\", \"WEDEPLOYAUTHGITHUBCLIENTID\": \"\", \"WEDEPLOYAUTHGITHUBCLIENTSECRET\": \"\" } } Or you can add those environment variables using the Console. What's next? Learn more about using environment variables on Auth. ","srcFilePath":"src/pages/docs/auth/sign-in-with-github/index.md","id":"sign-in-with-github","url":"/docs/auth/sign-in-with-github/"},"sign-in-with-google":{"title":"Sign-in With Google","description":"Let your users authenticate using their Google accounts.","headerTitle":"Auth","layout":"guide","weight":5,"content":" {$page.title} {$page.description} If you are unfamiliar with our API, please visit the API Clients page first to learn how to install and configure it. Authenticate Your users can authenticate in a way that redirects them to Google's sign-in page, where they're going to type their credentials, and then redirect back to your application. var auth = WeDeploy.auth('https://-.wedeploy.io'); var provider = new auth.provider.Google(); provider.setProviderScope(\"email\"); auth.signInWithRedirect(provider); auth.onSignIn(function(user) { // Fires when user is signed in after redirect. }); let auth = WeDeploy.auth('https://-.wedeploy.io'); let provider = AuthProvider(provider: .google, redirectUri: \"my-app://\") provider.providerScope = \"email\" auth.signInWithRedirect(provider: provider) { (user, error) in // Fires when user is signed in after redirect. } //Add WeDeploy.auth('https://-.wedeploy.io').handle(url: url) in AppDelegate's open url method // In AndroidManifest.xml, declare an intent filter for the Activity you want to receive the token. // Don't forget to replace [mypackagename] with you application package name. // On your Activity: AuthProvider provider = new AuthProvider.Builder() .redirectUri(\"oauth-wedeploy://[mypackagename]\") .provider(Provider.GOOGLE) .providerScope(\"email\") .build(); WeDeploy.auth(authUrl) .signIn(this, provider); // Use Auth auth = TokenAuth.getAuthFromIntent(intent); to get the token from the Intent Attention Sign-in with Google provider is currently not available in Node.js and React Native environments. Setup app client id and secret Create a client id and client secret by registering your application on Google. Please be sure to add the callback url https://-.wedeploy.io/oauth/token in your application. For local development, use wedeploy.me instead. To use with custom domains you can change the sufix .wedeploy.io for your domain. After retrieving the client id and client secret you can configure them as environment variables of the authentication wedeploy.json. { \"id\": \"auth\", \"image\": \"wedeploy/auth\", \"env\": { \"WEDEPLOYAUTHGOOGLE\": \"true\", \"WEDEPLOYAUTHGOOGLECLIENTID\": \"\", \"WEDEPLOYAUTHGOOGLECLIENTSECRET\": \"\" } } Or you can add those environment variables using the Console. What's next? Now we're ready to start enabling other login providers with GitHub. ","srcFilePath":"src/pages/docs/auth/sign-in-with-google/index.md","id":"sign-in-with-google","url":"/docs/auth/sign-in-with-google/"},"sign-in-with-password":{"title":"Sign-in With Password","description":"Let your users authenticate using their emails and passwords.","headerTitle":"Auth","layout":"guide","weight":3,"content":" {$page.title} {$page.description} If you are unfamiliar with our API, please visit the API Clients page first to learn how to install and configure it. Authenticate To sign in using email and password, call this method: WeDeploy .auth('https://-.wedeploy.io') .signInWithEmailAndPassword(\"user@domain.com\", \"password\") .then(function(user) { // User is signed in. }) .catch(function(err) { // User is not signed in. }); WeDeploy .auth('https://-.wedeploy.io') .signInWith(username: \"user@domain.com\", password: \"password\") .then { auth - Void in // User is signed in. } .catch { err in // User is not signed in. } WeDeploy .auth(\"\") .signIn(\"user@domain.com\", \"password\") .execute(); What's next? Now we're ready to start enabling other login providers like Facebook. ","srcFilePath":"src/pages/docs/auth/sign-in-with-password/index.md","id":"sign-in-with-password","url":"/docs/auth/sign-in-with-password/"}},"childIds":["getting-started","manage-users","sign-in-with-password","sign-in-with-facebook","sign-in-with-google","sign-in-with-github","environment-variables"]},"data":{"title":"Data","url":"/docs/data/getting-started/","icon":"database","weight":4,"content":" ","srcFilePath":"src/pages/docs/data/index.soy","id":"data","location":"/docs/data/","children":{"configuring-data":{"title":"Configuring Data","description":"The api.json and api-*.json files allow us to configure the accessible paths for each data service.","headerTitle":"Data","layout":"guide","weight":2,"content":" {$page.title} {$page.description} If you are unfamiliar with our API, please visit the API Clients page first to learn how to install and configure it. Understanding configuration files By default WeDeploy Data service is going to use all the JSON files starting with api-* and also the file api.json. These files are used to help you manage features such as path validation, authentication, and params validation. The api JSON files are located at the same path of the ./wedeploy.json and are used following the ordering filesystem. JSON attributes After understanding how the api configuration files work, it's time to learn what are the supported attributes: | Field | Description | | - | - | | path | The path that represents the collection used to handle the request data. | | data | Tells the service if the request to a collection should be stored or not. | | description | Used to describe the behavior of an endpoint. | | auth | Used to define authentication rules for the endpoint. | | method | HTTP method allowed for the request. | | parameters | Parameters and validation rules for the collection. | path A path represents the resource used to store your project data. [ { \"path\": \"/movies/:movieId\" }, { \"path\": \"/fruits/*\" } ] data You can create endpoints just for validation, in this case, data is used to finish the request in case you just need a validation or want to store the request in the collection. [ { \"path\": \"/fruits/*\", \"data\": true } ] description Used to describe the behavior of an endpoint. [ { \"description\": \"Returns actors of a movie\", \"path\": \"/movies/:movieId/actors\", \"method\": \"GET\" } ] auth You can prevent unauthorized applications and users from accessing certain endpoints by using the auth field. The example below verifies if the application is authenticated in order to perform the request: [ { \"path\": \"/movies/*\", \"auth\": { \"validator\": \"$auth != null\" } } ] method Specifies the HTTP method used for the request. In the example bellow, it allows a GET request and if you try to do a PUT or DELETE the route will not be recognized and will fail. [ { \"path\": \"/movies/:movieId\", \"data\": true, \"method\": \"GET\" } ] parameters You generally would use parameters to force validation in order to make sure that the params sent to a collection follow predefined rules. [ { \"description\": \"Creates a new movie\", \"path\": \"/movies\", \"method\": \"POST\", \"parameters\": { \"title\": { \"type\": \"string\", \"required\": true } }, \"data\": true } ] Allowing usage of all the collections In order to freely use any collection with any kind of operation, you just need to add the following content in your api.json. [ { \"path\": \"/*\", \"data\": true } ] The path /\\* tells the data service to allow any request to the base path of the data service. Validating resources The Validator script will be executed in an environment where several request and server data will be available. In this environment, there are several global variables available to you that can be used to validate the request parameter, body, or even to authorize the request. The validator can be used as an integration with the Auth service: { \"path\": \"/movies/*\", \"auth\": { \"validator\": \"$auth != null\" } } The global variables are: | Variable | Description | | - | - | | $auth | The authenticated user of this request. If the request was not authenticated, it will be null. | | $config | The raw JSON data stored in the service's config.json file. | | $session | All stored session data. If the request had no session cookie, it will be an empty map for the new session created for this request. | | $params | The request params as they were loaded from url query and request body. All query and form parameters will be strings here. | | $values | The parsed request params, as they are used for parameter validation. All query and form parameters will be parsed to JSON values. | | $body | The parsed request body, according to the request Content-Type. | | $data | The data view for this request, if a data path is mounted in the API path, and the request path represents a key to access any data resource (collection, document or inner field from a document). It will be null otherwise. | Some common validators are: Authenticated users only: $auth !== null Mixed with dynamic values: $auth.id === $params.id Validate new data value agains old one: $body.timestamp $data.timestamp Multiple contitional validation: $auth !== null && $auth.id === $params.id What's next? Now that you have configured, you can start saving data. ","srcFilePath":"src/pages/docs/data/configuring-data/index.md","id":"configuring-data","url":"/docs/data/configuring-data/"},"deleting-data":{"title":"Deleting Data","description":"Destroy an existing field, document or collection in the database.","headerTitle":"Data","layout":"guide","weight":8,"content":" {$page.title} {$page.description} If you are unfamiliar with our API, please visit the API Clients page first to learn how to install and configure it. Deleting existing data To delete a field or an entire collection, we use the delete method: var data = WeDeploy.data('https://-.wedeploy.io'); data.delete('movies/starwarsv/title'); data.delete('movies/starwarsv'); data.delete('movies'); let data = WeDeploy.data('https://-.wedeploy.io') data.delete(collectionOrResourcePath: \"movies/starwarsv/title\") data.delete(collectionOrResourcePath: \"movies/starwarsv\") data.delete(collectionOrResourcePath: \"movies\") WeDeployData data = WeDeploy.data('https://data-datademo.wedeploy.io'); data.delete(\"movies/starwarsv/title\"); data.delete(\"movies/starwarsv\"); data.delete(\"movies\"); ","srcFilePath":"src/pages/docs/data/deleting-data/index.md","id":"deleting-data","url":"/docs/data/deleting-data/"},"getting-started":{"title":"Getting Started","description":"Leverage a NoSQL database with the power of WeDeploy Data.","headerTitle":"Data","layout":"guide","weight":1,"content":" Data {$page.description} Our Data service enables you to store data securely to a cloud database, make complex queries instantly, and consume information in real-time. Try it yourself Want to see the process of deploying WeDeploy Data step by step? Try the tutorial or see a source code demo. Check also the tutorial for Android and the tutorial for iOS. Configuring All WeDeploy projects use similar configuration files to prepare your projects for deployment. Learn more on our page about Getting Started with Deploying. Below is an example of a wedeploy.json for a Data container. { \"id\": \"database\", \"image\": \"wedeploy/data:@site.version.image.data@\" } The id for your services are uniquely determined by you. What's next? Now you can learn more about configuring your data service. ","srcFilePath":"src/pages/docs/data/getting-started/index.md","id":"getting-started","url":"/docs/data/getting-started/"},"real-time-data":{"title":"Real-time Data","description":"Instead of polling for changes, a developer can tell WeDeploy Data to continuously fetch updated query results in real-time.","headerTitle":"Data","layout":"guide","weight":5,"content":" {$page.title} {$page.description} If you are unfamiliar with our API, please visit the API Clients page first to learn how to install and configure it. Watching data changes We presented a lot of features for data filtering and search. You may be wondering where the real-time aspect is in all of this. Well, it's throughout the features we just presented to you. To access our data in real-time, all we need to do is change the WeDeploy API get method to use to the watch method: WeDeploy .data('https://-.wedeploy.io') .watch('movies') .on('changes', function(data) { console.log(data); }) .on('fail', function(error) { console.log(error); }); // You have to hold a strong reference to the socket or it will be released socket = WeDeploy .data('https://-.wedeploy.io') .watch(resourcePath: \"movies\") socket.on([.changes, .error]) { data in switch(data.type) { case .changes: print(\"changes \\(data.document)\") case .error: print(\"error \\(data.document)\") default: break } } WeDeploy .data('https://data-datademo.wedeploy.io') .watch(\"movies\") .on(\"changes\", data - System.out.println(data)) .on(\"fail\", error - System.out.println(error)); Now every time the storage detects changes that affect the query you're watching, you will receive a changes notification with the response body you'd receive if you had done an HTTP GET instead. Furthermore, every time this change leads to an HTTP error response, you'll receive the error object in a fail notification on the client. Watching with advanced filters To present data using advanced search is simple as performing normal queries. You just would need to keep using the watch method and apply any filter you desire. WeDeploy .data('https://-.wedeploy.io') .where('category', 'cinema') .or('category', 'cartoon') .watch('movies') .on('changes', function(data) { console.log(data); }) .on('fail', function(error) { console.log(error); }); // You have to hold a strong reference to the socket or it will be released socket = WeDeploy .data('https://-.wedeploy.io') .where(field: \"category\", op: \"=\", value: \"cinema\") .or(field: \"category\", op: \"=\", value: \"cartoon\") .watch(resourcePath: \"movies\") socket.on([.changes, .error]) { data in switch(data.type) { case .changes: print(\"changes \\(data.document)\") case .error: print(\"error \\(data.document)\") default: break } } WeDeploy .data('https://data-datademo.wedeploy.io') .where(equal(\"category\", \"cinema\").or(\"category\", \"cartoon\")) .watch(\"movies\") .on(\"changes\", data - System.out.println(data)) .on(\"fail\", error - System.out.println(error)); Getting the latest changes The data service uses a query limit 500 by default. In order to always get the latest new record, you would need to limit the query by 1 and order by id desc. WeDeploy .data('https://-.wedeploy.io') .limit(1) .orderBy('id', 'desc') .watch('movies') .on('changes', function(data) { console.log(data); }) .on('fail', function(error) { console.log(error); }); // You have to hold a strong reference to the socket or it will be released socket = WeDeploy .data('https://-.wedeploy.io') .limit(1) .orderBy(field: \"id\", order: .DESC) .watch(resourcePath: \"movies\") socket.on([.changes, .error]) { data in switch(data.type) { case .changes: print(\"changes \\(data.document)\") case .error: print(\"error \\(data.document)\") default: break } } WeDeploy .data('https://data-datademo.wedeploy.io') .limit(1) .orderBy(\"id\", SortOrder.DESCENDING) .watch(\"movies\") .on(\"changes\", data - System.out.println(data)) .on(\"fail\", error - System.out.println(error)); What's next? Now that you've learned how to use real-time, you can start searching data. ","srcFilePath":"src/pages/docs/data/real-time-data/index.md","id":"real-time-data","url":"/docs/data/real-time-data/"},"retrieving-data":{"title":"Retrieving Data","description":"Get an existing field, document or collection in the database.","headerTitle":"Data","layout":"guide","weight":4,"content":" {$page.title} {$page.description} If you are unfamiliar with our API, please visit the API Clients page first to learn how to install and configure it. Get data Reading data from our storage takes only 3 lines of code. WeDeploy .data('https://-.wedeploy.io') .get('movies/starwarsv') .then(function(movie) { console.log(movie); }); WeDeploy .data('https://-.wedeploy.io') .get(resourcePath: \"movies/starwarsv\") .then { movie in print(movie) } WeDeploy .data('https://data-datademo.wedeploy.io') .get(\"movies/starwarsv\") .execute(); The response body is the stored JSON document: { \"id\": \"starwarsv\", \"title\": \"Star Wars: Episode V - The Empire Strikes Back\", \"year\": 1980, \"rating\": 8.8 } We can also get any field value using the full path: WeDeploy .data('https://-.wedeploy.io') .get('movies/starwarsv/title') .then(function(title) { console.log(title); }); WeDeploy .data('https://-.wedeploy.io') .get(resourcePath: \"movies/starwarsv/title\") .then { (movie: String) in // You have to specify the type here to allow compiler infer type print(movie) } WeDeploy .data('https://data-datademo.wedeploy.io') .get(\"movies/starwarsv/title\") .execute(); The full path returns the raw content in the response body: [ {\"id\":\"starwarsi\", \"title\":\"Star Wars: Episode I - The Phantom Menace\", \"year\":1999, \"rating\":6.5}, {\"id\":\"starwarsii\", \"title\":\"Star Wars: Episode II - Attack of the Clones\", \"year\":2002, \"rating\":6.7}, {\"id\":\"starwarsiii\", \"title\":\"Star Wars: Episode III - Revenge of the Sith\", \"year\":2005, \"rating\":7.7}, {\"id\":\"starwarsiv\", \"title\":\"Star Wars: Episode IV - A New Hope\", \"year\":1977, \"rating\":8.7}, {\"id\":\"starwarsv\", \"title\":\"Star Wars: Episode V - The Empire Strikes Back\", \"year\":1980, \"rating\":8.8}, {\"id\":\"starwarsvi\", \"title\":\"Star Wars: Episode VI - Return of the Jedi\", \"year\":1983, \"rating\":8.4}, {\"id\":\"starwarsvii\", \"title\":\"Star Wars: Episode VII - The Force Awakens\", \"year\":2015} ] Sorting data The result is ordered by document id, as we can see in the list above. We can select the order of the results by passing a sort parameter, using the following code: WeDeploy .data('https://-.wedeploy.io') .orderBy('rating', 'desc') .get('movies') .then(function(movies) { console.log(movies); }); WeDeploy .data('https://-.wedeploy.io') .orderBy(field: \"rating\", order: .DESC) .get(resourcePath: \"movies\") .then { movies in print(movies) } WeDeploy .data('https://data-datademo.wedeploy.io') .orderBy(\"rating\", SortOrder.DESCENDING) .get(\"movies\") .execute(); As expected, the result would be the following list: [ {\"id\":\"starwarsv\",\"title\":\"Star Wars: Episode V - The Empire Strikes Back\",\"year\":1980,\"rating\":8.8}, {\"id\":\"starwarsiv\",\"title\":\"Star Wars: Episode IV - A New Hope\",\"year\":1977,\"rating\":8.7}, {\"id\":\"starwarsvi\",\"title\":\"Star Wars: Episode VI - Return of the Jedi\",\"year\":1983,\"rating\":8.4}, {\"id\":\"starwarsiii\",\"title\":\"Star Wars: Episode III - Revenge of the Sith\",\"year\":2005,\"rating\":7.7}, {\"id\":\"starwarsii\",\"title\":\"Star Wars: Episode II - Attack of the Clones\",\"year\":2002,\"rating\":6.7}, {\"id\":\"starwarsi\",\"title\":\"Star Wars: Episode I - The Phantom Menace\",\"year\":1999,\"rating\":6.5}, {\"id\":\"starwarsvii\",\"title\":\"Star Wars: Episode VII - The Force Awakens\",\"year\":2015} ] Notice that because Episode VII has no rating (as it was not released yet), it's sorted as the last document. Applying filters In addition to sorting the results, we can also apply filters using the following code: WeDeploy .data('https://-.wedeploy.io') .where('year', '', 8.5) .get('movies') .then(function(movies) { console.log(movies); }); WeDeploy .data('https://-.wedeploy.io') .where(field: \"year\", op: \"\", value: 8.5) .get(resourcePath: \"movies\") .then { movies in print(movies) } WeDeploy .data('https://data-datademo.wedeploy.io') .where(lt(\"year\", 2000).or(gt(\"rating\", 8.5))) .get(\"movies\") .execute(); The following entries are the result of the above filters: [ {\"id\":\"starwarsiv\",\"title\":\"Star Wars: Episode IV - A New Hope\",\"year\":1977,\"rating\":8.7}, {\"id\":\"starwarsv\",\"title\":\"Star Wars: Episode V - The Empire Strikes Back\",\"year\":1980,\"rating\":8.8} ] Pagination We can also paginate the result using the 'limit' and 'offset' properties. Combining all the tools we've learned so far, we can run a detailed query on our data: WeDeploy .data('https://-.wedeploy.io') .where('year', '', 2000) .orderBy('rating') .limit(2) .offset(1) .get('movies') .then(function(movies) { console.log(movies); }); WeDeploy .data('https://-.wedeploy.io') .where(field: \"year\", op: \"","srcFilePath":"src/pages/docs/data/retrieving-data/index.md","id":"retrieving-data","url":"/docs/data/retrieving-data/"},"saving-data":{"title":"Saving Data","description":"Create a new record in the database with any attributes.","headerTitle":"Data","layout":"guide","weight":3,"content":" {$page.title} {$page.description} If you are unfamiliar with our API, please visit the API Clients page first to learn how to install and configure it. Inserting new data Writing new data is as simple as sending a JSON. WeDeploy .data('https://-.wedeploy.io') .create('movies', { \"title\": \"Star Wars IV\", \"year\": 1977, \"rating\": 8.7 }).then(function(movie) { console.log(movie); }); WeDeploy .data('https://-.wedeploy.io') .create(resource: \"movies\", object: [ \"title\" : \"Star Wars IV\", \"year\" : 1977, \"ratings\" : 8.7 ]) .then { movie in print(movie) } JSONObject movieJsonObject = new JSONObject() .put(\"title\", \"Star Wars IV\") .put(\"year\", 1977) .put(\"rating\", 8.7); WeDeploy .data('https://data-datademo.wedeploy.io') .create(\"movies\", movieJsonObject) .execute(); This operation will return the newly created document, with the following generated ID: { \"id\":\" \"115992383516607958\", \"title\": \"Star Wars IV\", \"year\": 1977, \"rating\": 8.7 } Generated ID is a string and it's structure may vary. It is also possible to define custom app-specific value for the ID, by simply passing the id field as part of the new document. Inserting multiple data With the same method you're able to create multiple data instead using the same method multiple times. You just need to use an array instead an object. WeDeploy .data('https://-.wedeploy.io') .create('movies', [ { \"title\": \"Star Wars III\", \"year\": 2005, \"rating\": 8.0 }, { \"title\": \"Star Wars II\", \"year\": 2002, \"rating\": 8.6 } ]).then(function(movies) { console.log(movies); }); WeDeploy .data('https://-.wedeploy.io') .create(resource: \"movies\", object: [ [ \"title\" : \"Star Wars III\", \"year\" : 2005, \"ratings\" : 8.0 ], [ \"title\" : \"Star Wars II\", \"year\" : 2002, \"ratings\" : 8.6 ] ]) .then { movie in print(movie) } JSONObject movie1JsonObject = new JSONObject() .put(\"title\", \"Star Wars III\") .put(\"year\", 2005) .put(\"rating\", 8.0); JSONObject movie2JsonObject = new JSONObject() .put(\"title\", \"Star Wars II\") .put(\"year\", 2002) .put(\"rating\", 8.6); JSONArray moviesJsonArray = new JSONArray() .put(movie1JsonObject) .put(movie2JsonObject); WeDeploy .data('https://data-datademo.wedeploy.io') .create(\"movies\", moviesJsonArray) .execute(); This operation will return the newly created array of documents, with the following generated IDs: [ { \"id\":\" 115992383516607959\", \"title\": \"Star Wars III\", \"year\": 2005, \"rating\": 8.0 }, { \"id\":\" 115992383516607954\", \"title\": \"Star Wars II\", \"year\": 2002, \"rating\": 8.6 } ] Inserting new fields in an existing collection WeDeploy Data service is really flexible in therms of data structure. You're able to insert new fiels in a collection by adding the new key in the object param. WeDeploy .data('https://-.wedeploy.io') .create('movies', [ { \"title\": \"Star Wars I\", \"obs\": \"First in ABC order\", \"year\": 1999, \"rating\": 9.0 } ]).then(function(movie) { console.log(movie); }); WeDeploy .data('https://-.wedeploy.io') .create(resource: \"movies\", object: [ \"title\": \"Star Wars I\", \"obs\": \"First in ABC order\", \"year\": 1999, \"rating\": 9.0 ]) .then { movie in print(movie) } JSONObject movieJsonObject = new JSONObject() .put(\"title\", \"Star Wars I\") .put(\"obs\", \"First in ABC order\") .put(\"year\", 1999) .put(\"rating\", 9.0); WeDeploy .data('https://data-datademo.wedeploy.io') .create(\"movies\", movieJsonObject) .execute(); This operation will return the newly created document, with the following generated ID: { \"id\":\" 115992383516607954\", \"title\": \"Star Wars I\", \"obs\": \"First in ABC order\", \"year\": 1999, \"rating\": 9.0 } URL scope structure The URL we just created stored a new document in our app's service inside the \"movies\" collection. More information on how to set up this datastore URL can be seen in the section Building APIs. For now, we only need to know that within the path where the data is mounted. The URL will be interpreted as a key that points to a stored resource like the one below: /collectionName/documentId/documentProperty/documentInnerProperty For example, to reference the newly created Star Wars rating, we can use the path: https://-.wedeploy.io/movies/115992383516607958/rating What's next? Now that you've learned how to save, you can start retrieving data. ","srcFilePath":"src/pages/docs/data/saving-data/index.md","id":"saving-data","url":"/docs/data/saving-data/"},"searching-data":{"title":"Searching Data","description":"Advanced queries using search.","headerTitle":"Data","layout":"guide","weight":6,"content":" {$page.title} {$page.description} If you are unfamiliar with our API, please visit the API Clients page first to learn how to install and configure it. Search data We did some great stuff with basic data methods, like create, update, and delete JSON documents. We also learned how to retrieve documents with where, sort, and pagination. What if we need more powerful queries with our documents? In WeDeploy you can do a text search, handle user misspellings, and show the number of documents by category with your data, and much more. First take a look at the text search. It's a simple, yet very powerful way to filter our results by a text query. Using the movie database we created before, let's search for a Star Wars movie by the episode title, like \"Revenge of the Sith\". We are not interested if the letter is in upper or lower case, since we are using English connectors like \"of\" and \"the\". We want something flexible enough that it will also work for texts like \"The revenge of the Sith\", or \"Sith's revenge\". Our match operator is flexible enough for both. WeDeploy .data('https://-.wedeploy.io') .match('title', \"Sith's revenge\") .get('movies') .then(function(movies) { console.log(movies); }); WeDeploy .data('https://-.wedeploy.io') .match(field: \"title\", pattern: \"Sith's revenge\") .get(resourcePath: \"movies\") .then { movies in print(movies) } WeDeploy .data('https://data-datademo.wedeploy.io') .where(match(\"title\", \"Sith's revenge\")) .get(\"movies\") .execute(); The result of the match operator query is the following entry: [{\"id\":\"starwarsiii\",\"title\":\"Star Wars: Episode III - Revenge of the Sith\",\"year\":2005,\"rating\":7.7}] We can also use simple text operators in our match: // we can run this WeDeploy .data('https://-.wedeploy.io') .match('title', '(jedi | force) -return') .get('movies') .then(function(movies) { console.log(movies); }); // or this WeDeploy .data('https://-.wedeploy.io') .match('title', 'awake*') .get('movies') .then(function(movies) { console.log(movies); }); // or even this WeDeploy .data('https://-.wedeploy.io') .match('title', 'wakens~') .get('movies') .then(function(movies) { console.log(movies); }); // we can run this WeDeploy .data('https://-.wedeploy.io') .match(field: \"title\", pattern: \"(jedi | force) -return\") .get(resourcePath: \"movies\") .then { movies in print(movies) } // or this WeDeploy .data('https://-.wedeploy.io') .match(field: \"title\", pattern: \"awake*\") .get(resourcePath: \"movies\") .then { movies in print(movies) } // or even this WeDeploy .data('https://-.wedeploy.io') .match(field: \"title\", pattern: \"wakens~\") .get(resourcePath: \"movies\") .then { movies in print(movies) } // we can run this WeDeploy .data('https://data-datademo.wedeploy.io') .where(match(\"title\", \"(jedi | force) -return\")) .get(\"movies\") .execute(); // or this WeDeploy .data('https://data-datademo.wedeploy.io') .where(match(\"title\", \"awake*\")) .get(\"movies\") .execute(); // or even this WeDeploy .data('https://data-datademo.wedeploy.io') .where(match(\"title\", \"awake~\")) .get(\"movies\") .execute(); Any search in the previous example results in the following match: [{\"id\":\"starwarsvii\",\"title\":\"Star Wars: Episode VII - The Force Awakens\",\"year\":2015}] What we did with * can also be done with the prefix operator Filter.prefix('title', 'awake'). The fuzziness we added to 'wakens' using ~, can also be done explicitly with the fuzzy operator Filter.fuzzy('title', 'wakens'). So far we are still just filtering data with filters. We can do so much more than that! If we use 'query search' instead of 'filter' to send those filters to the server, we can also get information about how relevant a document is to a given search, and order our results by this criteria. Let us introduce this with a new filter that allows us to query movies with a title similar to a given text: WeDeploy .data('https://-.wedeploy.io') .similar('title', 'The attack an awaken Jedi uses to strike a Sith is pure force!') .search('movies') .then(function(movies) { console.log(movies); }); WeDeploy .data('https://-.wedeploy.io') .similar(field: \"title\", query: \"The attack an awaken Jedi uses to strike a Sith is pure force!\") .search(resourcePath: \"movies\") .then { movies in print(movies) } WeDeploy .data('https://data-datademo.wedeploy.io') .where(similar(\"title\", \"The attack an awaken Jedi uses to strike a Sith is pure force!\")) .search(\"movies\") .execute(); We receive not only the documents that match the filter, but also search metadata: { \"total\": 5, \"documents\": [ { \"title\": \"Star Wars: Episode VII - The Force Awakens\", \"id\": \"starwarsvii\" }, { \"title\": \"Star Wars: Episode V - The Empire Strikes Back\", \"id\": \"starwarsv\" }, { \"title\": \"Star Wars: Episode VI - Return of the Jedi\", \"id\": \"starwarsvi\" }, { \"title\": \"Star Wars: Episode III - Revenge of the Sith\", \"id\": \"starwarsiii\" }, { \"title\": \"Star Wars: Episode II - Attack of the Clones\", \"id\": \"stawwarsii\" } ], \"scores\": { \"starwarsii\": 0.13102644681930542, \"starwarsiii\": 0.13102644681930542, \"starwarsv\": 0.13102644681930542, \"starwarsvi\": 0.13102644681930542, \"starwarsvii\": 0.5241057872772217 }, \"queryTime\": 1 } Notice that the score of the starwarsvii document is bigger than the other matches, indicating its title is more similar to the given filter than the others. The documents in the result are now ordered by the relevance of the document, expressed as a number in the scores metadata, rather than the document's ID. Now we can show not only filtered results, but also order our results by relevance! Want more? Well, let's make things even easier for the user! Adding one entry to the search query, we can automatically highlight the words that matched our query, showing not only how relevant the document is to the search, but also where it matches our criteria. We can do this with small changes in our previous search, using the following code: WeDeploy .data('https://-.wedeploy.io') .similar('title', 'The attack an awakened Jedi uses to strike a Sith is pure force!') .highlight('title') .search('movies') .then(function(movies) { console.log(movies); }); WeDeploy .data('https://-.wedeploy.io') .similar(field: \"title\", query: \"The attack an awaken Jedi uses to strike a Sith is pure force!\") .highlight(\"title\") .search(resourcePath: \"movies\") .then { movies in print(movies) } WeDeploy .data('https://data-datademo.wedeploy.io') .where(similar(\"title\", \"The attack an awakened Jedi uses to strike a Sith is pure force!\")) .highlight(\"title\") .search(\"movies\") .execute(); As you can see in the code below, our keywords are highlighted in the results: { \"total\": 5, \"documents\": [ { \"title\": \"Star Wars: Episode VII - The Force Awakens\", \"id\": \"starwarsvii\" }, { \"title\": \"Star Wars: Episode V - The Empire Strikes Back\", \"id\": \"starwarsv\" }, { \"title\": \"Star Wars: Episode VI - Return of the Jedi\", \"id\": \"starwarsvi\" }, { \"title\": \"Star Wars: Episode III - Revenge of the Sith\", \"id\": \"starwarsiii\" }, { \"title\": \"Star Wars: Episode II - Attack of the Clones\", \"id\": \"starwarsii\" } ], \"scores\": { \"starwarsii\": 0.13102644681930542, \"starwarsiii\": 0.13102644681930542, \"starwarsv\": 0.13102644681930542, \"starwarsvi\": 0.13102644681930542, \"starwarsvii\": 0.5241057872772217 }, \"queryTime\": 1 } The third search feature is also quite simple, but can be applied to generate meaningful statistical information about our data. What if we need to compare the average rating the first three movies received, with the last three movies? We can do that with aggregations, using the following code: WeDeploy .data('https://-.wedeploy.io') .lt('year', 1990) .aggregate('Old Movies', 'rating', 'avg') .count() .get('movies') .then(function(aggregation) { console.log(aggregation); }); WeDeploy .data('https://-.wedeploy.io') .lt(field: \"year\", value: 1990) .aggregate(name: \"Old movies\", field: \"rating\", op: \"avg\") .count() .get(resourcePath: \"movies\") .then { (aggregation: [String : Any]) in print(aggregation) } WeDeploy .data('https://data-datademo.wedeploy.io') .where(lt(\"year\", 1990)) .aggregate(avg(\"Old Movies\", \"rating\")) .count() .get(\"movies\") .execute(); The count we added to the query informed the server that we are not interested in the documents themselves, but rather the number of matches and search metadata. The result, in this case, will be the following data: { \"total\": 3, \"queryTime\": 13, \"aggregations\": { \"Old Movies\": 8.633333333333333 } } Cool, right? Simply run another query for the newest movies, and then you'll have the data you need to compare them. There are some additional operators that you might find useful: min, max, sum, histogram, and even a generic stats that returns several statistics over the field. Take a look at the example below to see results using the additional operators: { \"total\": 3, \"queryTime\": 8, \"aggregations\": { \"Old Movies\": { \"average\": 8.633333333333333, \"count\": 3, \"max\": 8.8, \"min\": 8.4, \"name\": \"Old Movies\", \"standardDeviation\": null, \"sum\": 25.9, \"sumOfSquares\": null, \"variance\": null } } } Notice that in order to read and write your service's root path you need to map it with an API endpoint and data flag active. If we want to inform the server of the data type of a collection field before it receives its first document, we can POST/PATCH the data root with the mapping information: WeDeploy .data('https://-.wedeploy.io') .create('movies', { \"location\": \"geo_point\" }); WeDeploy .data('https://-.wedeploy.io') .create(body: [ \"places\" : [ \"location\" : \"geo_point\" ] ]) JSONObject locationJsonObject = new JSONObject() .put(\"location\", \"geo_point\"); JSONObject placesJsonObject = new JSONObject() .put(\"places\", locationJsonObject); WeDeploy .data('https://data-datademo.wedeploy.io') .create(\"\", placesJsonObject); We can never update an already mapped field, but we can map new fields in an existing collection, as we did in the request above. When we manually map our collection, we can use some extra datatypes that are not mapped dynamically: date, geopoint, and geoshape. We will focus on geo_point for this next feature. So, we mapped a field called location, in the collection places, as representing a geolocation point. This means we can operate, filter, and aggregate the places we put in that collection, using geo filters over this field! Let's try something simple: find cinemas close to London's Waterloo Station. To run the search criteria, we'll use the following code: WeDeploy .data('https://-.wedeploy.io') .any('category', 'cinema') .distance('location', '51.5031653,-0.1123051', '1mi') .get('places') .then(function(places) { console.log(places); }); WeDeploy .data('https://-.wedeploy.io') .any(field: \"category\", value: [\"cinema\"]) .distance(field: \"location\", latitude: 51.5031653, longitude: -0.1123051, distance: .mile(1)) .get(resourcePath: \"places\") .then { places in print(places) } WeDeploy .data('https://data-datademo.wedeploy.io') .where(any(\"category\", \"cinema\").and(distance(\"location\", \"51.5031653,-0.1123051\", \"1mi\"))) .get(\"places\") .execute(); Our result is the following matches: [ { \"name\": \"BFI IMAX\", \"location\": \"51.5126928,-0.12052\", \"id\": \"116686224946770924\", \"category\": [ \"cinema\" ] }, { \"name\": \"Cinema Museum\", \"location\": \"51.501661,-0.1177734\", \"id\": \"116686224946770925\", \"category\": [ \"cinema\", \"museum\" ] }, { \"name\": \"Roxy Bar and Screen\", \"location\": \"51.5012603,-0.1146835\", \"id\": \"116686224946770926\", \"category\": [ \"cinema\", \"bar\", \"restaurant\" ] } ] Now we can plug a map to our app, and let users see and filter places, with just a few lines of code. What's next? Now that you've learned how to search, you can start updating data. ","srcFilePath":"src/pages/docs/data/searching-data/index.md","id":"searching-data","url":"/docs/data/searching-data/"},"updating-data":{"title":"Updating Data","description":"Update an existing record in the database with certain attributes.","headerTitle":"Data","layout":"guide","weight":7,"content":" {$page.title} {$page.description} If you are unfamiliar with our API, please visit the API Clients page first to learn how to install and configure it. Updating existing data Updating existing data is as simple as sending a JSON. WeDeploy .data('https://-.wedeploy.io') .update('movies/115992383516607958', { \"rating\": 9.1 }).then(function(movie) { console.log(movie); }); WeDeploy .data('https://-.wedeploy.io') .update(resourcePath: \"movies/115992383516607958\", updatedAttributes: [ \"rating\": 9.1 ]) .then { movie in print(movie) } JSONObject movieJsonObject = new JSONObject() .put(\"rating\", 9.1); WeDeploy .data('https://data-datademo.wedeploy.io') .update(\"movies/115992383516607958\", movieJsonObject) .execute(); This operation will return the updated document with the new rating: { \"id\":\" 115992383516607958\", \"title\": \"Star Wars IV\", \"year\": 1977, \"rating\": 9.1 } What's next? Now that you've learned how to update, you can start deleting data. ","srcFilePath":"src/pages/docs/data/updating-data/index.md","id":"updating-data","url":"/docs/data/updating-data/"}},"childIds":["getting-started","configuring-data","saving-data","retrieving-data","real-time-data","searching-data","updating-data","deleting-data"]},"deploy":{"title":"Deploy","url":"/docs/deploy/getting-started/","icon":"cloud","weight":2,"content":" ","srcFilePath":"src/pages/docs/deploy/index.soy","id":"deploy","location":"/docs/deploy/","children":{"continuous-deployment":{"title":"Continuous Deployment","description":"Trigger a new deployment every time you push changes to a designated branch of your GitHub repository.","headerTitle":"Deploy","layout":"guide","weight":2,"content":" {$page.title} {$page.description} Create a project Go to the WeDeploy Console Click on \"New Project\" in the top right corner of the screen Type a desired project name and then click \"Create Project\" Connect to GitHub On your project, click on \"Deployment\" Go to the \"GitHub\" tab Click on \"Connect to Github\" (if its your first time, you will need to authenticate with GitHub) Select the repository and branch that you want to deploy Click on the \"Connect Repository\" button This will immediately start building and deploying your application. In the end, you'll be able to see it online in any browser. If you don't have a project ready to deploy, you can fork this GitHub repository and connect to it. What's next? Now you're ready to connect to GitHub and deploy any kind of application. Let's start with Deploying Node.js? ","srcFilePath":"src/pages/docs/deploy/continuous-deployment/index.md","id":"continuous-deployment","url":"/docs/deploy/continuous-deployment/"},"deploying-docker":{"title":"Deploying Docker","description":"Launch a Docker application in few seconds.","headerTitle":"Deploy","layout":"guide","weight":7,"content":" Docker {$page.description} Introduction Docker is the world‚Äôs leading software container platform. Developers use Docker to eliminate ‚Äúworks on my machine‚Äù problems when collaborating on code with co-workers. Enterprises use Docker to build agile software and ship new features faster. Try it yourself Want to see the process of deploying Docker step by step? Try the tutorial or see a source code demo. Configuring All WeDeploy projects use similar configuration files to prepare your projects for deployment. Learn more on our page about Getting Started with Deploying. Below is an example of a wedeploy.json for a Docker container. The id for your services are uniquely determined by you. { \"id\": \"myservice\" } You need to place a wedeploy.json wherever you have a Dockerfile. If you were deploying a Wordpress site using Docker images for Wordpress and a MySQL database, this is what your project could look like: myservice ‚îú‚îÄ‚îÄ db ‚îÇ ‚îú‚îÄ‚îÄ Dockerfile ‚îÇ ‚îî‚îÄ‚îÄ wedeploy.json ‚îî‚îÄ‚îÄ wp ‚îú‚îÄ‚îÄ Dockerfile ‚îî‚îÄ‚îÄ wedeploy.json What's next? Now you can start building your docker based application. ","srcFilePath":"src/pages/docs/deploy/deploying-docker/index.md","id":"deploying-docker","url":"/docs/deploy/deploying-docker/"},"deploying-java":{"title":"Deploying Java","description":"Launch a Java application in few seconds.","headerTitle":"Deploy","layout":"guide","weight":5,"content":" Java {$page.description} Introduction Java is a concurrent, class-based, object-oriented language expressly designed for use in the distributed environment of the web. It is normally compiled to the binary format defined in the JVM Specification. Try it yourself Want to see the process of deploying Java step by step? Try the tutorial or see a source code demo. Configuring All WeDeploy projects use similar configuration files to prepare your projects for deployment. Learn more on our page about Getting Started with Deploying. Below is an examples of a wedeploy.json for the Java container. The id for your services are uniquely determined by you. { \"id\": \"myservice\", \"memory\": 2048 } You need to place a wedeploy.json wherever you have a build.gradle. If you were deploying a to-do list application using java, this is what your project could look like: myservice ‚îú‚îÄ‚îÄ build.gradle ‚îî‚îÄ‚îÄ wedeploy.json What's next? Now you can start building your Java based application. ","srcFilePath":"src/pages/docs/deploy/deploying-java/index.md","id":"deploying-java","url":"/docs/deploy/deploying-java/"},"deploying-liferay-dxp":{"title":"Deploying Liferay DXP","description":"Launch a Liferay DXP application in few seconds.","headerTitle":"Deploy","layout":"guide","weight":6,"content":" Liferay DXP {$page.description} Introduction Liferay DXP provides an architecture for companies to digitize business operations, deliver connected customer experiences, and gather actionable customer insight, with the ultimate goal of providing better customer experiences for their clients. We give you a free 15 day trial period before you must apply a license. Try it yourself Want to see the process of deploying Liferay DXP step by step? Try the tutorial or see a source code demo. Configuring All WeDeploy projects use similar configuration files to prepare your projects for deployment. Learn more on our page about Getting Started with Deploying. Below is an example of a wedeploy.json for a Liferay DXP service. The id for your services are uniquely determined by you. { \"id\": \"myservice\", \"image\": \"wedeploy/liferay:@site.version.image.liferay@\", \"volume\": \"/wedeploy-container\", \"memory\": 4096, \"cpu\": 3 } Hot Deployment Liferay DXP's hot deploy mechanism allows you to install themes, portlets, OSGi modules, and even a license by simply including WAR, JAR, and XML files into a deploy folder. For example, if you wanted to deploy a custom JAR file, this is how your directory could look like: myservice ‚îú‚îÄ‚îÄ deploy ‚îÇ ‚îî‚îÄ‚îÄ com.liferay.wedeploy.samples.portlet-1.0.0.jar ‚îî‚îÄ‚îÄ wedeploy.json Under the hood, those files will be copied into the $LIFERAY_HOME/deploy folder and automatically deployed on startup. What's next? Now you can start building your Liferay DXP application. ","srcFilePath":"src/pages/docs/deploy/deploying-liferay-dxp/index.md","id":"deploying-liferay-dxp","url":"/docs/deploy/deploying-liferay-dxp/"},"deploying-nodejs":{"title":"Deploying Node.js","description":"Launch a Node.js application in few seconds.","headerTitle":"Deploy","layout":"guide","weight":3,"content":" Node.js {$page.description} Introduction Node.js is an open-source, cross-platform runtime for developing server-side web applications using JavaScript. It has an event-driven architecture capable of asynchronous I/O. Try it yourself Want to see the process of deploying Node.js step by step? Try the tutorial or see a source code demo. Configuring All WeDeploy projects use similar configuration files to prepare your projects for deployment. Learn more on our page about Getting Started with Deploying. Below is an example of a wedeploy.json for a Node.js container. The id for your services are uniquely determined by you. { \"id\": \"myservice\" } You need to place a wedeploy.json wherever you have a package.json. If you were deploying a Node.js application, this is what your project could look like: myservice ‚îú‚îÄ‚îÄ index.js ‚îú‚îÄ‚îÄ package.json ‚îî‚îÄ‚îÄ wedeploy.json What's next? Now you can start building your Node.js based application. ","srcFilePath":"src/pages/docs/deploy/deploying-nodejs/index.md","id":"deploying-nodejs","url":"/docs/deploy/deploying-nodejs/"},"deploying-ruby":{"title":"Deploying Ruby","description":"Launch a Ruby application in few seconds.","headerTitle":"Deploy","layout":"guide","weight":4,"content":" Ruby {$page.description} Introduction Ruby is a dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write. Try it yourself Want to see the process of deploying Ruby step by step? Try the tutorial or see a source code demo. Configuring All WeDeploy projects use similar configuration files to prepare your projects for deployment. Learn more on our page about Getting Started with Deploying. Below is an example of a wedeploy.json for a Ruby container. The id for your services are uniquely determined by you. { \"id\": \"myservice\" } You need to place a wedeploy.json wherever you have a Gemfile. If you were deploying a Ruby application, this is what your project could look like: myservice ‚îú‚îÄ‚îÄ Gemfile ‚îî‚îÄ‚îÄ wedeploy.json What's next? Now you can start building your ruby based application. ","srcFilePath":"src/pages/docs/deploy/deploying-ruby/index.md","id":"deploying-ruby","url":"/docs/deploy/deploying-ruby/"},"getting-started":{"title":"Getting Started","description":"Deploying is very easy with WeDeploy. You can start hosting your project, building a database, or even authenticating users within a couple of minutes!","headerTitle":"Deploy","layout":"guide","weight":1,"content":" Deploy {$page.description} Getting Started There are basically two ways to deploy your project. You can integrate with GitHub for continuous deployment or use the command line for instant deployment, as seen below: Download the CLI In your terminal, run this command: curl https://cdn.wedeploy.com/cli/latest/wedeploy.sh -sL | bash This will install our command-line interface which is a tool that will help you use the WeDeploy platform. The command above will only work for Unix-like systems such as macOS or Linux. If you use Windows, you should download the Windows amd64 installer. Deploy Instantly Assuming you already have a project locally, now you just need to run: we deploy This will immediately start uploading your files. Once that's finished, WeDeploy will start building and deploying your application. In the end, you'll be able to see it online in any browser. If you don't have a project ready to deploy, you can download this simple project and run the we deploy command inside that folder. Notice that this command will create a random name for your project. If you want to specify a new name or choose an existing project, you just need to run: we deploy -p myproject Being able to deploy instantaneously is great, but sometimes you want to trigger a deploy every time a push is made to GitHub. If that's your case, check the Continuous Deployment section. Automatic Code Detection When you send a bunch of files to WeDeploy, we detect how you want us to build your source code. If you are deploying a project using Node.js, Java, Ruby, or a Dockerfile, we will scan your project and build it according to your project's unique attributes. For example, if we find a package.json, we'll build that as a Node.js service. In order to make sure we know where you want us to scan, we require that you place a wedeploy.json inside the folder of every service you want to deploy and simply declare an ID inside. { \"id\": \"myservice\" } Configuring All WeDeploy services use a wedeploy.json file to defines the service's attributes and configurations. Once you push your local project to WeDeploy, we scan it for wedeploy.json files. when we find one, we serve that whole directory as a part of the service you defined within. For example, let's say you have a folder named myservice that uses our Hosting, Data, and Email services. This is what your project's file structure could look like: myservice ‚îú‚îÄ‚îÄ nodejs ‚îÇ ‚îú‚îÄ‚îÄ package.json ‚îÇ ‚îî‚îÄ‚îÄ wedeploy.json ‚îî‚îÄ‚îÄ hosting ‚îú‚îÄ‚îÄ wedeploy.json ‚îî‚îÄ‚îÄ index.html WeDeploy uses this JSON file to reference a service by ID in case it's already created. If a service with a matching ID does not exist, it creates a new service for you. Reference | Field | Type | Default | Description | | ----------------- | ------- | ------- | ---------------------------- | | id | String | random | Unique service ID | | image | String | | Service image type | | env | Object | | Exported variables | | port | Number | 80 | Exposed service port | | cpu | Number | 1 | Number of processing units | | scale | Number | 1 | Maximum number of instances | | memory | Number | 512 | Amount of computing memory | | volume | String | | Persistant database storage | | customDomains | Array | | Set custom domain names | Usage: Here are all the configuration fields in action within a wedeploy.json. { \"id\": \"myservice\", \"image\": \"wedeploy/example\", \"env\": { \"DB_USER\": \"root\", \"DB_PASSWORD\": \"pass123\", }, \"port\": 8080, \"cpu\": 2, \"scale\": 2, \"memory\": 2048, \"volume\": \"/opt/storage\", \"customDomains\": [\"myservice.com\", \"www.myservice.com\"] } Try it yourself We have created a whole array of tutorials to teach you how to start using WeDeploy. Click on one of the links below that interests you and begin your journey towards deployment! Hosting: Deploy static files like HTML, CSS, and JS. Data: Deploy a to-do list app using our Data Service and JS. Auth: Deploy an authentication app using our Auth Service and JS. Email: Deploy an email-sending app using our Email Service and JS. Java: Deploy an app using Java and Spring Boot. Ruby: Deploy an app using Ruby and Sinatra. Node.js: Deploy an app using Node.js and Express. Liferay DXP: Deploy a Liferay DXP instance. Docker: Deploy a Docker container. ","srcFilePath":"src/pages/docs/deploy/getting-started/index.md","id":"getting-started","url":"/docs/deploy/getting-started/"},"migrating-to-beta":{"title":"Migrating to Beta","description":"We have made some fundamental changes to the way you setup your project source code and simplified the way you deploy your apps. Walk through these easy steps and your project will be ready for deployment.","headerTitle":"Deploying","layout":"guide","weight":8,"content":" {$page.title} {$page.description} Introduction On August 4th, we announced our new Beta version of WeDeploy. With that release we launched the new infrastructure that can be accessed by our Console. Along with that big infrastructure change, we also introduced other things like custom Docker images and HTTPS, which lead to a big question that you might be asking yourself: \"will the projects I built on Alpha work on Beta?\" The answer is \"yes\", but there are a few easy changes that need to be made to your projects first. Below is a guide on how to seamlessly do that! If you have any trouble, don't hesitate to reach out to a WeDeploy human, we'd love to help. Attention All Alpha projects, including the previous Dashboard, will be unavailable on September 4th. Make sure to migrate your projects to Beta before then. Configuration files Delete you project.json. We no longer support this file. Rename all container.json files to wedeploy.json. In the wedeploy.json, change type to image and add the 0.0.1 tag. Java, Node.js, and Ruby We no longer support the Node.js, Java, and Ruby WeDeploy images. Instead, we are releasing something called Automatic Code Detection. Basically, we'll try to determine what language your project uses, so you can push any project using Node.js, Java, and Ruby, and we will build it from there. For example, if we find a package.json, we'll build that as a Node.js service. In order to make sure we know where you want us to scan, we require that you place a wedeploy.json inside the folder of every service you want to deploy and simply declare an ID inside. { \"id\": \"myservice\" } Liferay We also no longer support the Liferay Portal CE (Community Edition) WeDeploy image. In order to deploy Liferay Portal CE, you must do it with a Dockerfile using the liferay/portal image. Or you can try Liferay DXP which is a new service we provide. We will give you a free 15 day trial period before you must apply a license. Here is an example of the wedeploy.json that you could use to deploy a Liferay DXP instance. { \"id\": \"myservice\", \"image\": \"wedeploy/liferay:@site.version.image.liferay@\", \"volume\": \"/opt/liferay\", \"memory\": 4096, \"cpu\": 3 } API client JavaScript CDN Links Update your JavaScript CDN API links to https. Update the version to 2.3.1 API Endpoints Remove hardcoded protocols (http://) on API URL's. Each service now has its own domain instead of being a subdomain of your project. This means you must update your API endpoints (serviceID-projectID.wedeploy.io). Because of this domain change, we now no longer allow dashes in the project IDs. Data Migrating Database If you want to migrate your data collections, you can do this manually by sending GET requests from Alpha and POST requests to Beta. If you are not familiar with that process, feel free to reach out to us and we can migrate them over for you. Auth OAuth Redirect Since your new app will have a new URL, you must update your Auth redirect URL's for your registered apps if you use OAuth providers like Google, Facebook, or Github. Migrating Userbase There is no way to manually migrate your previous users. To do so, reach out to us and we can help you migrate your userbase. Email We made some syntax updates on the Email Javascript API to make it even more intuitive. Instead of declaring your email endpoint with .url(), you now use .email(). You now no longer need to add /emails to the end of your URL. You must add an .auth('masterToken or userCredentials') after the URL. Sending email Change syntax from .form('from', 'to@mail.com') to .from('to@mail.com') for all email variables. Change .post() to .send(). Checking status Instead of including the ID of the email in the URL, add it like this .status('00000000') You no longer need to use .get because the .status will make the request. Deployment Before you had two ways of deploying code, you could either connect with GitHub or create a remote pointing to our Git server. We noticed that people loved the convenience of integrating with GitHub so we're keeping that, but when using our Git server the experience was not as fluid, specially the authentication step on every push. There are now two ways to deploy your project: Instant Deployment and Continuous Deployment. This means we no longer allow deployments with our Git server. Custom domains Because we have removed the Home Service functionality, and consequently the project URL (myapp.wedeploy.io), you are now only able to set custom domains on the service level. We have also created a new way to add Custom Domains. You can now configure your root domain with our regional nameservers. Local Development In order to focus our efforts towards a seamless cloud-based experience, we are currently not supporting local development in Beta. What's Next? You're all set! Start having fun deploying projects on WeDeploy Beta and let us know if we can help you in any way. ","srcFilePath":"src/pages/docs/deploy/migrating-to-beta/index.md","id":"migrating-to-beta","url":"/docs/deploy/migrating-to-beta/"}},"childIds":["getting-started","continuous-deployment","deploying-nodejs","deploying-ruby","deploying-java","deploying-liferay-dxp","deploying-docker","migrating-to-beta"]},"email":{"title":"Email","url":"/docs/email/getting-started/","icon":"mail-full","weight":5,"content":" ","srcFilePath":"src/pages/docs/email/index.soy","id":"email","location":"/docs/email/","children":{"checking-status":{"title":"Checking Status","description":"Sending an email is an asynchronous task. Use this to know if an email was sent or not.","headerTitle":"Email","layout":"guide","weight":3,"content":" {$page.title} {$page.description} If you are unfamiliar with our API, please visit the API Clients page first to learn how to install and configure it. Checking Status In order to check if an email was sent or not, we can use the email ID, e.g. 123, and request the status in the same way we sent the email. WeDeploy .email('-.wedeploy.io') .auth('') .status('') .then(function(response) { console.log('Email status:', response); }) .catch(function(error) { // Some error has happened }); WeDeploy.email('-.wedeploy.io') .checkEmailStatus(id: \"202605176596079530\") .then { status in print(\"Email status: \\(status)\") } .catch { error in // Some error has happened } WeDeploy .email('-.wedeploy.io') .checkEmailStatus(\"\") .execute(); What's next? Learn more about using environment variables on Email. ","srcFilePath":"src/pages/docs/email/checking-status/index.md","id":"checking-status","url":"/docs/email/checking-status/"},"environment-variables":{"title":"Environment Variables","description":"Use environment variables to control your app.","headerTitle":"Email","layout":"guide","weight":4,"content":" {$page.title} {$page.description} If you are unfamiliar with how you can apply this concept, please visit our main Environment Variables page. Reference Here's a list of all the environment variables you can use with this service. | Key | Description | | - | - | | EMAIL_HOST | Custom SMTP server host | | EMAIL_PORT | Custom SMTP server port | | EMAIL_USERNAME | Custom SMTP server user | | EMAIL_PASSWORD | Custom SMTP server password | | EMAIL_PAUSE | Interval in milliseconds between each email sending | | EMAIL_SSL | Enables SSL/TLS | ","srcFilePath":"src/pages/docs/email/environment-variables/index.md","id":"environment-variables","url":"/docs/email/environment-variables/"},"getting-started":{"title":"Getting Started","description":"Send emails to your users using WeDeploy Email.","headerTitle":"Email","layout":"guide","weight":1,"content":" Email {$page.description} Introduction Our Email service enables you to send customized emails to your users and check on their status with just a few lines of code. Try it yourself Want to see the process of deploying WeDeploy Email step by step? Try the tutorial or see a source code demo. Check also the tutorial for Android and the tutorial for iOS. Configuring All WeDeploy projects use similar configuration files to prepare your projects for deployment. Learn more on our page about Getting Started with Deploying. Below is an example of a wedeploy.json for an Email container. { \"id\": \"mail\", \"image\": \"wedeploy/email:@site.version.image.email@\" } The id for your services are uniquely determined by you. What's next? Now you can learn more about sending emails to our users. ","srcFilePath":"src/pages/docs/email/getting-started/index.md","id":"getting-started","url":"/docs/email/getting-started/"},"sending-email":{"title":"Sending Email","description":"Send an email asynchronously and its ID will be returned.","headerTitle":"Email","layout":"guide","weight":2,"content":" {$page.title} {$page.description} If you are unfamiliar with our API, please visit the API Clients page first to learn how to install and configure it. Sending email In order to send emails, we can simply make a request to the url of our service and include some required parameters like from, to, and subject. WeDeploy .email('-.wedeploy.io') .auth('') .from('from@domain.com') .to('to@domain.com') .subject('Hi there!') .message('What are your plans on Thursday?') .send() .then(function(response) { console.log('Email ID:', response); }) .catch(function(error) { // Some error has happened }); WeDeploy .email('-.wedeploy.io') .from(self.username) .to(self.username) .subject(\"subject\") .message(\"body\") .send() .then { id in print(\"Email ID: \\(id)\") } .catch { error in // Some error has happened } WeDeploy .email(\"-.wedeploy.io/emails\") .from(\"from@domain.com\") .to(\"to@domain.com\") .subject(\"Hi there!\") .send() .execute(); As a result, we'll receive an email ID. This doesn't indicate that the email has already sent, it actually just means that it was added to the email queue. See \"checking the email status\" to learn more about email status. Reference Here is a list of all the email parameters you can pass. Parameter | Type | Description ------------ | ------- | ------------ bcc | string | Bcc recipient email address. Multiple addresses should be defined in multiple parameters. cc | string | Cc recipient email address. Multiple addresses should be defined in multiple parameters. from | string | Sender email address. message | string | HTML content of your email message. Up to 5MB. priority | number | Used by email clients to define a message's importance. From 1 to 5 where '1' is highest and '5' is the lowest priority. replyTo | string | Append a reply-to address to your email message. subject | string | Subject of your email. Up to 1MB. to | string | Recipient email address. Multiple addresses should be defined in multiple parameters. What's next? Now that you sent an email, you can learn how to check on its status. ","srcFilePath":"src/pages/docs/email/sending-email/index.md","id":"sending-email","url":"/docs/email/sending-email/"}},"childIds":["getting-started","sending-email","checking-status","environment-variables"]},"hosting":{"title":"Hosting","url":"/docs/hosting/getting-started/","icon":"folder","weight":6,"content":" ","srcFilePath":"src/pages/docs/hosting/index.soy","id":"hosting","location":"/docs/hosting/","children":{"custom-error-pages":{"title":"Custom Error Pages","description":"Show error pages that are consistent with your site's style.","headerTitle":"Hosting","layout":"guide","weight":2,"content":" {$page.title} {$page.description} Custom Error Pages When people try to access nonexistent pages on your site, WeDeploy will display a 404 error page. This page follows a template that might not fit to your visual needs. The good news is that you can create custom error pages that are consistent with your site's style. Files put into the special directory /_error are mapped as the error files to be served in case of an error. They must take the form of .html. Check the boilerplate-hosting for a practical example. ","srcFilePath":"src/pages/docs/hosting/custom-error-pages/index.md","id":"custom-error-pages","url":"/docs/hosting/custom-error-pages/"},"environment-variables":{"title":"Environment Variables","description":"Use environment variables to control your app.","headerTitle":"Hosting","layout":"guide","weight":3,"content":" {$page.title} {$page.description} If you are unfamiliar with how you can apply this concept, please visit our main Environment Variables page. Reference Here's a list of all the environment variables you can use with this service. | Key | Default Value | Description | | - | - | - | | WEDEPLOYWEBPATH | / | Path to serve static files | | WEDEPLOYWEBERRORPATH | /error | Path to serve error pages | Usage: Here are the environment variables in action within a wedeploy.json. { \"id\": \"myservice\", \"image\": \"wedeploy/hosting:@site.version.image.hosting@\", \"env\": { \"WEDEPLOYWEBPATH\": \"dist\", \"WEDEPLOYWEBERROR_PATH\": \"myerrors\", } } ","srcFilePath":"src/pages/docs/hosting/environment-variables/index.md","id":"environment-variables","url":"/docs/hosting/environment-variables/"},"getting-started":{"title":"Getting Started","description":"Serve static files easily using WeDeploy Hosting.","headerTitle":"Hosting","layout":"guide","weight":1,"content":" Hosting {$page.description} Introduction Our Hosting service allows you to deliver HTML, CSS, JavaScript, or any other static files using powerful static hosting. It's super fast and will save you a lot of time. Try it yourself Want to see the process of deploying WeDeploy Hosting step by step? Try the tutorial or see a source code demo. Configuring All WeDeploy projects use similar configuration files to prepare your projects for deployment. Learn more on our page about Getting Started with Deploying. Below is an example of a wedeploy.json for a Hosting container. { \"id\": \"ui\", \"image\": \"wedeploy/hosting:@site.version.image.hosting@\" } The id for your services are uniquely determined by you. What's next? Now you can learn more about custom error pages. ","srcFilePath":"src/pages/docs/hosting/getting-started/index.md","id":"getting-started","url":"/docs/hosting/getting-started/"}},"childIds":["getting-started","custom-error-pages","environment-variables"]},"intro":{"title":"Intro","url":"/docs/intro/what-why-and-how/","icon":"arrow-right-rod","weight":1,"content":" ","srcFilePath":"src/pages/docs/intro/index.soy","id":"intro","location":"/docs/intro/","children":{"api-clients":{"title":"API Clients","description":"Make requests to WeDeploy using a standardized interface.","headerTitle":"Intro","layout":"guide","weight":5,"content":" {$page.title} {$page.description} Introduction You can use our API Clients for sending/receiving requests to/from WeDeploy services like Auth, Email, and Hosting. We built those libraries to make your life easier and adapt to your current workflow. Below you can find a list that contains all of them, including instructions on how to install and details for each specific platform. JavaScript (Web & Node.js) You can use this by adding a script element in your HTML file or to load the library using NPM. Installation CDN NPM npm install --save wedeploy Nuances After installing WeDeploy using NPM, you can load this package like this: var WeDeploy = require('wedeploy'); // Or if you're using ES6 import WeDeploy from 'wedeploy'; This library is compatible with all major browsers (Chrome, Firefox, Safari, Edge, and IE10+) as well as React Native and React VR. The API calls are the same in all JavaScript environments. Swift (iOS) In order to start using you have to add it as Cocoapod in your Podfile. Installation Cocoapods pod 'WeDeploy' Nuances By default, all requests returns a promise like below. WeDeploy .data(\"https://-.wedeploy.io\") .get(resourcePath: \"movies\") .then { movie - Void in print(movie) } You are also able to return a callback or observable. These two methods are available: // toCallback converts a promise into a callback WeDeploy .data(\"https://-.wedeploy.io\") .get(resourcePath: \"movies\") .toCallback { movies, error in // here you can check the error or the response } // toObservable converts a promise into an observable WeDeploy .data(\"https://-.wedeploy.io\") .get(resourcePath: \"movies\") .toObservable() .subscribe( onNext: { movies in // here you receive the movies }, onError: { error in // oops something went wrong } ) Java (Android) You just need to add the following line to your build.gradle file. Installation Gradle compile 'com.wedeploy:com.wedeploy.android:@site.version.api.android@' Nuances Before calling any method from WeDeploy, you have to build an instance first: WeDeploy weDeploy = new WeDeploy.Builder().build(); Then, you are able to synchronously fire requests to WeDeploy by calling execute(): weDeploy .data(\"https://data-datademo.wedeploy.io\") .get(\"movies\") .execute(); You can also fire asynchronous requests by specifying a Callback to the execute() method: weDeploy .data(\"https://data-datademo.wedeploy.io\") .get(\"movies\") .execute(new Callback() { public void onSuccess(Response response) { // here you receive the movies } public void onFailure(Exception e) { // oops something went wrong } }); The WeDeploy Android API is RxJava 2 compatible. This means that you can convert the request into a Single RxJava object, which emits either a success or an error event. You must add a dependency to RxAndroid in your project build.gradle in order to use it. weDeploy .data(\"https://data-datademo.wedeploy.io\") .get(\"movies\") .asSingle() .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .subscribe( response - { }, throwable - { }); What's next? Learn more about using Custom Domains. ","srcFilePath":"src/pages/docs/intro/api-clients/index.md","id":"api-clients","url":"/docs/intro/api-clients/"},"custom-domains":{"title":"Custom Domains","description":"Often times in production apps, you will want to point your service URL's to a custom domain so it's easier for users to find your site and more consistant with your message and branding.","headerTitle":"Intro","layout":"guide","weight":6,"content":" {$page.title} {$page.description} Introduction To make your app live right away, WeDeploy makes every service accessible via its service domain, but when your app moves towards production, you will most likely want to add a custom domain to beautify your websites URL. Configuring custom domains can be a tricky and complicated process, which is why we wanted to make it simple and straightforward for you. Simple Setup The easiest way to configure your custom domain, is to add one of our WeDeploy name servers. Once you point to our name server from your domain provider, you can simply add the custom domain to your service and we will do all the configuration work for you. Go to your domain provider and find where you can set a custom name server. Enter one of the regional WeDeploy name servers from below. Go to the service of your project, click on \"Custom Domains\", and add the new domain. | Country | Name Server | | ----------------- | ------------------------------- | | Australia | sydney.wedeploy.domains | | Germany | frankfurt.wedeploy.domains | | France | paris.wedeploy.domains | | Netherlands | amsterdam.wedeploy.domains | | Singapore | singapore.wedeploy.domains | | United Kingdom | london.wedeploy.domains | | United States | california.wedeploy.domains | | United States | iowa.wedeploy.domains | | United States | newyork.wedeploy.domains | Adding Subdomains Now that you have your root domain setup, you may want to add a subdomain like www.myapp.com. This is very simple and can by done by configuring the CNAME on your domain provider. | Record | Subdomain | Project Target Domain | | ----------------- | -------------------- | ------------------------ | | CNAME | www.mydomain.com | ui-myapp.wedeploy.io. | | CNAME | api.mydomain.com | db-myapp.wedeploy.io. | Advanced Configuration What if you want to configure the DNS yourself? No problem, that is a simple process as well. Instead of using a name server to route your project, you can simply add an apex domain as an CNAME. | NAME | TYPE | DATA | | ----------------- | ----------- | ----------------------- | | empty | CNAME | ui-myapp.wedeploy.io. | Attention This method is only available for domain providers that allow CNAME configuration for root domains. What's next? Learn more about using environment variables. ","srcFilePath":"src/pages/docs/intro/custom-domains/index.md","id":"custom-domains","url":"/docs/intro/custom-domains/"},"environment-variables":{"title":"Environment Variables","description":"When building software, we often find ourselves with the need of having different information depending if our code is running locally or in production. Instead of having to hard-code those values, we can take advantage of environment variables.","headerTitle":"Intro","layout":"guide","weight":7,"content":" {$page.title} {$page.description} Introduction Environment variables are a set of dynamic placeholders that can affect the way a certain service will behave. They are dynamic because they can change according to your needs. A good example would be credentials for a database, where each environment has its own values. The ideal solution for handling this scenario, would be using environment variables, in order to set up different configurations for different environments using the same code. WeDeploy can help you configure environment variables in two ways, you can either use the Console or use the wedeploy.json file. Using the Console 1) Go to the specific service page. 2) Click on \"Environment\". 3) Add your keys and values. 4) Click on \"Update Environment\". This will restart your service with the new environment variables. Attention If you create or update a variable on the Console, this will not automatically reflect on wedeploy.json. So make sure you also update your local file if you need both environments in sync. Using wedeploy.json You can also define environment variables directly on your code repository by using the wedeploy.json files like this: { \"id\": \"myservice\", \"env\": { \"DATABASE_USER\": \"root\", \"DATABASE_PASSWORD\": \"test\" } } Attention All environment variables specified on wedeploy.json will be created or updated on the Console. If there are variables specified only on Console, they will remain the same. What's next? Some WeDeploy services have pre-defined environment variables, you can learn more about it by visiting them individually: Auth Environment Variables Email Environment Variables Hosting Environment Variables ","srcFilePath":"src/pages/docs/intro/environment-variables/index.md","id":"environment-variables","url":"/docs/intro/environment-variables/"},"feature-overview":{"title":"Feature Overview","description":"This is an overview of the features that make WeDeploy the easiest way to deploy and scale applications.","headerTitle":"Intro","layout":"guide","weight":2,"content":" {$page.title} {$page.description} Automatic code detection WeDeploy tries to determine what language your project uses based on the file structure. We scan your directory in order to install dependencies, compile the code, and run the application. Our automatic code detection comes with a number of pre-configured recipes for projects that contain Docker, Node.js, Ruby, or Java files. Zero downtime deployments Whenever a new deployment is triggered, you don't want your application to go offline until the new version is 100% ready. What you want is to minimize user interruption. With WeDeploy you can push updates and restart your services with zero downtime. HTTPS certificates Every project you deploy and every service you install will automatically be given a HTTPS certificate. This means your application will safely communicate with your users without you having to configure anything. WeDeploy also makes sure that those HTTPS certificates are valid by renewing them from time to time. That way you can always trust that your application will be secured. High availability WeDeploy is highly available and makes it easy for your services to be highly available too. Mission-critical services require health monitoring, self-healing, and fault tolerance both for themselves and the platform and infrastructure they run on. WeDeploy gives you multiple layers of protection. To achieve self-healing, WeDeploy services are monitored and restarted when they fail. Even legacy services that don‚Äôt support distribution or replication can be automatically restarted to maximize uptime and reduce service interruption. Global DNS We know how tedious it is to setup your domains. That's why we have a reliable and scalable DNS solution. You can point your domains directly to our nameservers and we will automatically configure everything for you. WeDeploy provides a DNS service across 7 different countries, including Australia, Germany, France, Netherlands, Singapore, United Kingdom, United States. Our goal is to ensure that you always have low-latency resulting in a great experience for your users and your business. Elastic scalability WeDeploy gives you the power to easily scale your services up and down with the turn of a dial. You can change the number of service instances at any time and we will also autoscale the number of instances based on your site's traffic, using the WeDeploy Load Balancer. Intuitive user interfaces WeDeploy offers two interfaces to make it easy to monitor and manage the projects and their services. The WeDeploy Console lets you monitor resource allocation, run service health checks, and more with intuitive browser-based navigation, real-time graphs, and interactive debugging tools. The WeDeploy Command-line Interface (CLI) provides you control from the comfort of a terminal. It‚Äôs powerful, yet easily scriptable, with handy commands to interact with your projects. What's next? Learn more about using the WeDeploy Console. ","srcFilePath":"src/pages/docs/intro/feature-overview/index.md","id":"feature-overview","url":"/docs/intro/feature-overview/"},"using-the-command-line":{"title":"Using the Command-line","description":"The WeDeploy Command-Line Interface is a tool for helping you to use the WeDeploy platform by providing support for things like creating, managing, and scaling applications.","headerTitle":"Intro","layout":"guide","weight":4,"content":" Using the CLI {$page.description} Install If you use a Unix-like system such as macOS or Linux, open your terminal and run: curl https://cdn.wedeploy.com/cli/latest/wedeploy.sh -sL | bash If you use Windows, check the Windows amd64 installer. For other systems, see a list of all builds available. Login to your account There are two ways you can authenticate, the first option will open up your browser and authenticate you from there: we login If you already have an account, it will redirect you to a success page. If you don't have an account yet, you must sign up and confirm your email. The second option only works if you already have an account and requires you to manually type your email and password: we login --no-browser Logout from your account In order to switch between different accounts, you can logout from an account by running: we logout Note: this will not logout on your browser, only on the terminal. Deploy projects or services To deploy a folder using a random project ID, type: we deploy Deploy a folder to a specific project: we deploy --project Deploy to a specific service inside of a project: we deploy --project --service Alternatively, you can deploy to a service by passing the full URL: we deploy --url -.wedeploy.io Show logs of the services You can check the logs of an entire project: we log --project Or you can see the logs of a specific service inside of a project: we log --project --service Alternatively, you can see the logs of a service by passing the full URL: we log --url -.wedeploy.io Manage custom domains Get the list of custom domains for a particular service: we domain --project --service Add a custom domain to a service: we domain add example.com --project --service Remove custom domain from a service: we domain rm example.com --project --service Alternatively, you can run those same commands by passing the full URL: we domain --url -.wedeploy.io Manage environment variables Get the list of environment variables for a particular service: we env --project --service Add an environment variable to a service: we env set SOME_KEY somevalue --project --service Remove environment variable from a service: we env rm SOME_KEY --project --service Alternatively, you can run those same commands by passing the full URL: we env --url -.wedeploy.io List projects or services See the full list of projects and services you own or collaborator with: we list List the services that are contained on a project: we list --project Check a specific service inside of a project: we list --project --service Alternatively, check a specific service by passing the full URL: we list --url -.wedeploy.io Delete projects or services You can delete an entire project: we delete --project Or you can delete a specific service inside of a project: we delete --project --service Alternatively, you can delete a service by passing the full URL: we delete --url -.wedeploy.io Open the console To quickly open the console in your browser, type: we console Update the CLI In order to update the command-line to the latest version, run: we update If you're feeling adventurous, you can try the unstable version for breaking changes: we update --channel unstable What's next? Learn more about using the WeDeploy API Client. ","srcFilePath":"src/pages/docs/intro/using-the-command-line/index.md","id":"using-the-command-line","url":"/docs/intro/using-the-command-line/"},"using-the-console":{"title":"Using the Console","description":"In this section, you'll learn how to deploy an application using WeDeploy Console.","headerTitle":"Intro","layout":"guide","weight":3,"content":" {$page.title} {$page.description} Introduction The WeDeploy Console is a home for you to create, install, manage, configure, view logs, and check the status of your projects. To get started, you first need to create a WeDeploy account by signing up through the Console Signup Page. When you login to the Console, you will see a list of your WeDeploy projects. If you don't have any yet, don't worry, we will go over how to change that below. Create a new project To start, you must create new project by going to the button in the top right corner named \"New Project\". Then you can type an ID for your project. Project names are permanent and cannot be changed later. Once your project is created, it will show up on your Console main page. To see the details of your project, click on the name of the project. Install a service By clicking on a project, you can start monitoring and configuring your project and its services. In each project, you can have up to three services installed. To install a new service, click on the \"Install Service\" button in the top right corner of your project's Console screen. Select a service type You must choose the type of service you want to install. Choose an ID Similar to project ID's, service ID's are permanent and cannot be changed later. When you have chosen an ID, click \"Install Service\". Install service Now WeDeploy will start building and deploying your service automatically. View your service live Once your service is installed, we give you a specific URL for that service that is made up with the service and project ID's (website-strawberry.wedeploy.io). You can always find this URL by clicking on the service in the overview section. What's next? Learn more about using the WeDeploy CLI. ","srcFilePath":"src/pages/docs/intro/using-the-console/index.md","id":"using-the-console","url":"/docs/intro/using-the-console/"},"what-why-and-how":{"title":"What, Why, and How","description":"Forget about infrastructure. WeDeploy helps you to dedicate your time to what really matters: building and scaling great apps. Before exploring WeDeploy further, make sure you understand its purpose and philosophy.","headerTitle":"Intro","layout":"guide","weight":1,"content":" {$page.title} {$page.description} What is WeDeploy? WeDeploy is a deployment platform that gives you access to intuitive APIs that can help you create modern apps faster. From simple applications to full microservice architectures, launch your production-ready environments in a matter of minutes without having to change your stack. We also know it's not just about getting your app live quickly, but also about effectively meeting user demands with minimal development overhead. This is why we provide many features that allow you to quickly and efficiently respond to the needs of your users. Deploy and configure your cloud app from your command line Automatically distribute incoming traffic across multiple instances. Authenticate users with only a few lines of code. Store data securely and consume information in real-time. Release applications with zero downtime. Build and deploy custom microservices. Why should I use it? When building highly scalable applications there are many things you need to consider like performance bottlenecks, database resilience and scalability, authorization, and user authentication. Because of this, WeDeploy was built to become a deployment platform that handles all of your back-end challenges in one place. Focus on creating amazing user experiences and WeDeploy will take care of the rest. How will it help me? From a solo project to a full project team application, WeDeploy will provide the tools to manage the visibility, scale, and DNS for your application. WeDeploy provides an infrastructure to deploy microservices in a managed cloud infrastructure. Whether you use Node.js, PHP, Java, Wordpress, or even just HTML, CSS, and JavaScript, we provide an unopinionated deployment flow so you can use the stack you are already comfortable with. To do this, we utlilize the diversity of Docker What's next? Learn more about all we offer. ","srcFilePath":"src/pages/docs/intro/what-why-and-how/index.md","id":"what-why-and-how","url":"/docs/intro/what-why-and-how/"}},"childIds":["what-why-and-how","feature-overview","using-the-console","using-the-command-line","api-clients","custom-domains","environment-variables"]}},"childIds":["intro","deploy","auth","data","email","hosting"]},"terms":{"title":"Terms of Service","description":"Liferay WeDeploy Beta Services Agreement","layout":"termsPage","hidden":true,"content":" {$page.description} PLEASE READ THIS AGREEMENT CAREFULLY BEFORE PURCHASING AND/OR USING WEDEPLOY. BY USING WEDEPLOY, END USER SIGNIFIES ITS ASSENT TO AND ACCEPTANCE OF THIS AGREEMENT AND ACKNOWLEDGES IT HAS READ AND UNDERSTANDS THIS AGREEMENT. AN INDIVIDUAL ACTING ON BEHALF OF AN ENTITY REPRESENTS THAT HE OR SHE HAS THE AUTHORITY TO ENTER INTO THIS AGREEMENT ON BEHALF OF THAT ENTITY. IF END USER DOES NOT ACCEPT THE TERMS OF THIS AGREEMENT, THEN IT MUST NOT USE WEDEPLOY. This Liferay WeDeploy Beta Services Agreement, including all referenced appendices and documents located at URLs (the \"Agreement\"), is between Liferay, Inc. (\"Liferay\") with a principal place of business at 1400 Montefino Ave, Diamond Bar, CA 91765 and the user of WeDeploy (\"WeDeploy\") who accepts the terms of this Agreement (\"You\" or \"End User\"). The effective date of this Agreement is the earlier of the date that End User accepts this Agreement or the date that End User uses WeDeploy (\"Effective Date\"). 1. Definitions \"Account\" means the individual account each End User must create and use to access WeDeploy. \"Acceptable Use Policy\" means the WeDeploy Acceptable Use Policy set forth in Appendix A, attached to this Agreement. \"Affiliate\" means in the case of a company, an entity that owns or controls, is owned or controlled by, or is under common control or ownership with a party, where ‚Äòcontrol‚Äô is the possession, direct or indirect, of the power to direct or cause the direction of the management and policies of an entity, whether though ownership of voting shares, by contract or otherwise. \"Application(s)\" means the web application(s) that an End User creates and makes available through the use of WeDeploy. \"Beta Term\" means the period of time Liferay makes the \"beta\" version of WeDeploy available to the general public. \"Content\" means any content or data whether developed in connection with WeDeploy or otherwise, software code, documentation, materials, information, text files, images and/or trademarks associated with Your Account, Application or any other use of WeDeploy and not provided by Liferay. \"Liferay Software and/or Services\" means the software and/or services made available through WeDeploy for End User to build an Application that is owned by, maintained by, or is a community project sponsored by Liferay. \"Privacy Policy\" means Liferay‚Äôs privacy policy set forth at https://www.liferay.com/privacy-policy. \"Service Level\" means the resources allotted per each End User Account within the WeDeploy web service. \"Third Party Software and/or Services\" means the software and/or services made available through WeDeploy for End User to build an Application that is not owned or maintained by Liferay. 2. Accounts An End User is required to create and maintain an Account to access and use Liferay WeDeploy to create Applications by providing a valid email address and creating a password. End Users may not create multiple Accounts to increase the Service Level provided for each End User. Each End User remains fully responsible for any activity through an End User‚Äôs Account. 3. Use Liferay grants End User a non-exclusive, non-assignable, worldwide right to access and use WeDeploy for the Beta Term solely for the Customer's evaluation and testing of WeDeploy and subject to the terms herein. Each End User is responsible for determining the suitability of WeDeploy for each End User‚Äôs individual use, including with respect to any laws and/or regulations relating to data protection or privacy. Liferay grants End User a limit of three projects and three services per project. Each service has a limit of three CPUs, four thousand and ninety six megabytes of memory, and two instances. After the Beta Term, WeDeploy may be made available under a separate agreement for use other than solely for evaluation and subject to terms that vary from this Agreement. You understand that Liferay is not obligated to provide You access to WeDeploy, your Application or your Content after expiration of the Beta Term. You are responsible for backing up your Application, Content or other data. Liferay‚Äôs provision of the WeDeploy under this Agreement does not require Liferay to meet any service level agreements, promises, or uptimes. Liferay retains all right, title, and interest in WeDeploy. 4. Content Each End User is responsible for the Content made available through use of WeDeploy, including but not limited to the Content‚Äôs compliance with law, the Content‚Äôs compliance with the Acceptable Use Policy, the right to use such Content, and administering take down notices related to the Content. Liferay however reserves the right to suspend or terminate an End User‚Äôs use of or access to WeDeploy immediately and without liability to a End User if any Content breaks any applicable law, requires additional consent or permission a End User has not obtained, or does not comply with the Acceptable Use Policy. An End User may be required upon a reasonable request by Liferay to provide Content or other information as may be reasonably necessary to ensure a End User‚Äôs compliance with the Acceptable Use Policy. End Users are prohibited from using WeDeploy to store, create, or deploy Content that is regulated under the International Traffic in Arms Regulations (ITAR). 5. Third Party Software and Services Certain Third Party Software and/or Services may be made available for use through WeDeploy for an End User to create its own Application(s). Each End User is fully responsible for the choice of any Third Party Software and/or Services within an End User‚Äôs Application. The availability of such Third Party Software and/or Services does not constitute and endorsement by Liferay. The terms and/or conditions that apply to an End User‚Äôs use of any Third Party Software and/or Services within a End User‚Äôs Application are as solely agreed upon between a End User and the Third Party Software and/or Services provider. If an End User chooses to use Third Party Software and/or Services within an End User‚Äôs Application, Liferay may be required to grant the Third Party Software and/or Services provider access to a End User‚Äôs Content or Account to the extent necessary to provide the Third Party Software and/or Services or for interoperability with the Third Party Software and/or Services. Third Party Services may be removed from or no longer available through WeDeploy at any time, for example but not limited to if a take down is required by law or due to inconsistent interoperability. 6. Provision of Services You give Liferay, its Affiliates, subcontractors, and vendors a worldwide, royalty-free, non-exclusive license to (a) host the Content provided by You through Your use of WeDeploy, and (b) display the Content provided by You through Your use of WeDeploy accessible by other users. You represent and warrant that you own all rights in, or have received a valid license to use the Content, with rights or license sufficient to enable any activities in connection with WeDeploy. You must provide all required and appropriate warnings, information and disclosures as may be required due to the nature of the Content. You are solely responsible for backing up Content and otherwise using measures, as You deem necessary to ensure that Content is not lost. 7. Fees There are currently no fees associated with an End Users use of WeDeploy during the Beta Term. Use of WeDeploy may be subject to fees under a separate agreement upon conclusion of the Beta Term. 8. Term and Termination This Agreement will terminate upon expiration of the Beta Term. Sections will survive termination of this agreement. 9. Feedback End Users may choose to submit, including but not limited to, comments, information, feedback, enhancement requests, recommendations, corrections, and ideas regarding Liferay‚Äôs products or services (collectively \"Feedback\") to Liferay in order for Liferay to improve its products and services. If End Users do not want Liferay to improve the products and services using Feedback, please do not submit the Feedback. If you do submit Feedback, Liferay may incorporate such Suggestions as Liferay‚Äôs own into its product and services without any obligation to account to You in any way and Liferay shall be the owner of any products and services it creates as a result of Your Feedback. Liferay may use solutions or technologies that monitor an End Users usage statistics while using WeDeploy. Liferay will only use such usage statistics related to an End User Account in accordance with the Privacy Policy and only to improve WeDeploy or to assist an End User in its use of WeDeploy. 10. Data To provide Liferay WeDeploy to End Users, Liferay may transfer an End User‚Äôs Content or other information between Liferay, its Affiliates, vendors, and/or subcontractors, which may be located worldwide. Liferay‚Äôs Affiliates and/or subcontractors are acting as data processors on behalf of an End User, and may process the Content to provide Liferay WeDeploy. Each End User is responsible for obtaining any necessary consents from users whose sensitive data or other Content is hosted in an End User‚Äôs Application. Any Content or other data used by an End User in an Application an run on Liferay WeDeploy will be subject to and may be used in accordance with the Privacy Policy. Each End User that creates an Application for End Users agrees to protect the privacy of the Application‚Äôs End Users, including implementing appropriate policies and safeguards (that at minimum contain terms substantially similar to those in the Privacy Policy) and notifying such End Users that their data will be stored on facilities accessible to Liferay, its Affiliates, vendors and/or subcontractors. Liferay may provide information including but not limited to Content and information concerning your Account as required by law or to establish or to exercise its legal rights to defend itself against claims without liability. 11. Warranties You represent and warrant that (a) Your use of WeDeploy you will comply with all applicable laws and regulations; (b) You will comply with the Acceptable Use Policy when using WeDeploy; (c) You have the rights in the Content and Application to use such Content and Application with WeDeploy; (d) Your Content and Application do not infringe a third party‚Äôs intellectual property rights (e); You will take all reasonable security precautions when using WeDeploy; and (f) You will not reverse engineer or attempt to reverse engineer WeDeploy. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, WEDEPLOY (INCLUDING ANY SOFTWARE) AS PROVIDED BY LIFERAY AND ITS AFFILIATES ARE PROVIDED AND LICENSED \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTY OF QUALITY, MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE, AND SUCH IMPLIED WARRANTIES, AND ANY OTHER WARRANTIES, REPRESENTATIONS, CONDITIONS AND TERMS, EXPRESS OR IMPLIED (AND WHETHER IMPLIED BY STATUTE, COMMON LAW, COURSE OF DEALING, TRADE USAGE OR OTHERWISE) ARE HEREBY EXCLUDED TO THE FULLEST EXTENT PERMITTED BY LAW. LIFERAY AND ITS AFFILIATES DO NOT GUARANTEE THAT WEDEPLOY OR ANY SOFTWARE OR SERVICES PROVIDED UNDER THIS AGREEMENT HAVE BEEN DESIGNED TO MEET CUSTOMER‚ÄôS SPECIFIC BUSINESS REQUIREMENTS, THE USE OF WEDEPLOY SERVICES OR SOFTWARE WILL BE UNINTERRUPTED OR ERROR FREE, COMPLY WITH LEGAL OR REGULATORY REQUIREMENTS APPLICABLE TO CUSTOMER, OR THAT LIFERAY WILL CORRECT ALL ERRORS. END USER AGREES THAT IT IS SOLELY RESPONSIBLE FOR THE RESULTS OBTAINED FROM THE USE WEDEPLOY SERVICES AND SOFTWARE PROVIDED UNDER THIS AGREEMENT. WITHOUT LIMITING THE GENERALITY OF THE FOREGOING DISCLAIMER, WEDEPLOY SERVICES AND ANY SOFTWARE PROVIDED UNDER THIS AGREEMENT ARE NOT SPECIFICALLY DESIGNED, MANUFACTURED OR INTENDED FOR USE IN (I) FACILITIES OR ENVIRONMENTS REQUIRING FAILSAFE PERFORMANCE, INCLUDING BUT NOT LIMITED TO (A) THE PLANNING, CONSTRUCTION, MAINTENANCE, CONTROL, OR DIRECT OPERATION OF NUCLEAR FACILITIES, (B) AIRCRAFT NAVIGATION, CONTROL OR COMMUNICATION SYSTEMS, WEAPONS SYSTEMS, (C) DIRECT LIFE SUPPORT SYSTEMS OR (II) ULTRA-HAZARDOUS OR STRICT LIABILITY ACTIVITIES AND THE CUSTOMER IS SOLELY RESPONSIBLE AND EXPRESSLY ASSUMES ALL RISK FOR ANY SUCH USE. 12. Limitation of Liability NOTWITHSTANDING ANYTHING TO THE CONTRARY CONTAINED IN THIS AGREEMENT AND TO THE MAXIMUM EXTENT PERMITTED UNDER APPLICABLE LAW, IN NO EVENT WILL LIFERAY OR ITS AFFILIATES HAVE ANY LIABILITY TO END USER AND/OR ITS AFFILIATES, UNDER ANY LEGAL OR EQUITABLE THEORY, WHETHER IN CONTRACT, TORT (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE), PRODUCT LIABILITY, STATUTE OR OTHERWISE, FOR OR IN CONNECTION WITH: (I) ANY ECONOMIC LOSSES, LOSS OF REVENUE, LOSS OF CUSTOMERS OR BUSINESS, LOSS OF OR DAMAGE TO REPUTATION OR GOODWILL, LOSS OF ANTICIPATED PROFITS, LOSS UNDER OR IN RELATION TO ANY OTHER CONTRACT, LOSS OF DATA OR INTERRUPTION OF SERVICES, LOSS OF ANTICIPATED SAVINGS OR BENEFITS, OR COVER OR ANALOGOUS COST RELATED TO THE PROCUREMENT OF REPLACEMENT SERVICES OR SOFTWARE; (II) ANY LOSSES, COSTS, EXPENSES OR DAMAGES ARISING OUT OF OR IN CONNECTION WITH ANY MALFUNCTIONS, REGULATORY NON-COMPLIANCE, DELAYS, PRODUCT LIABILITY, RELIANCE, BREACH OF ANY IMPLIED DUTY; OR (III) ANY LOSSES, COSTS, EXPENSES OR DAMAGES OTHER THAN DIRECT DAMAGES, INCLUDING WITHOUT LIMITATION, ANY INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, CONSEQUENTIAL OR PUNITIVE DAMAGES, LOSSES, COSTS OR EXPENSES. IN EACH CASE (I) THROUGH (III), WHETHER OR NOT FORESEEABLE; EVEN IF A PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES, LOSSES, COSTS OR EXPENSES. FOR ALL EVENTS AND CIRCUMSTANCES AND TO THE MAXIMUM EXTENT PERMITTED UNDER APPLICABLE LAW, THE AGGREGATE AND CUMULATIVE LIABILITY OF LIFERAY AND ITS AFFILIATES TO THE OTHER PARTY AND/OR ITS AFFILIATES ARISING OUT OF OR RELATING TO THIS AGREEMENT, INCLUDING WITHOUT LIMITATION ON ACCOUNT OF PERFORMANCE OR NON-PERFORMANCE OF OBLIGATIONS, REGARDLESS OF THE FORM OF THE CAUSE OF ACTION, WHETHER IN CONTRACT, TORT (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE), STATUTE OR OTHERWISE WILL NOT EXCEED FIFTY UNITED STATES DOLLARS ($50). 13. Indemnification If a third party makes a claim against Liferay or its Affiliates that Your Application, Content or other use of WeDeploy infringes any patent, copyright or trademark, or misappropriates any trade secret, then You shall indemnify and defend Liferay, its Affiliates, its directors, officers and employees against such a claim at Your expense and You shall pay all losses, damages and expenses (including reasonable attorneys' fees) finally awarded against such parties or agreed to in a written settlement agreement signed by Liferay and/or its Affiliates, to the extent arising from the claim. 14. Governing Law; Jurisdiction The validity, interpretation and enforcement of this Agreement (and any dispute or claim relating to it, or its formation, existence, construction, performance or termination) will be governed by and construed in accordance with the laws of the United States and of the State of California without giving effect to the conflicts of laws provisions thereof or the United Nations Convention on Contracts for the International Sale of Goods. All disputes or claims arising out of or relating to this Agreement or its subject matter will be submitted to the exclusive jurisdiction of the state or federal courts of competent jurisdiction located in Los Angeles County, California and each party irrevocably consents to such personal jurisdiction and waives all objections to this venue. In the event the Uniform Computer Information Transactions Act (UCITA) or any similar federal or state laws or regulations are enacted, it will not apply to this Agreement, and the governing law will remain as if such law or regulation had not been enacted. 15. Notices All notices to Liferay permitted or required under this Agreement shall be in English, in writing and shall be delivered in person, by certified or registered express mail, by other nationally recognized overnight delivery service, electronic mail, or facsimile. Notices shall be deemed received the day of personal delivery, or in relation to transmission by electronic mail, at the time at which the notice enters an information system which is under the control of the recipient or in relation to facsimile, on receipt by the sender of an acknowledgment or transmission report generated by the machine from which the facsimile was sent that the facsimile was successfully sent in its entirety or five (5) days after deposit in the mail or with a nationally recognized overnight delivery service. End Users shall direct all notices to Liferay under this Agreement to the following address: Liferay, Inc., Attn: Legal Department, 1400 Montefino Avenue, Diamond Bar, California 91765; E-mail: legal@liferay.com; FAX: (866) 497-9792. All notices to End Users permitted or required under this Agreement shall be addressed to the e-mail address associated with an End Users Account and shall be deemed received immediately after being sent to the e-mail address provided to Liferay. 16. Assignment You may not assign this Agreement or any of its rights or obligations under this Agreement without the Liferay‚Äôs prior written consent. Liferay may assign this Agreement or any of its rights or obligations under this agreement (i) to any Affiliate, or (ii) in connection with any sale, transfer, or other disposition of all or substantially all of its business or assets. 17. Force Majeure Neither party shall be liable to the other for failure or delay in the performance of a required obligation under this Agreement if such failure or delay is caused by acts of God, wars, riots, strikes, fire, terrorist acts, flood, explosion, failure or diminishment of power or of telecommunications or data networks or services, earthquake or other natural disaster, government regulation, or other similar cause beyond such party's reasonable control. 18. Headings Headings to the sections of this Agreement are for convenience only and shall not have any effect on construction and interpretation of this Agreement. No provision shall be construed adversely to a party solely on the ground that the party was responsible for the preparation of this Agreement or that provision 19. Entire Agreement This agreement contains all the terms agreed to by the parties relating to its subject matter. It replaces all previous discussions, understandings, and agreements. 20. Severability If any part of this agreement is declared unenforceable or invalid, the remainder will continue to be valid and enforceable. 21. Waiver A party's failure or neglect to enforce any of rights under this agreement will not be deemed to be a waiver of that party's rights. 22. Waiver of Jury Trial TO THE FULLEST EXTENT PERMITTED BY APPLICABLE LAW, EACH PARTY WAIVES THE RIGHT TO TRIAL BY JURY IN ANY LEGAL PROCEEDING ARISING OUT OF OR RELATING TO THIS AGREEMENT OR THE TRANSACTIONS CONTEMPLATED UNDER THIS AGREEMENT. 23. Agreement Updates Liferay reserves the right to update this Agreement from time to time by posting an updated version no later than thirty (30) days prior to the posted effective date of such update. Your continued use and access of WeDeploy after the posted effective date signifies your acceptance to the updated Agreement. Appendix A: WeDeploy Acceptable Use Policy 1. Content Your use of WeDeploy is subject to all applicable laws and regulations, and You agree not to violate such laws and/or regulations. In addition, You agree not to insert, upload, contribute, share, post, distribute, transmit or otherwise promote or facilitate Content that, including but not limited to: (a) is illegal; (b) violates, misappropriates or infringes the third party intellectual property rights of others; (c) solicits, encourages, or promotes use of illegal substances or activities; (d) is threatening, abusive, harassing, defamatory, slanderous, libelous, derogatory, or violent; (e) is invasive of a third party‚Äôs legal rights, including privacy or publicity rights; (f) is vulgar, obscene, bigoted, hateful, or that advocates racial or ethnic intolerance; (g) is profane, scandalous, pornographic, indecent, or otherwise objectionable; (h) is malicious or contains technology that may damage, interfere with, or intercept any system, program or data, including viruses, trojan horses, worms, time bombs or other harmful or disruptive components. 2. Conduct Liferay provides access to WeDeploy for use and purposes in conformance with applicable documentation and/or as otherwise generally described by Liferay and not for interfering with other users enjoyment of WeDeploy or to harass other users or third parties. You are prohibited from conduct, including but not limited to: (a) using WeDeploy for any act or action that gives rise to civil or criminal liability for Yourself or for Liferay or otherwise violates any applicable law or regulation; (b) engaging in any activity that inappropriately restricts or inhibits any other user from using or enjoying WeDeploy, including hacking, cracking, spoofing, or defacing any portion of WeDeploy; (c) posting, distributing, or transmitting chain letters, mass mailings, spam mail, any robot, spider, site search/retrieval application, or other manual or automatic device or process to retrieve or index data or \"data mine\"; (d) harvesting or collecting information about other WeDeploy users without their express written consent; (e) interfering with others‚Äô use and enjoyment of WeDeploy, including intentionally attempting to overload any portion of WeDeploy; (f) launching or facilitating a denial of service attack from or on WeDeploy or (g) using WeDeploy in connection with illegal or unlawful sharing. 3. Security You may not use WeDeploy in any manner that would comprise or violate the security of WeDeploy or other users of WeDeploy, including but not limited to: (a) accessing or using WeDeploy in violation of law, any applicable terms and conditions, or without permission, attempting to test the vulnerability of the security of WeDeploy or to breach any of the security measures of WeDeploy; (b) imitating or impersonating another person or his or her email address or creating false accounts intended to misrepresent yourself or the source of your email; (c) intercepting or monitoring activity on WeDeploy without permission or (d) using any means to circumvent the security limitations of WeDeploy. 4. Reporting Liferay encourages You to report violations of this Acceptable Use Policy to Liferay. Liferay has the right, but not the obligation, to monitor Your activity and Content to determine Your compliance with this Acceptable Use Policy. Liferay has the right in its sole discretion to monitor your activity and Content within any part of WeDeploy accessible to other users such as chat rooms or discussion forums to determine compliance with this Acceptable Use Policy. Liferay has the right in its sole discretion to edit, refuse to post or remove any material submitted to or posted on a Liferay website or WeDeploy that Liferay finds to be in violation of this Acceptable Use Policy or is otherwise objectionable. You are solely responsible for Your activities and any Content You post, transmit, or otherwise make available on a Liferay website or WeDeploy. You acknowledge and agree that Liferay does not have any liability for any action or inaction with respect to your Conduct, communication or posting on a Liferay website or WeDeploy. Liferay may report any activity Liferay believes may violate any law to law enforcement, regulators, or other relevant third parties. 5. Trademarks The trademarks, trade names, service marks and logos of Liferay, Liferay‚Äôs Affiliates and third parties used in the Liferay websites and other WeDeploy (\"Trademarks\") are the property of Liferay, Liferay‚Äôs Affiliates or the third parties. You have no right to use any such Trademarks, and nothing contained in WeDeploy or this Policy grants any right to use (by implication, waiver, estoppel or otherwise) any Trademarks without the prior written permission of Liferay, Liferay‚Äôs Affiliate or the respective third party owner. Please see www.liferay.com/trademark. 6. Linking You may encounter links to non-Liferay sites or services while using WeDeploy, which should not be interpreted as endorsement of Liferay of such third party sites or the company, products, services or content to which they link as such sites are not under Liferay control and Liferay is not responsible for the content of any linked site or any link contained in a linked site. If You decide to access any third party site, product or service linked through WeDeploy, you do so at your own risk. 7. Updates Liferay reserves the right to update this Policy from time to time by posting an updated version no later than thirty (30) days prior to the posted effective date of such update. Your continued use and access of WeDeploy after the posted effective date signifies your acceptance to the updated Policy. ","srcFilePath":"src/pages/terms/index.md","id":"terms","url":"/terms/"},"tutorials":{"description":"Tutorials description","title":"Tutorials","tutorialTitle":"Lorem Tutorials Ipsum","url":"/tutorials/hosting/get-started/","hidden":true,"content":" ","srcFilePath":"src/pages/tutorials/index.soy","id":"tutorials","location":"/tutorials/","children":{"auth-android":{"title":"Auth Tutorial on Android","description":"In this section, you'll learn how to authenticate users on an Android app using the WeDeploy API Client.","tutorialTitle":"Getting started with WeDeploy Auth on an Android app","url":"/tutorials/auth-android/get-started/","hidden":true,"content":" ","srcFilePath":"src/pages/tutorials/auth-android/index.soy","id":"auth-android","location":"/tutorials/auth-android/","children":{"add-api-methods":{"title":"Add API Methods","description":"In this section, you'll learn how to authenticate users on an Android app using the WeDeploy API Client.","buttonTitle":"I added the methods","tutorialTitle":"Getting started with WeDeploy Auth on an Android app","parentId":"auth-android","layout":"tutorial","time":90,"weight":6,"content":" Add API Methods Create User First, let's add the code that will allow users to create an account. To do this, go to SignUpActivity.java and paste this code in the \"doSignUp\" method: weDeploy.auth(\"users-.wedeploy.io\") .createUser(email, password, name) .execute(new Callback() { @Override public void onSuccess(Response response) { showAlert(\"Success\", \"Signed up successfully\"); } @Override public void onFailure(Exception e) { Log.e(\"Error\", \"Sign up error\", e); showAlert(\"Error\", \"Sign up error\"); } }); Note: make sure to replace `` with the id of your project. Sign-in Next, let's add the code that will allow users to sign-in. First of all, go to LoginActivity.java, and paste this code in the \"doLogin\" method: weDeploy.auth(\"users-.wedeploy.io\") .signIn(email, password).execute(new Callback() { @Override public void onSuccess(Response response) { showAlert(\"Success\", \"Signed in\"); } @Override public void onFailure(Exception e) { showAlert(\"Error\", \"Login error\"); } }); Note: make sure to replace `` with the id of your project. Pro Tip In the examples above we use the execute(callback) method to handle the response with a callback, which is the most typical way of doing it in the Android ecosystem, but we can also handle the result using a RxJava Single, which is similar to an Observable, but it either emits one value or an error notification: weDeploy.auth(\"users-.wedeploy.io\") .signIn(email, password) .asSingle() .subscribe(new DisposableSingleObserver() { @Override public void onSuccess(Response response) { showAlert(\"Success\", \"Signed in\"); } @Override public void onError(Throwable e) { showAlert(\"Error\", \"Login error\"); } }); ","srcFilePath":"src/pages/tutorials/auth-android/add-api-methods/index.md","id":"add-api-methods","url":"/tutorials/auth-android/add-api-methods/"},"add-config-files":{"title":"Add Config File","description":"In this section, you'll learn how to authenticate users on an Android app using the WeDeploy API Client.","buttonTitle":"I added the config file","tutorialTitle":"Getting started with WeDeploy Auth on an Android app","parentId":"auth-android","layout":"tutorial","time":60,"weight":3,"content":" Add Config Files Every service folder must have a wedeploy.json file that configures it, so let's add a file inside the sample project you just downloaded. Auth Open the tutorial-auth-android folder in a code editor. Create a new file named wedeploy.json inside the auth folder. In that file, paste this code: { \"id\": \"users\", \"image\": \"wedeploy/auth:@site.version.image.auth@\", \"env\": { \"WEDEPLOYAUTHSECURE_FIELDS\": \"password\", \"WEDEPLOYAUTHPASSWORD\": \"true\" } } Pro Tip One of the awesome things you can do in your wedeploy.json file is add environment variables. There are many ways to use these; one example is to provide Google sign-in for your users. { \"id\": \"users\", \"image\": \"wedeploy/auth:@site.version.image.auth@\", \"env\": { \"WEDEPLOYAUTHSECURE_FIELDS\": \"password\", \"WEDEPLOYAUTHPASSWORD\": \"true\", \"WEDEPLOYAUTHGOOGLE\": \"true\", \"WEDEPLOYAUTHGOOGLECLIENTID\": \"\", \"WEDEPLOYAUTHGOOGLECLIENTSECRET\": \"\" } } See the full list of Environment Variables for Auth. ","srcFilePath":"src/pages/tutorials/auth-android/add-config-files/index.md","id":"add-config-files","url":"/tutorials/auth-android/add-config-files/"},"deploy-project":{"title":"Deploy the Project","description":"In this section, you'll learn how to authenticate users on an Android app using the WeDeploy API Client.","buttonTitle":"I deployed the project","tutorialTitle":"Getting started with WeDeploy Auth on an Android app","parentId":"auth-android","layout":"tutorial","time":30,"weight":5,"content":" Deploy Project Now the moment you have been waiting for! Go to tutorial-auth-android in your terminal and deploy your project using the CLI. we deploy -p projectID Note: make sure to replace projectID with the ID that you'd like for your project. ","srcFilePath":"src/pages/tutorials/auth-android/deploy-project/index.md","id":"deploy-project","url":"/tutorials/auth-android/deploy-project/"},"download-sample":{"title":"Download Sample","description":"In this section, you'll learn how to authenticate users on an Android app using the WeDeploy API Client.","buttonTitle":"I downloaded the sample files","tutorialTitle":"Getting started with WeDeploy Auth on an Android app","parentId":"auth-android","layout":"tutorial","time":20,"weight":2,"content":" Download Sample First, you'll download a folder that contains the necessary files and directories for an authentication app. There are basically two ways you can do this. A) Download a ZIP You can download a ZIP file. B) Download using Git Or clone this repository locally. git clone https://github.com/wedeploy/tutorial-auth-android.git ","srcFilePath":"src/pages/tutorials/auth-android/download-sample/index.md","id":"download-sample","url":"/tutorials/auth-android/download-sample/"},"get-started":{"title":"Get Started","description":"In this section, you'll learn how to authenticate users on an Android app using the WeDeploy API Client.","buttonTitle":"I'm ready to start!","tutorialTitle":"Getting started with WeDeploy Auth on an Android app","parentId":"auth-android","layout":"tutorial","time":20,"weight":1,"content":" Get Started Authenticating users with WeDeploy is super easy. This tutorial will walk you through how to deploy an app that can create, sign in, and sign out users. What you'll need The WeDeploy CLI A code editor What you'll do Download a sample project Add configuration files Include the API Client Add the API methods Deploy to production Start authenticating users ","srcFilePath":"src/pages/tutorials/auth-android/get-started/index.md","id":"get-started","url":"/tutorials/auth-android/get-started/"},"include-api-client":{"title":"Include API Client","description":"In this section, you'll learn how to authenticate users on an Android app using the WeDeploy API Client.","buttonTitle":"I included the API Client","tutorialTitle":"Getting started with WeDeploy Auth on an Android app","parentId":"auth-android","layout":"tutorial","time":30,"weight":4,"content":" Include API Client Before we can make any requests to create or sign-in any users, we must connect the WeDeploy Android API Client. To do this, go to tutorial-auth-android/app/tutorial-auth-android/app/build.gradle and include this line inside the dependencies function of this file: compile 'com.wedeploy:com.wedeploy.android:@site.version.api.android@' After doing this, you have to sync the project and then a few seconds later you will see that the project is built correctly. ","srcFilePath":"src/pages/tutorials/auth-android/include-api-client/index.md","id":"include-api-client","url":"/tutorials/auth-android/include-api-client/"},"it-works":{"title":"It Works","description":"In this section, you'll learn how to authenticate users on an Android app using the WeDeploy API Client.","buttonTitle":"It works","tutorialTitle":"Getting started with WeDeploy Auth on an Android app","parentId":"auth-android","layout":"tutorial","time":30,"weight":7,"content":" It Works Deploy Now that your API requests are ready, you can deploy your project again so that the changes are live. we deploy -p projectID See It Live Great work, your app is ready to be used! Now let's start playing with user sign-in. Run the app in the emulator. Click \"Create an account\" and fill in the form. You are logged in! Now try signing out and signing back in. Awesome! You just deployed an app and started authenticating users within a few minutes! We can't wait to see what else you create with WeDeploy! Pro Tip Wanting to make a pretty url for your primary UI service without purchasing a custom domain? Perfect, you can go to the Custom Domain section of your service on the Dashboard and add a custom domain that ends with wedeploy.io (e.g. yourapp.wedeploy.io). ","srcFilePath":"src/pages/tutorials/auth-android/it-works/index.md","id":"it-works","url":"/tutorials/auth-android/it-works/"},"you-made-it":{"title":"You Made It!","description":"In this section, you'll learn how to authenticate users on an Android app using the WeDeploy API Client.","layout":"tutorial","tutorialTitle":"Getting started with WeDeploy Auth on an Android app","parentId":"auth-android","weight":10,"content":" You made it! Now discover what else you can do with WeDeploy. Email on Android Tutorial Data on Android Tutorial ","srcFilePath":"src/pages/tutorials/auth-android/you-made-it/index.md","id":"you-made-it","url":"/tutorials/auth-android/you-made-it/"}},"childIds":["get-started","download-sample","add-config-files","include-api-client","deploy-project","add-api-methods","it-works","you-made-it"]},"auth-web":{"title":"Auth Tutorial On The Web","description":"In this section, you'll learn how to authenticate users on the web using the WeDeploy API Client.","tutorialTitle":"Getting started with WeDeploy Auth on the web","url":"/tutorials/auth-web/get-started/","hidden":true,"content":" ","srcFilePath":"src/pages/tutorials/auth-web/index.soy","id":"auth-web","location":"/tutorials/auth-web/","children":{"add-api-methods":{"title":"Add API Methods","description":"In this section, you'll learn how to authenticate users on the web using the WeDeploy API Client.","buttonTitle":"I added the methods","tutorialTitle":"Getting started with WeDeploy Auth on the web","parentId":"auth-web","layout":"tutorial","time":90,"weight":6,"content":" Add API Methods Create User First, let's add a script that will allow users to create an account. To do this, go back to the ui folder and paste this code between the \"create user method\" comments in the main.js file: var auth = WeDeploy.auth('users-.wedeploy.io'); function submitForm() { auth.createUser({ email: user.email.value, name: user.name.value, password: user.password.value }) .then(function() { alert('Account successfully created!'); signIn(); user.reset(); }) .catch(function() { alert('Sign-up failed. Try another email.'); user.reset(); }); } Note: make sure to replace `` with the id of your project. Sign-in Next, let's add a script that will allow users to sign-in. In the same file as above, paste this code between the \"sign-in method\" comments: function signIn() { auth.signInWithEmailAndPassword(user.email.value, user.password.value) .then(function() { document.location.href = '/welcome.html'; }) .catch(function() { alert('Sign-in failed. Try another email/password.'); }); } Select current user Now, let's add a script that will show the current user's name. In the same file as above, paste this code between the \"current user\" comments: if (auth.currentUser) { document.querySelector('.username').innerHTML = auth.currentUser.name; } ","srcFilePath":"src/pages/tutorials/auth-web/add-api-methods/index.md","id":"add-api-methods","url":"/tutorials/auth-web/add-api-methods/"},"add-config-files":{"title":"Add Config Files","description":"In this section, you'll learn how to authenticate users on the web using the WeDeploy API Client.","buttonTitle":"I added the config files","tutorialTitle":"Getting started with WeDeploy Auth on the web","parentId":"auth-web","layout":"tutorial","time":60,"weight":3,"content":" Add Config Files Every service folder must have a wedeploy.json file that configures it, so let's add two files inside the sample project you just downloaded. Auth Open the tutorial-auth-web folder in a code editor. Create a new file named wedeploy.json inside the auth folder. In that file, paste this code: { \"id\": \"auth\", \"image\": \"wedeploy/auth:@site.version.image.auth@\", \"env\": { \"WEDEPLOYAUTHSECURE_FIELDS\": \"password\", \"WEDEPLOYAUTHPASSWORD\": \"true\" } } Hosting Change to the ui folder and create another wedeploy.json file In that file, paste this code: { \"id\": \"ui\", \"image\": \"wedeploy/hosting:@site.version.image.hosting@\" } Pro Tip One of the awesome things you can do in your wedeploy.json file is add environment variables. There are many ways to use these; one example is to provide Google sign-in for your users. { \"id\": \"users\", \"image\": \"wedeploy/auth:@site.version.image.auth@\", \"env\": { \"WEDEPLOYAUTHSECURE_FIELDS\": \"password\", \"WEDEPLOYAUTHPASSWORD\": \"true\", \"WEDEPLOYAUTHGOOGLE\": \"true\", \"WEDEPLOYAUTHGOOGLECLIENTID\": \"\", \"WEDEPLOYAUTHGOOGLECLIENTSECRET\": \"\" } } See the full list of Environment Variables for Auth. ","srcFilePath":"src/pages/tutorials/auth-web/add-config-files/index.md","id":"add-config-files","url":"/tutorials/auth-web/add-config-files/"},"deploy-project":{"title":"Deploy Project","description":"In this section, you'll learn how to authenticate users on the web using the WeDeploy API Client.","buttonTitle":"I deployed the project","tutorialTitle":"Getting started with WeDeploy Auth on the web","parentId":"auth-web","layout":"tutorial","time":30,"weight":5,"content":" Deploy Project Now the moment you have been waiting for! Go to tutorial-auth-web in your terminal and deploy your project using the CLI. we deploy -p projectID Note: make sure to replace projectID with the ID that you'd like for your project. ","srcFilePath":"src/pages/tutorials/auth-web/deploy-project/index.md","id":"deploy-project","url":"/tutorials/auth-web/deploy-project/"},"download-sample":{"title":"Download Sample","description":"In this section, you'll learn how to authenticate users on the web using the WeDeploy API Client.","buttonTitle":"I downloaded the sample files","tutorialTitle":"Getting started with WeDeploy Auth on the web","parentId":"auth-web","layout":"tutorial","time":20,"weight":2,"content":" Download Sample First, you'll download a folder that contains the necessary files and directories for an authentication app. There are basically two ways you can do this. A) Download a ZIP You can download a ZIP file. B) Download using Git Or clone this repository locally. git clone https://github.com/wedeploy/tutorial-auth-web.git ","srcFilePath":"src/pages/tutorials/auth-web/download-sample/index.md","id":"download-sample","url":"/tutorials/auth-web/download-sample/"},"get-started":{"title":"Get Started","description":"In this section, you'll learn how to authenticate users on the web using the WeDeploy API Client.","buttonTitle":"I'm ready to start!","tutorialTitle":"Getting started with WeDeploy Auth on the web","parentId":"auth-web","layout":"tutorial","time":20,"weight":1,"content":" Get Started Authenticating users with WeDeploy is super easy. This tutorial will walk you through how to deploy an app that can create, sign in, and sign out users. What you'll need The WeDeploy CLI A code editor What you'll do Download a sample project Add configuration files Include the API Client Add the API methods Deploy to production Start authenticating users ","srcFilePath":"src/pages/tutorials/auth-web/get-started/index.md","id":"get-started","url":"/tutorials/auth-web/get-started/"},"include-api-client":{"title":"Include API Client","description":"In this section, you'll learn how to authenticate users on the web using the WeDeploy API Client.","buttonTitle":"I included the API Client","tutorialTitle":"Getting started with WeDeploy Auth on the web","parentId":"auth-web","layout":"tutorial","time":30,"weight":4,"content":" Include API Client Before we can make any requests to create or sign-in any users, we must connect the WeDeploy API Client. To do this, go back to the ui folder and include this script link at the bottom of the `` element of these files: index.html signup.html welcome.html ","srcFilePath":"src/pages/tutorials/auth-web/include-api-client/index.md","id":"include-api-client","url":"/tutorials/auth-web/include-api-client/"},"it-works":{"title":"It Works","description":"In this section, you'll learn how to authenticate users on the web using the WeDeploy API Client.","buttonTitle":"It works","tutorialTitle":"Getting started with WeDeploy Auth on the web","parentId":"auth-web","layout":"tutorial","time":30,"weight":7,"content":" It Works Deploy Now that your API requests are ready, you can deploy your project again so that the changes are live. we deploy -p projectID See It Live Great work, your app is ready to be used! Now let's start playing with user sign-in. Go to ui-.wedeploy.io in your browser. Click \"Create an account\" and fill in the form. You are logged in! Now try signing out and signing back in. Awesome! You just deployed an app and started authenticating users within a few minutes! We can't wait to see what else you create with WeDeploy! Pro Tip Wanting to make a pretty url for your primary UI service without purchasing a custom domain? Perfect, you can go to the Custom Domain section of your service on the Dashboard and add a custom domain that ends with wedeploy.io (e.g. yourapp.wedeploy.io). ","srcFilePath":"src/pages/tutorials/auth-web/it-works/index.md","id":"it-works","url":"/tutorials/auth-web/it-works/"},"you-made-it":{"title":"You Made It!","description":"In this section, you'll learn how to authenticate users on the web using the WeDeploy API Client.","layout":"tutorial","tutorialTitle":"Getting started with WeDeploy Auth on the web","parentId":"auth-web","weight":8,"content":" You made it! Now discover what else you can do with WeDeploy. Hosting Tutorial Email Tutorial Data Tutorial Ruby Tutorial Node.js Tutorial Liferay DXP Tutorial Java Tutorial ","srcFilePath":"src/pages/tutorials/auth-web/you-made-it/index.md","id":"you-made-it","url":"/tutorials/auth-web/you-made-it/"}},"childIds":["get-started","download-sample","add-config-files","include-api-client","deploy-project","add-api-methods","it-works","you-made-it"]},"auth-ios":{"title":"Auth Tutorial on iOS","description":"In this section, you'll learn how to authenticate users on iOS using the WeDeploy Swift API Client.","tutorialTitle":"Getting started with WeDeploy Auth on iOS","url":"/tutorials/auth-ios/get-started/","hidden":true,"content":" ","srcFilePath":"src/pages/tutorials/auth-ios/index.soy","id":"auth-ios","location":"/tutorials/auth-ios/","children":{"add-api-methods":{"title":"Add API Methods","description":"In this section, you'll learn how to authenticate users on an iOS app using the WeDeploy Swift API Client.","buttonTitle":"I added the methods","tutorialTitle":"Getting started with WeDeploy Auth on an iOS app","parentId":"auth-ios","layout":"tutorial","time":90,"weight":6,"content":" Add API Methods Create User First, let's add the code that will allow users to create an account. To do this, go to tutorial-auth-ios/app/tutorial-auth-ios/SignUpViewController.swift and paste this code in the \"signUpButtonClick\" function: WeDeploy.auth(\"users-.wedeploy.io\") .createUser(email: emailText, password: passwordText, name: nameText) .toCallback { auth, error in if let _ = auth { self.showAlert(with: \"Success\", message: \"Sign-up successfully\") } else { self.showAlert(with: \"Error\", message: \"Sign-up failed.\") } } Note: make sure to replace `` with the id of your project. Sign-in Next, let's add the code that will allow users to sign-in. First of all, go to tutorial-auth-ios/app/tutorial-auth-ios/LoginViewController.swift, and paste this code in the \"loginButtonClick\" function: WeDeploy.auth(\"users-.wedeploy.io\") .signInWith(username: usernameText, password: passwordText) .toCallback { auth, error in self.handleLoginResult(auth: auth, error: error) } Note: make sure to replace `` with the id of your project. Pro Tip In the examples above we use the toCallback method to handle the response with a callback, which is the most typical way of doing it in the iOS ecosystem, but we can also handle the result using a promise: WeDeploy.auth(\"users-.wedeploy.io\") .signInWith(username: usernameText, password: passwordText) .then { auth in self.handleLoginResult(auth: auth, error: nil) } .catch { error in self.handleLoginResult(auth: nil, error: error) } or even a observable! WeDeploy.auth(\"users-.wedeploy.io\") .signInWith(username: usernameText, password: passwordText) .toObservable() .subscribe(onNext: { auth in self.handleLoginResult(auth: auth, error: nil) }, onError: { error in self.handleLoginResult(auth: nil, error: error) }) ","srcFilePath":"src/pages/tutorials/auth-ios/add-api-methods/index.md","id":"add-api-methods","url":"/tutorials/auth-ios/add-api-methods/"},"add-config-files":{"title":"Add Config File","description":"In this section, you'll learn how to authenticate users on an iOS app using the WeDeploy Swift API Client.","buttonTitle":"I added the config file","tutorialTitle":"Getting started with WeDeploy Auth on an iOS app","parentId":"auth-ios","layout":"tutorial","time":60,"weight":3,"content":" Add Config Files Every service folder must have a wedeploy.json file that configures it, so let's add a file inside the sample project you just downloaded. Auth Open the tutorial-auth-ios folder in a code editor. Create a new file named wedeploy.json inside the auth folder. In that file, paste this code: { \"id\": \"users\", \"image\": \"wedeploy/auth:@site.version.image.auth@\", \"env\": { \"WEDEPLOYAUTHSECURE_FIELDS\": \"password\", \"WEDEPLOYAUTHPASSWORD\": \"true\" } } Pro Tip One of the awesome things you can do in your wedeploy.json file is add environment variables. There are many ways to use these; one example is to provide Google sign-in for your users. { \"id\": \"users\", \"image\": \"wedeploy/auth:@site.version.image.auth@\", \"env\": { \"WEDEPLOYAUTHSECURE_FIELDS\": \"password\", \"WEDEPLOYAUTHPASSWORD\": \"true\", \"WEDEPLOYAUTHGOOGLE\": \"true\", \"WEDEPLOYAUTHGOOGLECLIENTID\": \"\", \"WEDEPLOYAUTHGOOGLECLIENTSECRET\": \"\" } } See the full list of Environment Variables for Auth. ","srcFilePath":"src/pages/tutorials/auth-ios/add-config-files/index.md","id":"add-config-files","url":"/tutorials/auth-ios/add-config-files/"},"deploy-project":{"title":"Deploy the Project","description":"In this section, you'll learn how to authenticate users on an iOS app using the WeDeploy Swift API Client.","buttonTitle":"I deployed the project","tutorialTitle":"Getting started with WeDeploy Auth on an iOS app","parentId":"auth-ios","layout":"tutorial","time":30,"weight":5,"content":" Deploy the Project Deploy Project Now the moment you have been waiting for! Go to tutorial-auth-ios in your terminal and deploy your project using the CLI. we deploy -p projectID Note: make sure to replace projectID with the ID that you'd like for your project. ","srcFilePath":"src/pages/tutorials/auth-ios/deploy-project/index.md","id":"deploy-project","url":"/tutorials/auth-ios/deploy-project/"},"download-sample":{"title":"Download Sample","description":"In this section, you'll learn how to authenticate users on an iOS app using the WeDeploy Swift API Client.","buttonTitle":"I downloaded the sample files","tutorialTitle":"Getting started with WeDeploy Auth on an iOS app","parentId":"auth-ios","layout":"tutorial","time":20,"weight":2,"content":" Download Sample First, you'll download a folder that contains the necessary files and directories for an authentication app. There are basically two ways you can do this. A) Download a ZIP You can download a ZIP file. B) Download using Git Or clone this repository locally. git clone https://github.com/wedeploy/tutorial-auth-ios.git ","srcFilePath":"src/pages/tutorials/auth-ios/download-sample/index.md","id":"download-sample","url":"/tutorials/auth-ios/download-sample/"},"get-started":{"title":"Get Started","description":"In this section, you'll learn how to authenticate users on an iOS app using the WeDeploy Swift API Client.","buttonTitle":"I'm ready to start!","tutorialTitle":"Getting started with WeDeploy Auth on an iOS app","parentId":"auth-ios","layout":"tutorial","time":20,"weight":1,"content":" Get Started Authenticating users with WeDeploy is super easy. This tutorial will walk you through how to deploy an app that can create, sign in, and sign out users. What you'll need The WeDeploy CLI A code editor What you'll do Download a sample project Add configuration files Include the API Client Add the API methods Deploy to production Start authenticating users ","srcFilePath":"src/pages/tutorials/auth-ios/get-started/index.md","id":"get-started","url":"/tutorials/auth-ios/get-started/"},"include-api-client":{"title":"Include API Client","description":"In this section, you'll learn how to authenticate users on an iOS app using the WeDeploy Swift API Client.","buttonTitle":"I included the API Client","tutorialTitle":"Getting started with WeDeploy Auth on an iOS app","parentId":"auth-ios","layout":"tutorial","time":30,"weight":4,"content":" Include API Client Before we can make any requests to create or sign-in any users, we must connect the WeDeploy Swift API Client. To do this, go to tutorial-auth-ios/app/Podfile and include this line inside the target function of this file: pod 'WeDeploy' After doing this, you have to install the dependencies on the project, to do that open a terminal in that folder and execute the next command: pod install You will see all the dependencies being installed. ","srcFilePath":"src/pages/tutorials/auth-ios/include-api-client/index.md","id":"include-api-client","url":"/tutorials/auth-ios/include-api-client/"},"it-works":{"title":"It Works","description":"In this section, you'll learn how to authenticate users on an iOS app using the WeDeploy Swift API Client.","buttonTitle":"It works","tutorialTitle":"Getting started with WeDeploy Auth on an iOS app","parentId":"auth-ios","layout":"tutorial","time":30,"weight":7,"content":" It Works Deploy Now that your API requests are ready, you can deploy your project again so that the changes are live. we deploy -p projectID See It Live Great work, your app is ready to be used! Now let's start playing with user sign-in. Run the app in the emulator. Click \"Create an account\" and fill in the form. You are logged in! Now try signing out and signing back in. Awesome! You just deployed an app and started authenticating users within a few minutes! We can't wait to see what else you create with WeDeploy! Pro Tip Wanting to make a pretty url for your primary UI service without purchasing a custom domain? Perfect, you can go to the Custom Domain section of your service on the Dashboard and add a custom domain that ends with wedeploy.io (e.g. yourapp.wedeploy.io). ","srcFilePath":"src/pages/tutorials/auth-ios/it-works/index.md","id":"it-works","url":"/tutorials/auth-ios/it-works/"},"you-made-it":{"title":"You Made It!","description":"In this section, you'll learn how to authenticate users on an iOS app using the WeDeploy Swift API Client.","layout":"tutorial","tutorialTitle":"Getting started with WeDeploy Auth on an iOS app","parentId":"auth-ios","weight":10,"content":" You made it! Now discover what else you can do with WeDeploy. Email on iOS Tutorial Data on iOS Tutorial ","srcFilePath":"src/pages/tutorials/auth-ios/you-made-it/index.md","id":"you-made-it","url":"/tutorials/auth-ios/you-made-it/"}},"childIds":["get-started","download-sample","add-config-files","include-api-client","deploy-project","add-api-methods","it-works","you-made-it"]},"data-android":{"title":"Data Tutorial on Android","description":"In this section, you'll learn how to save and get data on Android using the WeDeploy API Client.","tutorialTitle":"Getting started with WeDeploy Data on Android","url":"/tutorials/data-android/get-started/","hidden":true,"content":" ","srcFilePath":"src/pages/tutorials/data-android/index.soy","id":"data-android","location":"/tutorials/data-android/","children":{"add-api-methods":{"title":"Add API Methods","description":"In this section, you'll learn how to save and get data on Android using the WeDeploy API Client.","buttonTitle":"I added the methods","tutorialTitle":"Getting started with WeDeploy Data on Android","parentId":"data-android","layout":"tutorial","time":90,"weight":6,"content":" Add API Methods Save Data Now we want to add some code that will save data to a collection. To do this, go to AddToDoActivity.java and paste this code into the \"addToDo\" method: weDeploy.data(\"db-.wedeploy.io\") .create(\"tasks\", jsonObject) .execute(new Callback() { @Override public void onSuccess(Response response) { Toast.makeText(AddToDoActivity.this, \"To do added\", Toast.LENGTH_SHORT).show(); } @Override public void onFailure(Exception e) { Toast.makeText(AddToDoActivity.this, \"Error adding to do\", Toast.LENGTH_SHORT) .show(); } }); Note: make sure to replace `` with the id of your project. Fetch Data Next, we want to add the code that will fetch data from the collection. To do this, go to ToDoListActivity.java and paste this code into the \"populateList\" method: weDeploy.data(\"db-.wedeploy.io\") .limit(5) .orderBy(\"id\", SortOrder.DESCENDING) .get(\"tasks\") .execute(new Callback() { @Override public void onSuccess(Response response) { try { JSONArray array = new JSONArray(response.getBody()); parseAndAddTodos(array); } catch (JSONException e) { onFailure(e); } } @Override public void onFailure(Exception e) { Toast.makeText(ToDoListActivity.this, \"Error loading todos\", Toast.LENGTH_SHORT).show(); } }); Note: make sure to replace `` with the id of your project. Pro Tip In this tutorial we teach you how to use the .get() method which fetches the data from your collection everytime you refresh the page or make a new request. We also have a .watch() task which retrieves new data automatically when new data is created, giving you the power of real-time data! Want to learn more about Real-Time Feeds? ","srcFilePath":"src/pages/tutorials/data-android/add-api-methods/index.md","id":"add-api-methods","url":"/tutorials/data-android/add-api-methods/"},"add-config-files":{"title":"Add Config Files","description":"In this section, you'll learn how to save and get data on Android using the WeDeploy API Client.","buttonTitle":"I added the config files","tutorialTitle":"Getting started with WeDeploy Data on Android","parentId":"data-android","layout":"tutorial","time":60,"weight":3,"content":" Add Config Files wedeploy.json Every service folder must have a wedeploy.json file that configures it, so let's add a file inside the sample project you just downloaded. Open the tutorial-data-android folder in a code editor. Create a new file inside of the data folder and name it wedeploy.json. Inside of that file, paste this code. { \"id\": \"db\", \"image\": \"wedeploy/data:@site.version.image.data@\" } api.json Along with the wedeploy.json, each Data service must have an api.json file to configure your database (eg. set paths, allow certain methods, require authentication). Go back to tutorial-data-android in your code editor. Create another file inside of the data folder and name it api.json. Inside of that file, paste this code. [ { \"path\": \"/tasks/*\", \"data\": true } ] Pro Tip Another thing you can do with your api.json file is add other parameters for the collections in your database. One example is to set certain REST methods for each category like this: [ { \"path\": \"/movies/*\", \"data\": true, \"method\": [\"GET\", \"PATCH\", \"PUT\", \"DELETE\"] }, { \"path\": \"/shows/*\", \"data\": true, \"method\": \"POST\" } ] See the full list of possible data configurations. ","srcFilePath":"src/pages/tutorials/data-android/add-config-files/index.md","id":"add-config-files","url":"/tutorials/data-android/add-config-files/"},"deploy-project":{"title":"Deploy the Project","description":"In this section, you'll learn how to save and get data on Android using the WeDeploy API Client.","buttonTitle":"I deployed the project","tutorialTitle":"Getting started with WeDeploy Data on Android","parentId":"data-android","layout":"tutorial","time":30,"weight":5,"content":" Deploy Project Now the moment you have been waiting for! Go to tutorial-data-android in your terminal and deploy your project using the CLI. we deploy -p projectID Note: make sure to replace projectID with the ID that you'd like for your project. ","srcFilePath":"src/pages/tutorials/data-android/deploy-project/index.md","id":"deploy-project","url":"/tutorials/data-android/deploy-project/"},"download-sample":{"title":"Download Sample","description":"In this section, you'll learn how to save and get data on Android using the WeDeploy API Client.","buttonTitle":"I downloaded the sample files","tutorialTitle":"Getting started with WeDeploy Data on Android","parentId":"data-android","layout":"tutorial","time":20,"weight":2,"content":" Download Sample First, you'll download a folder that contains the necessary files and directories for a data app. There are basically two ways you can do this. A) Download a ZIP You can download a ZIP file. B) Download using Git Or clone this repository locally. git clone https://github.com/wedeploy/tutorial-data-android.git ","srcFilePath":"src/pages/tutorials/data-android/download-sample/index.md","id":"download-sample","url":"/tutorials/data-android/download-sample/"},"include-api-client":{"title":"Include API Client","description":"In this section, you'll learn how to save and get data on Android using the WeDeploy API Client.","buttonTitle":"I included the API Client","tutorialTitle":"Getting started with WeDeploy Data on Android","parentId":"data-android","layout":"tutorial","time":30,"weight":4,"content":" Include API Client Before we can make any requests to save or fetch data, we must connect the WeDeploy API Client. To do this, go to tutorial-data-android/app/tutorial-data-android/app/build.gradle and include this line inside the dependencies function of this file: compile 'com.wedeploy:com.wedeploy.android:@site.version.api.android@' After doing this, you have to sync the project, after a seconds you will see that the project is built correctly. ","srcFilePath":"src/pages/tutorials/data-android/include-api-client/index.md","id":"include-api-client","url":"/tutorials/data-android/include-api-client/"},"get-started":{"title":"Get Started","description":"In this section, you'll learn how to save and get data on Android using the WeDeploy API Client.","buttonTitle":"I'm ready to start!","tutorialTitle":"Getting started with WeDeploy Data on Android","parentId":"data-android","layout":"tutorial","time":20,"weight":1,"content":" Get Started Utilizing data with WeDeploy is super easy. This tutorial will walk you through how to deploy an app that can save and fetch data in real-time. What you'll need The WeDeploy CLI Android Studio A code editor What you'll do Download a sample project Add configuration files Include the API Client Add the API methods Deploy to production Start saving and fetching data ","srcFilePath":"src/pages/tutorials/data-android/get-started/index.md","id":"get-started","url":"/tutorials/data-android/get-started/"},"it-works":{"title":"It Works","description":"In this section, you'll learn how to save and get data on Android using the WeDeploy API Client.","buttonTitle":"It works","tutorialTitle":"Getting started with WeDeploy Data on Android","parentId":"data-android","layout":"tutorial","time":30,"weight":7,"content":" It Works Deploy Now that your API requests are ready, you can deploy your project again so that the changes are live. we deploy -p projectID See It Live Great work, your app is now live! Now let's start playing with some data. Run the app in the emulator. Type an item into the input and click Add Item. Click Go to item listing and see how your data is already populated. Awesome! You just created an app and saved data within a few minutes! We can't wait to see what else you create with WeDeploy! Pro Tip Wanting to make a pretty url for your primary UI service without purchasing a custom domain? Perfect, you can go to the Custom Domain section of your service on the Dashboard and add a custom domain that ends with wedeploy.io (e.g. yourapp.wedeploy.io). ","srcFilePath":"src/pages/tutorials/data-android/it-works/index.md","id":"it-works","url":"/tutorials/data-android/it-works/"},"you-made-it":{"title":"You Made It!","description":"In this section, you'll learn how to save and get data on Android using the WeDeploy API Client.","layout":"tutorial","tutorialTitle":"Getting started with WeDeploy Data on Android","parentId":"data-android","weight":10,"content":" You made it! Now discover what else you can do with WeDeploy. Auth on Android Tutorial Email on Android Tutorial ","srcFilePath":"src/pages/tutorials/data-android/you-made-it/index.md","id":"you-made-it","url":"/tutorials/data-android/you-made-it/"}},"childIds":["get-started","download-sample","add-config-files","include-api-client","deploy-project","add-api-methods","it-works","you-made-it"]},"data-ios":{"title":"Data Tutorial on iOS","description":"In this section, you'll learn how to save and get data on iOS using the WeDeploy Swift API Client.","tutorialTitle":"Getting started with WeDeploy Data on iOS","url":"/tutorials/data-ios/get-started/","hidden":true,"content":" ","srcFilePath":"src/pages/tutorials/data-ios/index.soy","id":"data-ios","location":"/tutorials/data-ios/","children":{"add-api-methods":{"title":"Add API Methods","description":"In this section, you'll learn how to save and get data on iOS using the WeDeploy Swift API Client.","buttonTitle":"I added the methods","tutorialTitle":"Getting started with WeDeploy Data on iOS","parentId":"data-ios","layout":"tutorial","time":90,"weight":6,"content":" Add API Methods Save Data Now we want to add some code that will save data to a collection. To do this, go to tutorial-data-ios/app/tutorial-data-ios/ToDoListViewController.swift and paste this code into the \"loadToDos\" function: WeDeploy.data(\"db-.wedeploy.io\") .create(resource: \"tasks\", object: [\"name\" : todo]) .toCallback { objectCreated, error in if let objectCreated = objectCreated { print(\"To do added: \\(objectCreated)\") self.toDoTextField.text = \"\" } else { print(\"Error: \\(error!)\") } } Note: make sure to replace `` with the id of your project. Fetch Data Next, we want to add the code that will fetch data from the collection. To do this, go to tutorial-data-ios/app/tutorial-data-ios/AddToDoViewController.swift and paste this cod into the \"addToDoClic\" function: WeDeploy.data(\"db-.wedeploy.io\") .orderBy(field: \"id\", order: .DESC) .limit(5) .get(resourcePath: \"tasks\") .toCallback { tasks, error in if let tasks = tasks { self.todos = tasks.map({ $0[\"name\"] as! String}) self.tableView.reloadData() } else { print(\"Error: \\(error!)\") } } Note: make sure to replace `` with the id of your project. Pro Tip In this tutorial we teach you how to use the .get() method which fetches the data from your collection everytime you refresh the page or make a new request. We also have a .watch() task which retrieves new data automatically when new data is created, giving you the power of real-time data! Want to learn more about Real-Time Feeds? ","srcFilePath":"src/pages/tutorials/data-ios/add-api-methods/index.md","id":"add-api-methods","url":"/tutorials/data-ios/add-api-methods/"},"add-config-files":{"title":"Add Config Files","description":"In this section, you'll learn how to save and get data on iOS using the WeDeploy Swift API Client.","buttonTitle":"I added the config files","tutorialTitle":"Getting started with WeDeploy Data on iOS","parentId":"data-ios","layout":"tutorial","time":60,"weight":3,"content":" Add Config Files wedeploy.json Every service folder must have a wedeploy.json file that configures it, so let's add a file inside the sample project you just downloaded. Open the tutorial-data-ios folder in a code editor. Create a new file inside of the data folder and name it wedeploy.json. Inside of that file, paste this code. { \"id\": \"db\", \"image\": \"wedeploy/data:@site.version.image.data@\" } api.json Along with the wedeploy.json, each Data service must have an api.json file to configure your database (eg. set paths, allow certain methods, require authentication). Go back to tutorial-data-ios in your code editor. Create another file inside of the data folder and name it api.json. Inside of that file, paste this code. [ { \"path\": \"/tasks/*\", \"data\": true } ] Pro Tip Another thing you can do with your api.json file is add other parameters for the collections in your database. One example is to set certain REST methods for each category like this: [ { \"path\": \"/movies/*\", \"data\": true, \"method\": [\"GET\", \"PATCH\", \"PUT\", \"DELETE\"] }, { \"path\": \"/shows/*\", \"data\": true, \"method\": \"POST\" } ] See the full list of possible data configurations. ","srcFilePath":"src/pages/tutorials/data-ios/add-config-files/index.md","id":"add-config-files","url":"/tutorials/data-ios/add-config-files/"},"deploy-project":{"title":"Deploy the Project","description":"In this section, you'll learn how to save and get data on iOS using the WeDeploy Swift API Client.","buttonTitle":"I deployed the project","tutorialTitle":"Getting started with WeDeploy Data on iOS","parentId":"data-ios","layout":"tutorial","time":30,"weight":5,"content":" Deploy Project Now the moment you have been waiting for! Go to tutorial-data-ios in your terminal and deploy your project using the CLI. we deploy -p projectID Note: make sure to replace projectID with the ID that you'd like for your project. ","srcFilePath":"src/pages/tutorials/data-ios/deploy-project/index.md","id":"deploy-project","url":"/tutorials/data-ios/deploy-project/"},"download-sample":{"title":"Download Sample","description":"In this section, you'll learn how to save and get data on iOS using the WeDeploy Swift API Client.","buttonTitle":"I downloaded the sample files","tutorialTitle":"Getting started with WeDeploy Data on iOS","parentId":"data-ios","layout":"tutorial","time":20,"weight":2,"content":" Download Sample First, you'll download a folder that contains the necessary files and directories for a data app. There are basically two ways you can do this. A) Download a ZIP You can download a ZIP file. B) Download using Git Or clone this repository locally. git clone https://github.com/wedeploy/tutorial-data-ios.git ","srcFilePath":"src/pages/tutorials/data-ios/download-sample/index.md","id":"download-sample","url":"/tutorials/data-ios/download-sample/"},"get-started":{"title":"Get Started","description":"In this section, you'll learn how to save and get data on iOS using the WeDeploy Swift API Client.","buttonTitle":"I'm ready to start!","tutorialTitle":"Getting started with WeDeploy Data on iOS","parentId":"data-ios","layout":"tutorial","time":20,"weight":1,"content":" Get Started Utilizing data with WeDeploy is super easy. This tutorial will walk you through how to deploy an app that can save and fetch data in real-time. What you'll need The WeDeploy CLI Xcode Cocoapods A code editor What you'll do Download a sample project Add configuration files Include the API Client Add the API methods Deploy to production Start saving and fetching data ","srcFilePath":"src/pages/tutorials/data-ios/get-started/index.md","id":"get-started","url":"/tutorials/data-ios/get-started/"},"include-api-client":{"title":"Include API Client","description":"In this section, you'll learn how to save and get data on iOS using the WeDeploy Swift API Client.","buttonTitle":"I included the API Client","tutorialTitle":"Getting started with WeDeploy Data on iOS","parentId":"data-ios","layout":"tutorial","time":30,"weight":4,"content":" Include API Client Before we can make any requests to save or fetch data, we must connect the WeDeploy API Client. To do this, go to tutorial-data-ios/app/Podfile and include this line inside the target function of this file: pod 'WeDeploy' After doing this, you have to install the dependencies on the project, to do that open a terminal in that folder and execute the next command: pod install You will see all the dependencies being installed. ","srcFilePath":"src/pages/tutorials/data-ios/include-api-client/index.md","id":"include-api-client","url":"/tutorials/data-ios/include-api-client/"},"it-works":{"title":"It Works","description":"In this section, you'll learn how to save and get data on iOS using the WeDeploy Swift API Client.","buttonTitle":"It works","tutorialTitle":"Getting started with WeDeploy Data on iOS","parentId":"data-ios","layout":"tutorial","time":30,"weight":7,"content":" It Works Deploy Now that your API requests are ready, you can deploy your project again so that the changes are live. we deploy -p projectID See It Live Great work, your app is now live! Now let's start playing with some data. Run the app in the emulator. Type an item into the input and click Add Item. Click Go to item listing and see how your data is already populated. Awesome! You just created an app and saved data within a few minutes! We can't wait to see what else you create with WeDeploy! Pro Tip Wanting to make a pretty url for your primary UI service without purchasing a custom domain? Perfect, you can go to the Custom Domain section of your service on the Dashboard and add a custom domain that ends with wedeploy.io (e.g. yourapp.wedeploy.io). ","srcFilePath":"src/pages/tutorials/data-ios/it-works/index.md","id":"it-works","url":"/tutorials/data-ios/it-works/"},"you-made-it":{"title":"You Made It!","description":"In this section, you'll learn how to save and get data on iOS using the WeDeploy Swift API Client.","layout":"tutorial","tutorialTitle":"Getting started with WeDeploy Data on the web","parentId":"data-ios","weight":10,"content":" You made it! Now discover what else you can do with WeDeploy. Auth on iOS Tutorial Email on iOS Tutorial ","srcFilePath":"src/pages/tutorials/data-ios/you-made-it/index.md","id":"you-made-it","url":"/tutorials/data-ios/you-made-it/"}},"childIds":["get-started","download-sample","add-config-files","include-api-client","deploy-project","add-api-methods","it-works","you-made-it"]},"data-web":{"title":"Data Tutorial On The Web","description":"In this section, you'll learn how to save and get data on the web using the WeDeploy API Client.","tutorialTitle":"Getting started with WeDeploy Data on the web","url":"/tutorials/data-web/get-started/","hidden":true,"content":" ","srcFilePath":"src/pages/tutorials/data-web/index.soy","id":"data-web","location":"/tutorials/data-web/","children":{"add-api-methods":{"title":"Add API Methods","description":"In this section, you'll learn how to save and get data on the web using the WeDeploy API Client.","buttonTitle":"I added the API methods","tutorialTitle":"Getting started with WeDeploy Data on the web","parentId":"data-web","layout":"tutorial","time":90,"weight":6,"content":" Add API Methods Save Data Now we want to add a script that will save data to a collection. To do this, go to tutorial-data-web/ui/index.js and paste this code: WeDeploy .data('db-.wedeploy.io') .create('tasks', {name: form.item.value }) .then(function(response) { form.reset(); form.item.focus(); console.info('Saved:', response); }) .catch(function(error) { console.error(error); }); Note: make sure to replace `` with the id of your project. Fetch Data Next, we want to add a script that will fetch data from the collection. To do this, go to list.js inside of the same folder and paste this code: WeDeploy .data('db-.wedeploy.io') .orderBy('id', 'desc') .limit(5) .get('tasks') .then(function(response) { appendTasks(response); }) .catch(function(error) { console.error(error); }); Note: make sure to replace `` with the id of your project. Pro Tip In this tutorial we teach you how to use the .get() method which fetches the data from your collection everytime you refresh the page or make a new request. We also have a .watch() task which retrieves new data automatically when new data is created, giving you the power of real-time data! Want to learn more about Real-Time Feeds? ","srcFilePath":"src/pages/tutorials/data-web/add-api-methods/index.md","id":"add-api-methods","url":"/tutorials/data-web/add-api-methods/"},"add-config-files":{"title":"Add Config Files","description":"In this section, you'll learn how to save and get data on the web using the WeDeploy API Client.","buttonTitle":"I added the config files","tutorialTitle":"Getting started with WeDeploy Data on the web","parentId":"data-web","layout":"tutorial","time":60,"weight":3,"content":" Add Config Files wedeploy.json Every service folder must have a wedeploy.json file that configures it, so let's add two files inside the sample project you just downloaded. Open the tutorial-data-web folder in a code editor. Create a new file inside of the data folder and name it wedeploy.json. Inside of that file, paste this code. { \"id\": \"db\", \"image\": \"wedeploy/data:@site.version.image.data@\" } Now create a new file inside of the ui folder and name it wedeploy.json. Inside of that file, paste this code. { \"id\": \"ui\", \"image\": \"wedeploy/hosting:@site.version.image.hosting@\" } api.json Along with the wedeploy.json, each Data service must have an api.json file to configure your database (eg. set paths, allow certain methods, require authentication). Go back to tutorial-data-web in your code editor. Create another file inside of the data folder and name it api.json. Inside of that file, paste this code. [ { \"path\": \"/tasks/*\", \"data\": true } ] Pro Tip Another thing you can do with your api.json file is add other parameters for the collections in your database. One example is to set certain REST methods for each category like this: [ { \"path\": \"/movies/*\", \"data\": true, \"method\": [\"GET\", \"PATCH\", \"PUT\", \"DELETE\"] }, { \"path\": \"/shows/*\", \"data\": true, \"method\": \"POST\" } ] See the full list of possible data configurations. ","srcFilePath":"src/pages/tutorials/data-web/add-config-files/index.md","id":"add-config-files","url":"/tutorials/data-web/add-config-files/"},"deploy-project":{"title":"Deploy the Project","description":"In this section, you'll learn how to save and get data on the web using the WeDeploy API Client.","buttonTitle":"I deployed the project","tutorialTitle":"Getting started with WeDeploy Data on the web","parentId":"data-web","layout":"tutorial","time":30,"weight":5,"content":" Deploy Project Now the moment you have been waiting for! Go to tutorial-data-web in your terminal and deploy your project using the CLI. we deploy -p projectID Note: make sure to replace projectID with the ID that you'd like for your project. ","srcFilePath":"src/pages/tutorials/data-web/deploy-project/index.md","id":"deploy-project","url":"/tutorials/data-web/deploy-project/"},"download-sample":{"title":"Download Sample","description":"In this section, you'll learn how to save and get data on the web using the WeDeploy API Client.","buttonTitle":"I downloaded the sample files","tutorialTitle":"Getting started with WeDeploy Data on the web","parentId":"data-web","layout":"tutorial","time":20,"weight":2,"content":" Download Sample First, you'll download a folder that contains the necessary files and directories for a data app. There are basically two ways you can do this. A) Download a ZIP You can download a ZIP file. B) Download using Git Or clone this repository locally. git clone https://github.com/wedeploy/tutorial-data-web.git ","srcFilePath":"src/pages/tutorials/data-web/download-sample/index.md","id":"download-sample","url":"/tutorials/data-web/download-sample/"},"get-started":{"title":"Get Started","description":"In this section, you'll learn how to save and get data on the web using the WeDeploy API Client.","buttonTitle":"I'm ready to start!","tutorialTitle":"Getting started with WeDeploy Data on the web","parentId":"data-web","layout":"tutorial","time":20,"weight":1,"content":" Get Started Utilizing data with WeDeploy is super easy. This tutorial will walk you through how to deploy an app that can save and fetch data in real-time. What you'll need The WeDeploy CLI A code editor What you'll do Download a sample project Add configuration files Include the API Client Add the API methods Deploy to production Start saving and fetching data ","srcFilePath":"src/pages/tutorials/data-web/get-started/index.md","id":"get-started","url":"/tutorials/data-web/get-started/"},"include-api-client":{"title":"Include API Client","description":"In this section, you'll learn how to save and get data on the web using the WeDeploy API Client.","buttonTitle":"I included the API Client","tutorialTitle":"Getting started with WeDeploy Data on the web","parentId":"data-web","layout":"tutorial","time":30,"weight":4,"content":" Include API Client Before we can make any requests to save or fetch data, we must connect the WeDeploy API Client. To do this, go back to the ui folder and include this script link at the bottom of the `` element of these files: index.html list.html ","srcFilePath":"src/pages/tutorials/data-web/include-api-client/index.md","id":"include-api-client","url":"/tutorials/data-web/include-api-client/"},"it-works":{"title":"It Works","description":"In this section, you'll learn how to save and get data on the web using the WeDeploy API Client.","buttonTitle":"It works","tutorialTitle":"Getting started with WeDeploy Data on the web","parentId":"data-web","layout":"tutorial","time":30,"weight":7,"content":" It Works Deploy Now that your API requests are ready, you can deploy your project again so that the changes are live. we deploy -p projectID See It Live Great work, your app is now live! Now let's start playing with some data. Go to ui-.wedeploy.io in your browser. Type an item into the input and click Add Item. Click Go to item listing and see how your data is already populated. Awesome! You just created an app and saved data within a few minutes! We can't wait to see what else you create with WeDeploy! Pro Tip Wanting to make a pretty url for your primary UI service without purchasing a custom domain? Perfect, you can go to the Custom Domain section of your service on the Dashboard and add a custom domain that ends with wedeploy.io (e.g. yourapp.wedeploy.io). ","srcFilePath":"src/pages/tutorials/data-web/it-works/index.md","id":"it-works","url":"/tutorials/data-web/it-works/"},"you-made-it":{"title":"You Made It!","description":"In this section, you'll learn how to save and get data on the web using the WeDeploy API Client.","layout":"tutorial","tutorialTitle":"Getting started with WeDeploy Data on the web","parentId":"data-web","weight":8,"content":" You made it! Now discover what else you can do with WeDeploy. Hosting Tutorial Email Tutorial Auth Tutorial Ruby Tutorial Node.js Tutorial Liferay DXP Tutorial Java Tutorial ","srcFilePath":"src/pages/tutorials/data-web/you-made-it/index.md","id":"you-made-it","url":"/tutorials/data-web/you-made-it/"}},"childIds":["get-started","download-sample","add-config-files","include-api-client","deploy-project","add-api-methods","it-works","you-made-it"]},"docker":{"title":"Docker Tutorial","description":"In this section, you'll learn how to deploy an application using Docker.","tutorialTitle":"Getting started with Docker","url":"/tutorials/docker/get-started/","hidden":true,"content":" ","srcFilePath":"src/pages/tutorials/docker/index.soy","id":"docker","location":"/tutorials/docker/","children":{"add-config-files":{"title":"Add Config Files","description":"In this section, you'll learn how to deploy an application using Docker.","buttonTitle":"I added the config files","tutorialTitle":"Getting started with Docker","parentId":"docker","layout":"tutorial","time":40,"weight":3,"content":" Add Config Files Every service folder must have a wedeploy.json file that configures it, so let's add two files inside the sample project you just downloaded. MySQL Open the tutorial-docker folder in a code editor. Create a new file named wedeploy.json inside the db folder. In that file, paste this code: { \"id\": \"db\", \"volume\": \"/var/lib/mysql\", \"env\": { \"MYSQLROOTPASSWORD\": \"passw0rd\" } } Wordpress Change to the wp folder and create another wedeploy.json file In that file, paste this code: { \"id\": \"wp\", \"env\": { \"WORDPRESSDBHOST\": \"db\", \"WORDPRESSDBUSER\": \"root\", \"WORDPRESSDBPASSWORD\": \"passw0rd\" } } Pro Tip One of the awesome things you can do in your wedeploy.json file is add environment variables. There are many ways to use these; one example is create a new user and password for your MySQL database. { \"id\": \"db\", \"env\": { \"MYSQL_USER\": \"admin\", \"MYSQL_PASSWORD\": \"mypassword123\" } } See the full list of environment variables for MySQL and Wordpress. ","srcFilePath":"src/pages/tutorials/docker/add-config-files/index.md","id":"add-config-files","url":"/tutorials/docker/add-config-files/"},"deploy-project":{"title":"Deploy Project","description":"In this section, you'll learn how to deploy an application using Docker.","buttonTitle":"I deployed the project","tutorialTitle":"Getting started with Docker","parentId":"docker","layout":"tutorial","time":30,"weight":4,"content":" Deploy Project Now the moment you have been waiting for! Go to tutorial-docker in your terminal and deploy your project using the CLI. we deploy -p projectID Note: make sure to replace projectID with the ID that you'd like for your project. ","srcFilePath":"src/pages/tutorials/docker/deploy-project/index.md","id":"deploy-project","url":"/tutorials/docker/deploy-project/"},"download-sample":{"title":"Download Sample","description":"In this section, you'll learn how to deploy an application using Docker.","buttonTitle":"I downloaded the sample files","tutorialTitle":"Getting started with Docker","parentId":"docker","layout":"tutorial","time":20,"weight":2,"content":" Download Sample First, you'll download a folder that contains the necessary files and directories for deploying containers with Docker. There are basically two ways you can do this. A) Download a ZIP You can download a ZIP file. B) Download using Git Or clone this repository locally. git clone https://github.com/wedeploy/tutorial-docker.git ","srcFilePath":"src/pages/tutorials/docker/download-sample/index.md","id":"download-sample","url":"/tutorials/docker/download-sample/"},"get-started":{"title":"Get Started","description":"In this section, you'll learn how to deploy an application using Docker.","buttonTitle":"I'm ready to start!","tutorialTitle":"Getting started with Docker","parentId":"docker","layout":"tutorial","time":20,"weight":1,"content":" Get Started Deploying Docker containers with WeDeploy is super easy. This tutorial will walk you through how to deploy a Wordpress site connected to a MySQL database. What you'll need The WeDeploy CLI A code editor What you'll do Download a sample project Add configuration files Deploy to production ","srcFilePath":"src/pages/tutorials/docker/get-started/index.md","id":"get-started","url":"/tutorials/docker/get-started/"},"it-works":{"title":"It Works","description":"In this section, you'll learn how to authenticate users on the web using the WeDeploy API Client.","buttonTitle":"It works","tutorialTitle":"Getting started with Docker","parentId":"docker","layout":"tutorial","time":30,"weight":5,"content":" It Works Great work, your project is ready to be used! Go to wp-.wedeploy.io in your browser. Awesome! You just deployed a Wordpress site connected to a MySQL database within a few minutes! We can't wait to see what else you create with WeDeploy! Pro Tip Wanting to make a pretty url for your service without purchasing a custom domain? Perfect, on the Console you can go to the Custom Domain section of your service and add a custom domain that ends with wedeploy.io (e.g. yourapp.wedeploy.io). ","srcFilePath":"src/pages/tutorials/docker/it-works/index.md","id":"it-works","url":"/tutorials/docker/it-works/"},"you-made-it":{"title":"You Made It!","description":"In this section, you'll learn how to deploy an application using Docker.","tutorialTitle":"Getting started with Docker","parentId":"docker","layout":"tutorial","weight":6,"content":" You made it! Now discover what else you can do with WeDeploy. Ruby Tutorial Node.js Tutorial Liferay DXP Tutorial Java Tutorial ","srcFilePath":"src/pages/tutorials/docker/you-made-it/index.md","id":"you-made-it","url":"/tutorials/docker/you-made-it/"}},"childIds":["get-started","download-sample","add-config-files","deploy-project","it-works","you-made-it"]},"email-android":{"title":"Email Tutorial on Android","description":"In this section, you'll learn how to send an email on Android using the WeDeploy API Client.","tutorialTitle":"Getting started with WeDeploy Email on Android","url":"/tutorials/email-android/get-started/","hidden":true,"content":" ","srcFilePath":"src/pages/tutorials/email-android/index.soy","id":"email-android","location":"/tutorials/email-android/","children":{"add-api-method":{"title":"Add API Method","description":"In this section, you'll learn how to send an email on Android using the WeDeploy API Client.","buttonTitle":"I added the API method","tutorialTitle":"Getting started with WeDeploy Email on Android","parentId":"email-android","layout":"tutorial","time":90,"weight":6,"content":" Add API Method Now we want to add a script that will send an email. To do this, go to MainActivity.java and paste this code into the \"sendEmail\" method: weDeploy = new WeDeploy.Builder() .authorization(new TokenAuthorization(\"000-000-000\")) .build(); weDeploy.email(\"msgs-.wedeploy.io\") .from(from) .to(to) .subject(subject) .message(subject) .send() .execute(new Callback() { @Override public void onSuccess(Response response) { showAlert(\"Success\", \"Email sent! Wait a little bit until it arrives :)\"); } @Override public void onFailure(Exception e) { showAlert(\"Error\", \"Email sending the email\"); } }); Note: make sure to replace `` with the id of your project. Add master token In order for your email request to be authorized, you must add your project's unique Master Token. Go to the WeDeploy Console Click on your project Go to the Settings section Copy your Master Token Change the new TokenAuthorization('000-000-000') initialization to new TokenAuthorization('yourMasterToken') in the Java code Pro Tip As you can see, the input values from the form are being used as email parameters (from, to, subject, etc). We have a bunch of parameters so you can fully configure your email posts. Want to see the full list of Email Parameters? ","srcFilePath":"src/pages/tutorials/email-android/add-api-method/index.md","id":"add-api-method","url":"/tutorials/email-android/add-api-method/"},"add-config-file":{"title":"Add Config File","description":"In this section, you'll learn how to send an email on Android using the WeDeploy API Client.","buttonTitle":"I added the config file","tutorialTitle":"Getting started with WeDeploy Email on Android","parentId":"email-android","layout":"tutorial","time":60,"weight":3,"content":" Add Config File Every service folder must have a wedeploy.json file that configures it, so let's add a file inside the sample project you just downloaded. Open the tutorial-email-android folder in a code editor. Create a new file inside of the email folder and name it wedeploy.json. Inside of that file, paste this code. { \"id\": \"msgs\", \"image\": \"wedeploy/email:@site.version.image.email@\" } Pro Tip Another thing you can do in your wedeploy.json file is add environment variables. There are many ways to use these, one example is to change to a unique email provider. { \"id\": \"msgs\", \"image\": \"wedeploy/email:@site.version.image.email@\", \"env\" { \"EMAIL_HOST\": \"host294.mailrave.com\" } } See the full list of Environment Variables for Email. ","srcFilePath":"src/pages/tutorials/email-android/add-config-file/index.md","id":"add-config-file","url":"/tutorials/email-android/add-config-file/"},"deploy-project":{"title":"Deploy the Project","description":"In this section, you'll learn how to send an email on Android using the WeDeploy API Client.","buttonTitle":"I deployed the project","tutorialTitle":"Getting started with WeDeploy Email on Android","parentId":"email-android","layout":"tutorial","time":30,"weight":5,"content":" Deploy Project Now the moment you have been waiting for! Go to tutorial-email-android in your terminal and deploy your project using the CLI. we deploy -p projectID Note: make sure to replace projectID with the ID that you'd like for your project. ","srcFilePath":"src/pages/tutorials/email-android/deploy-project/index.md","id":"deploy-project","url":"/tutorials/email-android/deploy-project/"},"download-sample":{"title":"Download Sample","description":"In this section, you'll learn how to send an email on Android using the WeDeploy API Client.","buttonTitle":"I downloaded the sample files","tutorialTitle":"Getting started with WeDeploy Email on Android","parentId":"email-android","layout":"tutorial","time":20,"weight":2,"content":" Download Sample First, you'll download a folder that contains the necessary files and directories for an email app. There are basically two ways you can do this. A) Download a ZIP You can download a ZIP file. B) Download using Git Or clone this repository locally. git clone https://github.com/wedeploy/tutorial-email-android.git ","srcFilePath":"src/pages/tutorials/email-android/download-sample/index.md","id":"download-sample","url":"/tutorials/email-android/download-sample/"},"get-started":{"title":"Get Started","description":"In this section, you'll learn how to send an email on Android using the WeDeploy API Client.","buttonTitle":"I'm ready to start!","tutorialTitle":"Getting started with WeDeploy Email on Android","parentId":"email-android","layout":"tutorial","time":20,"weight":1,"content":" Get Started Sending emails with WeDeploy is super easy. This tutorial will walk you through how to deploy an app that can send emails. What you'll need The WeDeploy CLI Android Studio A code editor What you'll do Download a sample project Add configuration files Include the API Client Add the API methods Deploy to production Start sending emails ","srcFilePath":"src/pages/tutorials/email-android/get-started/index.md","id":"get-started","url":"/tutorials/email-android/get-started/"},"include-api-client":{"title":"Include API Client","description":"In this section, you'll learn how to send an email on Android using the WeDeploy API Client.","buttonTitle":"I included the API Client","tutorialTitle":"Getting started with WeDeploy Email on Android","parentId":"email-android","layout":"tutorial","time":30,"weight":4,"content":" Include API Client Before we can make any requests to send an email, we must connect the WeDeploy API Client. To do this, go to tutorial-email-android/app/tutorial-email-android/app/build.gradle and include this line inside the dependencies function of this file: compile 'com.wedeploy:com.wedeploy.android:@site.version.api.android@' After doing this, you have to sync the project, after a few seconds you will see that the project is built correctly. ","srcFilePath":"src/pages/tutorials/email-android/include-api-client/index.md","id":"include-api-client","url":"/tutorials/email-android/include-api-client/"},"it-works":{"title":"It Works","description":"In this section, you'll learn how to send an email on Android using the WeDeploy API Client.","buttonTitle":"It works","tutorialTitle":"Getting started with WeDeploy Email on Android","parentId":"email-android","layout":"tutorial","time":30,"weight":7,"content":" Send an Email Deploy Now that your API requests are ready, you can deploy your project again so that the changes are live. we deploy -p projectID See It Live Great work, your app is now live! Now let's send an email. Run the app in the emulator. Fill in the form (make sure you put your email in the \"to\" field). Click submit and check your email inbox because you've got mail! Awesome! You just deployed an app and sent an email within a few minutes! We can't wait to see what else you create with WeDeploy! Pro Tip Wanting to make a pretty url for your primary UI service without purchasing a custom domain? Perfect, you can go to the Custom Domain section of your service on the Dashboard and add a custom domain that ends with wedeploy.io (e.g. yourapp.wedeploy.io). ","srcFilePath":"src/pages/tutorials/email-android/it-works/index.md","id":"it-works","url":"/tutorials/email-android/it-works/"},"you-made-it":{"title":"You Made It!","description":"In this section, you'll learn how to send an email on Android using the WeDeploy API Client.","tutorialTitle":"Getting started with WeDeploy Email on Android","parentId":"email-android","layout":"tutorial","weight":10,"content":" You made it! Now discover what else you can do with WeDeploy. Auth on Android Tutorial Data on Android Tutorial ","srcFilePath":"src/pages/tutorials/email-android/you-made-it/index.md","id":"you-made-it","url":"/tutorials/email-android/you-made-it/"}},"childIds":["get-started","download-sample","add-config-file","include-api-client","deploy-project","add-api-method","it-works","you-made-it"]},"email-ios":{"title":"Email Tutorial on iOS","description":"In this section, you'll learn how to send an email on iOS using the WeDeploy API Client.","tutorialTitle":"Getting started with WeDeploy Email on iOS","url":"/tutorials/email-ios/get-started/","hidden":true,"content":" ","srcFilePath":"src/pages/tutorials/email-ios/index.soy","id":"email-ios","location":"/tutorials/email-ios/","children":{"add-api-method":{"title":"Add API Method","description":"In this section, you'll learn how to send an email on iOS using the WeDeploy API Client.","buttonTitle":"I added the API method","tutorialTitle":"Getting started with WeDeploy Email on iOS","parentId":"email-ios","layout":"tutorial","time":90,"weight":6,"content":" Add API Method Now we want to add a script that will send an email. To do this, go to tutorial-email-ios/app/tutorial-email-ios/EmailViewController.swift and paste this code into the \"submitButtonClick\" function: let auth = TokenAuth(token: \"000-000-000\") WeDeploy.email(\"msgs-.wedeploy.io\", authorization: auth) .to(to) .from(from) .subject(subject) .message(subject) .send() .toCallback { emailId, error in if let emailId = emailId { self.showAlert(with: \"Success\", message: \"Email sent! Wait a little bit until it arrives :)\") print(\"Email id: \\(emailId)\") } else { self.showAlert(with: \"Error\", message: \"Error sending the email\") print(String(describing: error)) } } Note: make sure to replace `` with the id of your project. Add master token In order for your email request to be authorized, you must add your project's unique Master Token. Go to the WeDeploy Console Click on your project Go to the Settings section Copy your Master Token Change the TokenAuth(token: \"000-000-000\") initialization to TokenAuth(token: \"yourMasterToken\") in the swift code Pro Tip As you can see, the input values from the form are being used as email parameters (from, to, subject, etc). We have a bunch of parameters so you can fully configure your email posts. Want to see the full list of Email Parameters? ","srcFilePath":"src/pages/tutorials/email-ios/add-api-method/index.md","id":"add-api-method","url":"/tutorials/email-ios/add-api-method/"},"add-config-file":{"title":"Add Config File","description":"In this section, you'll learn how to send an email on iOS using the WeDeploy API Client.","buttonTitle":"I added the config file","tutorialTitle":"Getting started with WeDeploy Email on iOS","parentId":"email-ios","layout":"tutorial","time":60,"weight":3,"content":" Add Config File Every service folder must have a wedeploy.json file that configures it, so let's add a file inside the sample project you just downloaded. Open the tutorial-email-ios folder in a code editor. Create a new file inside of the email folder and name it wedeploy.json. Inside of that file, paste this code. { \"id\": \"msgs\", \"image\": \"wedeploy/email:@site.version.image.email@\" } Pro Tip Another thing you can do in your wedeploy.json file is add environment variables. There are many ways to use these, one example is to change to a unique email provider. { \"id\": \"msgs\", \"image\": \"wedeploy/email:@site.version.image.email@\", \"env\" { \"EMAIL_HOST\": \"host294.mailrave.com\" } } See the full list of Environment Variables for Email. ","srcFilePath":"src/pages/tutorials/email-ios/add-config-file/index.md","id":"add-config-file","url":"/tutorials/email-ios/add-config-file/"},"deploy-project":{"title":"Deploy the Project","description":"In this section, you'll learn how to send an email on iOS using the WeDeploy API Client.","buttonTitle":"I deployed the project","tutorialTitle":"Getting started with WeDeploy Email on iOS","parentId":"email-ios","layout":"tutorial","time":30,"weight":5,"content":" Deploy Project Now the moment you have been waiting for! Go to tutorial-email-ios in your terminal and deploy your project using the CLI. we deploy -p projectID Note: make sure to replace projectID with the ID that you'd like for your project. ","srcFilePath":"src/pages/tutorials/email-ios/deploy-project/index.md","id":"deploy-project","url":"/tutorials/email-ios/deploy-project/"},"download-sample":{"title":"Download Sample","description":"In this section, you'll learn how to send an email on iOS using the WeDeploy API Client.","buttonTitle":"I downloaded the sample files","tutorialTitle":"Getting started with WeDeploy Email on iOS","parentId":"email-ios","layout":"tutorial","time":20,"weight":2,"content":" Download Sample First, you'll download a folder that contains the necessary files and directories for an email app. There are basically two ways you can do this. A) Download a ZIP You can download a ZIP file. B) Download using Git Or clone this repository locally. git clone https://github.com/wedeploy/tutorial-email-ios.git ","srcFilePath":"src/pages/tutorials/email-ios/download-sample/index.md","id":"download-sample","url":"/tutorials/email-ios/download-sample/"},"get-started":{"title":"Get Started","description":"In this section, you'll learn how to send an email on iOS using the WeDeploy API Client.","buttonTitle":"I'm ready to start!","tutorialTitle":"Getting started with WeDeploy Email on iOS","parentId":"email-ios","layout":"tutorial","time":20,"weight":1,"content":" Get Started Sending emails with WeDeploy is super easy. This tutorial will walk you through how to deploy an app that can send emails. What you'll need The WeDeploy CLI Xcode Cocoapods A code editor What you'll do Download a sample project Add configuration files Include the API Client Add the API methods Deploy to production Start sending emails ","srcFilePath":"src/pages/tutorials/email-ios/get-started/index.md","id":"get-started","url":"/tutorials/email-ios/get-started/"},"include-api-client":{"title":"Include API Client","description":"In this section, you'll learn how to send an email on iOS using the WeDeploy API Client.","buttonTitle":"I included the API Client","tutorialTitle":"Getting started with WeDeploy Email on iOS","parentId":"email-ios","layout":"tutorial","time":30,"weight":4,"content":" Include API Client Before we can make any requests to send an email, we must connect the WeDeploy API Client. To do this, go to tutorial-data-ios/app/Podfile and include this line inside the target function of this file: pod 'WeDeploy' After doing this, you have to install the dependencies on the project, to do that open a terminal in that folder and execute the next command: pod install You will see all the dependencies being installed. ","srcFilePath":"src/pages/tutorials/email-ios/include-api-client/index.md","id":"include-api-client","url":"/tutorials/email-ios/include-api-client/"},"it-works":{"title":"It Works","description":"In this section, you'll learn how to send an email on iOS using the WeDeploy API Client.","buttonTitle":"It works","tutorialTitle":"Getting started with WeDeploy Email on iOS","parentId":"email-ios","layout":"tutorial","time":30,"weight":7,"content":" Send an Email Deploy Now that your API requests are ready, you can deploy your project again so that the changes are live. we deploy -p projectID See It Live Great work, your app is now live! Now let's send an email. Run the app in the emulator. Fill in the form (make sure you put your email in the \"to\" field). Click submit and check your email inbox because you've got mail! Awesome! You just deployed an app and sent an email within a few minutes! We can't wait to see what else you create with WeDeploy! Pro Tip Wanting to make a pretty url for your primary UI service without purchasing a custom domain? Perfect, you can go to the Custom Domain section of your service on the Dashboard and add a custom domain that ends with wedeploy.io (e.g. yourapp.wedeploy.io). ","srcFilePath":"src/pages/tutorials/email-ios/it-works/index.md","id":"it-works","url":"/tutorials/email-ios/it-works/"},"you-made-it":{"title":"You Made It!","description":"In this section, you'll learn how to send an email on iOS using the WeDeploy API Client.","tutorialTitle":"Getting started with WeDeploy Email on iOS","parentId":"email-ios","layout":"tutorial","weight":10,"content":" You made it! Now discover what else you can do with WeDeploy. Auth on iOS Tutorial Data on iOS Tutorial ","srcFilePath":"src/pages/tutorials/email-ios/you-made-it/index.md","id":"you-made-it","url":"/tutorials/email-ios/you-made-it/"}},"childIds":["get-started","download-sample","add-config-file","include-api-client","deploy-project","add-api-method","it-works","you-made-it"]},"email-web":{"title":"Email Tutorial On The Web","description":"In this section, you'll learn how to send an email on the web using the WeDeploy API Client.","tutorialTitle":"Getting started with WeDeploy Email on the web","url":"/tutorials/email-web/get-started/","hidden":true,"content":" ","srcFilePath":"src/pages/tutorials/email-web/index.soy","id":"email-web","location":"/tutorials/email-web/","children":{"add-api-method":{"title":"Add API Method","description":"In this section, you'll learn how to send an email on the web using the WeDeploy API Client.","buttonTitle":"I added the API method","tutorialTitle":"Getting started with WeDeploy Email on the web","parentId":"email-web","layout":"tutorial","time":90,"weight":6,"content":" Add API Method Now we want to add a script that will send an email. To do this, go to tutorial-email-web/ui/main.js and paste this code: WeDeploy .email('msgs-.wedeploy.io') .auth('yourMasterToken') .from(form.from.value) .to(form.to.value) .subject(form.subject.value) .message(form.message.value) .send() .then(function(response) { if (response.succeeded()) { form.reset(); alert('Email sent! Wait a little bit until it arrives :)'); console.info('Email ID:', response); } else { alert('Email was not sent'); } }) .catch(function(error) { alert('Email error:' error); }); Note: make sure to replace `` with the id of your project. Add master token In order for your email request to be authorized, you must add your project's unique Master Token. Go to the WeDeploy Console Click on your project Go to the Settings section Copy your Master Token Paste it into the .auth('yourMasterToken') element in the code above on main.js Pro Tip As you can see, the input values from the form are being used as email parameters (from, to, subject, etc). We have a bunch of parameters so you can fully configure your email posts. Want to see the full list of Email Parameters? ","srcFilePath":"src/pages/tutorials/email-web/add-api-method/index.md","id":"add-api-method","url":"/tutorials/email-web/add-api-method/"},"add-config-file":{"title":"Add Config File","description":"In this section, you'll learn how to send an email on the web using the WeDeploy API Client.","buttonTitle":"I added the config file","tutorialTitle":"Getting started with WeDeploy Email on the web","parentId":"email-web","layout":"tutorial","time":60,"weight":3,"content":" Add Config File Every service folder must have a wedeploy.json file that configures it, so let's add two files inside the sample project you just downloaded. Open the tutorial-email-web folder in a code editor. Create a new file inside of the email folder and name it wedeploy.json. Inside of that file, paste this code. { \"id\": \"msgs\", \"image\": \"wedeploy/email:@site.version.image.email@\" } Now create a new file inside of the ui folder and name it wedeploy.json. Inside of that file, paste this code. { \"id\": \"ui\", \"image\": \"wedeploy/hosting:@site.version.image.hosting@\" } Pro Tip Another thing you can do in your wedeploy.json file is add environment variables. There are many ways to use these, one example is to change to a unique email provider. { \"id\": \"msgs\", \"image\": \"wedeploy/email:@site.version.image.email@\", \"env\" { \"EMAIL_HOST\": \"host294.mailrave.com\" } } See the full list of Environment Variables for Email. ","srcFilePath":"src/pages/tutorials/email-web/add-config-file/index.md","id":"add-config-file","url":"/tutorials/email-web/add-config-file/"},"deploy-project":{"title":"Deploy the Project","description":"In this section, you'll learn how to send an email on the web using the WeDeploy API Client.","buttonTitle":"I deployed the project","tutorialTitle":"Getting started with WeDeploy Email on the web","parentId":"email-web","layout":"tutorial","time":30,"weight":5,"content":" Deploy Project Now the moment you have been waiting for! Go to tutorial-email-web in your terminal and deploy your project using the CLI. we deploy -p projectID Note: make sure to replace projectID with the ID that you'd like for your project. ","srcFilePath":"src/pages/tutorials/email-web/deploy-project/index.md","id":"deploy-project","url":"/tutorials/email-web/deploy-project/"},"download-sample":{"title":"Download Sample","description":"In this section, you'll learn how to send an email on the web using the WeDeploy API Client.","buttonTitle":"I downloaded the sample files","tutorialTitle":"Getting started with WeDeploy Email on the web","parentId":"email-web","layout":"tutorial","time":20,"weight":2,"content":" Download Sample First, you'll download a folder that contains the necessary files and directories for an email app. There are basically two ways you can do this. A) Download a ZIP You can download a ZIP file. B) Download using Git Or clone this repository locally. git clone https://github.com/wedeploy/tutorial-email-web.git ","srcFilePath":"src/pages/tutorials/email-web/download-sample/index.md","id":"download-sample","url":"/tutorials/email-web/download-sample/"},"get-started":{"title":"Get Started","description":"In this section, you'll learn how to send an email on the web using the WeDeploy API Client.","buttonTitle":"I'm ready to start!","tutorialTitle":"Getting started with WeDeploy Email on the web","parentId":"email-web","layout":"tutorial","time":20,"weight":1,"content":" Get Started Sending emails with WeDeploy is super easy. This tutorial will walk you through how to deploy an app that can send emails. What you'll need The WeDeploy CLI A code editor What you'll do Download a sample project Add configuration files Include the API Client Add the API methods Deploy to production Start sending emails ","srcFilePath":"src/pages/tutorials/email-web/get-started/index.md","id":"get-started","url":"/tutorials/email-web/get-started/"},"include-api-client":{"title":"Include API Client","description":"In this section, you'll learn how to send an email on the web using the WeDeploy API Client.","buttonTitle":"I included the API Client","tutorialTitle":"Getting started with WeDeploy Email on the web","parentId":"email-web","layout":"tutorial","time":30,"weight":4,"content":" Include API Client Before we can make any requests to send an email, we must connect the WeDeploy API Client. To do this, go to index.html in that ui directory and include this script link at the bottom of the `` element: ","srcFilePath":"src/pages/tutorials/email-web/include-api-client/index.md","id":"include-api-client","url":"/tutorials/email-web/include-api-client/"},"it-works":{"title":"It Works","description":"In this section, you'll learn how to send an email on the web using the WeDeploy API Client.","buttonTitle":"It works","tutorialTitle":"Getting started with WeDeploy Email on the web","parentId":"email-web","layout":"tutorial","time":30,"weight":7,"content":" Send an Email Deploy Now that your API requests are ready, you can deploy your project again so that the changes are live. we deploy -p projectID See It Live Great work, your app is now live! Now let's send an email. Go to ui-.wedeploy.io in your browser. Fill in the form (make sure you put your email in the \"to\" field). Click submit and check your email inbox because you've got mail! Awesome! You just deployed an app and sent an email within a few minutes! We can't wait to see what else you create with WeDeploy! Pro Tip Wanting to make a pretty url for your primary UI service without purchasing a custom domain? Perfect, you can go to the Custom Domain section of your service on the Dashboard and add a custom domain that ends with wedeploy.io (e.g. yourapp.wedeploy.io). ","srcFilePath":"src/pages/tutorials/email-web/it-works/index.md","id":"it-works","url":"/tutorials/email-web/it-works/"},"you-made-it":{"title":"You Made It!","description":"In this section, you'll learn how to send an email on the web using the WeDeploy API Client.","tutorialTitle":"Getting started with WeDeploy Email on the web","parentId":"email-web","layout":"tutorial","weight":8,"content":" You made it! Now discover what else you can do with WeDeploy. Hosting Tutorial Data Tutorial Auth Tutorial Ruby Tutorial Node.js Tutorial Liferay DXP Tutorial Java Tutorial ","srcFilePath":"src/pages/tutorials/email-web/you-made-it/index.md","id":"you-made-it","url":"/tutorials/email-web/you-made-it/"}},"childIds":["get-started","download-sample","add-config-file","include-api-client","deploy-project","add-api-method","it-works","you-made-it"]},"hosting":{"title":"Hosting Tutorial","description":"In this section, you'll learn how to deploy an application using WeDeploy Hosting.","tutorialTitle":"Getting started with WeDeploy Hosting","url":"/tutorials/hosting/get-started/","hidden":true,"content":" ","srcFilePath":"src/pages/tutorials/hosting/index.soy","id":"hosting","location":"/tutorials/hosting/","children":{"add-config-file":{"title":"Add Config File","description":"In this section, you'll learn how to deploy an application using WeDeploy Hosting.","buttonTitle":"I added the config file","tutorialTitle":"Getting started with WeDeploy Hosting","parentId":"hosting","layout":"tutorial","time":40,"weight":3,"content":" Add Config File Every service folder must have a wedeploy.json file that configures it, so let's add one file inside the sample project you just downloaded. Open the tutorial-hosting folder in a code editor Create a new file named wedeploy.json. In that file, paste this code: { \"id\": \"app\" } Pro Tip One of the awesome things you can do in your wedeploy.json file is add environment variables. There are many ways to use these; one example is to serve a specific folder other than root. { \"id\": \"app\", \"env\": { \"WEDEPLOYWEBPATH\": \"dist\" } } ","srcFilePath":"src/pages/tutorials/hosting/add-config-file/index.md","id":"add-config-file","url":"/tutorials/hosting/add-config-file/"},"deploy-project":{"title":"Deploy Project","description":"In this section, you'll learn how to deploy an application using WeDeploy Hosting.","buttonTitle":"I deployed the project","tutorialTitle":"Getting started with WeDeploy Hosting","parentId":"hosting","layout":"tutorial","time":30,"weight":4,"content":" Deploy Project Now the moment you have been waiting for! Go to tutorial-hosting in your terminal and deploy your project using the CLI. we deploy -p projectID Note: make sure to replace projectID with the ID that you'd like for your project. ","srcFilePath":"src/pages/tutorials/hosting/deploy-project/index.md","id":"deploy-project","url":"/tutorials/hosting/deploy-project/"},"download-sample":{"title":"Download Sample","description":"In this section, you'll learn how to deploy an application using WeDeploy Hosting.","buttonTitle":"I downloaded the sample files","tutorialTitle":"Getting started with WeDeploy Hosting","parentId":"hosting","layout":"tutorial","time":20,"weight":2,"content":" Download Sample First, you'll download a folder that contains the necessary files and directories for a hosting project. There are basically two ways you can do this. A) Download a ZIP You can download a ZIP file. B) Download using Git git clone https://github.com/wedeploy/tutorial-hosting.git ","srcFilePath":"src/pages/tutorials/hosting/download-sample/index.md","id":"download-sample","url":"/tutorials/hosting/download-sample/"},"get-started":{"title":"Get Started","description":"In this section, you'll learn how to deploy an application using WeDeploy Hosting.","buttonTitle":"I'm ready to start!","tutorialTitle":"Getting started with WeDeploy Hosting","parentId":"hosting","layout":"tutorial","time":20,"weight":1,"content":" Get Started Hosting a static website with WeDeploy is super easy. This tutorial will walk you through how to serve HTML, CSS, JavaScript, and other static files. What you'll need The WeDeploy CLI A code editor What you'll do Download a sample project Add configuration files Deploy to production ","srcFilePath":"src/pages/tutorials/hosting/get-started/index.md","id":"get-started","url":"/tutorials/hosting/get-started/"},"it-works":{"title":"It Works","description":"In this section, you'll learn how to deploy an application using WeDeploy Hosting.","buttonTitle":"It works","tutorialTitle":"Getting started with WeDeploy Hosting","parentId":"hosting","layout":"tutorial","time":30,"weight":5,"content":" It Works Great work, your project is ready to be used! Go to app-.wedeploy.io in your browser. Awesome! You just deployed a static site within a few minutes! We can't wait to see what else you create with WeDeploy! Pro Tip Wanting to make a pretty url for your service without purchasing a custom domain? Perfect, on the Console you can go to the Custom Domain section of your service and add a custom domain that ends with wedeploy.io (e.g. yourapp.wedeploy.io). ","srcFilePath":"src/pages/tutorials/hosting/it-works/index.md","id":"it-works","url":"/tutorials/hosting/it-works/"},"you-made-it":{"title":"You Made It!","description":"In this section, you'll learn how to deploy an application using WeDeploy Hosting.","tutorialTitle":"Getting started with WeDeploy Hosting","parentId":"hosting","layout":"tutorial","weight":8,"content":" You made it! Now discover what else you can do with WeDeploy. Email Tutorial Data Tutorial Auth Tutorial Ruby Tutorial Node.js Tutorial Liferay DXP Tutorial Java Tutorial ","srcFilePath":"src/pages/tutorials/hosting/you-made-it/index.md","id":"you-made-it","url":"/tutorials/hosting/you-made-it/"}},"childIds":["get-started","download-sample","add-config-file","deploy-project","it-works","you-made-it"]},"liferay-dxp":{"title":"Liferay DXP Tutorial","description":"In this section, you'll learn how to deploy an application using Liferay DXP.","tutorialTitle":"Getting started with Liferay DXP","url":"/tutorials/liferay-dxp/get-started/","hidden":true,"content":" ","srcFilePath":"src/pages/tutorials/liferay-dxp/index.soy","id":"liferay-dxp","location":"/tutorials/liferay-dxp/","children":{"deploy-project":{"title":"Deploy Project","description":"In this section, you'll learn how to deploy an application using Liferay DXP.","buttonTitle":"I deployed the project","tutorialTitle":"Getting started with Liferay DXP","parentId":"liferay-dxp","layout":"tutorial","time":30,"weight":4,"content":" Deploy Project Now the moment you have been waiting for! Go to tutorial-liferay-dxp in your terminal and deploy your project using the CLI. we deploy -p projectID Note: make sure to replace projectID with the ID that you'd like for your project. ","srcFilePath":"src/pages/tutorials/liferay-dxp/deploy-project/index.md","id":"deploy-project","url":"/tutorials/liferay-dxp/deploy-project/"},"add-config-file":{"title":"Add Config File","description":"In this section, you'll learn how to deploy an application using Liferay DXP.","buttonTitle":"I added the config files","tutorialTitle":"Getting started with Liferay DXP","parentId":"liferay-dxp","layout":"tutorial","time":40,"weight":3,"content":" Add Config File Every service folder must have a wedeploy.json file that configures it, so let's add one file inside the sample project you just downloaded. Open the tutorial-liferay-dxp folder in a code editor Create a new file named wedeploy.json. In that file, paste this code: { \"id\": \"app\", \"image\": \"wedeploy/liferay:@site.version.image.liferay@\", \"volume\": \"/opt/liferay\", \"memory\": 4096, \"cpu\": 3 } Pro Tip One of the awesome things you can do in your wedeploy.json file is add environment variables. There are many ways to use these; one example is to provide credentials for a external database. { \"id\": \"app\", \"env\": { \"DB_USER\": \"us3rname\", \"DB_PASSWORD\": \"passw0rd\", } } ","srcFilePath":"src/pages/tutorials/liferay-dxp/add-config-file/index.md","id":"add-config-file","url":"/tutorials/liferay-dxp/add-config-file/"},"get-started":{"title":"Get Started","description":"In this section, you'll learn how to deploy an application using Liferay DXP.","buttonTitle":"I'm ready to start!","tutorialTitle":"Getting started with Liferay DXP","parentId":"liferay-dxp","layout":"tutorial","time":20,"weight":1,"content":" Get Started Using Liferay DXP with WeDeploy is super easy. This tutorial will walk you through how to deploy a Liferay DXP instance. What you'll need The WeDeploy CLI A code editor What you'll do Download a sample project Add a configuration file Deploy to production ","srcFilePath":"src/pages/tutorials/liferay-dxp/get-started/index.md","id":"get-started","url":"/tutorials/liferay-dxp/get-started/"},"download-sample":{"title":"Download Sample","description":"In this section, you'll learn how to deploy an application using Liferay DXP.","buttonTitle":"I downloaded the sample files","tutorialTitle":"Getting started with Liferay DXP","parentId":"liferay-dxp","layout":"tutorial","time":20,"weight":2,"content":" Download Sample First, you'll download a folder that contains the necessary files and directories for a Liferay DXP project. There are basically two ways you can do this. A) Download a ZIP You can download a ZIP file. B) Download using Git Or clone this repository locally. git clone https://github.com/wedeploy/tutorial-liferay-dxp.git ","srcFilePath":"src/pages/tutorials/liferay-dxp/download-sample/index.md","id":"download-sample","url":"/tutorials/liferay-dxp/download-sample/"},"it-works":{"title":"It Works","description":"In this section, you'll learn how to deploy an application using Liferay DXP.","buttonTitle":"It works","tutorialTitle":"Getting started with Liferay DXP","parentId":"liferay-dxp","layout":"tutorial","time":30,"weight":5,"content":" It Works Great work, your project is ready to be used! Go to app-.wedeploy.io in your browser. Awesome! You just deployed a Liferay DXP instance within a few minutes! We can't wait to see what else you create with WeDeploy! Pro Tip Wanting to make a pretty url for your service without purchasing a custom domain? Perfect, you can go to the Custom Domain section of your service on the Dashboard and add a custom domain that ends with wedeploy.io (e.g. yourapp.wedeploy.io). ","srcFilePath":"src/pages/tutorials/liferay-dxp/it-works/index.md","id":"it-works","url":"/tutorials/liferay-dxp/it-works/"},"you-made-it":{"title":"You Made It!","description":"In this section, you'll learn how to deploy an application using Liferay DXP.","tutorialTitle":"Getting started with Liferay DXP","parentId":"liferay-dxp","layout":"tutorial","weight":6,"content":" You made it! Now discover what else you can do with WeDeploy. Hosting Tutorial Email Tutorial Data Tutorial Auth Tutorial Ruby Tutorial Node.js Tutorial Java Tutorial ","srcFilePath":"src/pages/tutorials/liferay-dxp/you-made-it/index.md","id":"you-made-it","url":"/tutorials/liferay-dxp/you-made-it/"}},"childIds":["get-started","download-sample","add-config-file","deploy-project","it-works","you-made-it"]},"nodejs":{"title":"Node.js Tutorial","description":"In this section, you'll learn how to deploy an application using Node.js.","tutorialTitle":"Getting started with Node.js","url":"/tutorials/nodejs/get-started/","hidden":true,"content":" ","srcFilePath":"src/pages/tutorials/nodejs/index.soy","id":"nodejs","location":"/tutorials/nodejs/","children":{"add-config-file":{"title":"Add Config File","description":"In this section, you'll learn how to deploy an application using Node.js.","buttonTitle":"I added the config files","tutorialTitle":"Getting started with Node.js","parentId":"nodejs","layout":"tutorial","time":40,"weight":3,"content":" Add Config File Every service folder must have a wedeploy.json file that configures it, so let's add one file inside the sample project you just downloaded. Open the tutorial-nodejs folder in a code editor Create a new file named wedeploy.json. In that file, paste this code: { \"id\": \"app\" } Pro Tip One of the awesome things you can do in your wedeploy.json file is add environment variables. There are many ways to use these; one example is to provide credentials for a external database. { \"id\": \"app\", \"env\": { \"DB_USER\": \"us3rname\", \"DB_PASSWORD\": \"passw0rd\", } } ","srcFilePath":"src/pages/tutorials/nodejs/add-config-file/index.md","id":"add-config-file","url":"/tutorials/nodejs/add-config-file/"},"deploy-project":{"title":"Deploy Project","description":"In this section, you'll learn how to deploy an application using Node.js.","buttonTitle":"I deployed the project","tutorialTitle":"Getting started with Node.js","parentId":"nodejs","layout":"tutorial","time":30,"weight":4,"content":" Deploy Project Now the moment you have been waiting for! Go to tutorial-nodejs in your terminal and deploy your project using the CLI. we deploy -p projectID Note: make sure to replace projectID with the ID that you'd like for your project. ","srcFilePath":"src/pages/tutorials/nodejs/deploy-project/index.md","id":"deploy-project","url":"/tutorials/nodejs/deploy-project/"},"get-started":{"title":"Get Started","description":"In this section, you'll learn how to deploy an application using Node.js.","buttonTitle":"I'm ready to start!","tutorialTitle":"Getting started with Node.js","parentId":"nodejs","layout":"tutorial","time":20,"weight":1,"content":" Get Started Using Node.js with WeDeploy is super easy. This tutorial will walk you through how to deploy a Node.js app using Express as our web framework. What you'll need The WeDeploy CLI A code editor What you'll do Download a sample project Add a configuration file Deploy to production ","srcFilePath":"src/pages/tutorials/nodejs/get-started/index.md","id":"get-started","url":"/tutorials/nodejs/get-started/"},"download-sample":{"title":"Download Sample","description":"In this section, you'll learn how to deploy an application using Node.js.","buttonTitle":"I downloaded the sample files","tutorialTitle":"Getting started with Node.js","parentId":"nodejs","layout":"tutorial","time":20,"weight":2,"content":" Download Sample First, you'll download a folder that contains the necessary files and directories for a Node.js project. There are basically two ways you can do this. A) Download a ZIP You can download a ZIP file. B) Download using Git Or clone this repository locally. git clone https://github.com/wedeploy/tutorial-nodejs.git ","srcFilePath":"src/pages/tutorials/nodejs/download-sample/index.md","id":"download-sample","url":"/tutorials/nodejs/download-sample/"},"it-works":{"title":"It Works","description":"In this section, you'll learn how to deploy an application using Node.js.","buttonTitle":"It works","tutorialTitle":"Getting started with Node.js","parentId":"nodejs","layout":"tutorial","time":30,"weight":5,"content":" It Works Great work, your project is ready to be used! Go to app-.wedeploy.io in your browser. Awesome! You just deployed a Node.js app within a few minutes! We can't wait to see what else you create with WeDeploy! Pro Tip Wanting to make a pretty url for your service without purchasing a custom domain? Perfect, you can go to the Custom Domain section of your service on the Dashboard and add a custom domain that ends with wedeploy.io (e.g. yourapp.wedeploy.io). ","srcFilePath":"src/pages/tutorials/nodejs/it-works/index.md","id":"it-works","url":"/tutorials/nodejs/it-works/"},"you-made-it":{"title":"You Made It!","description":"In this section, you'll learn how to deploy an application using Node.js.","tutorialTitle":"Getting started with Node.js","parentId":"nodejs","layout":"tutorial","weight":6,"content":" You made it! Now discover what else you can do with WeDeploy. Hosting Tutorial Email Tutorial Data Tutorial Auth Tutorial Ruby Tutorial Liferay DXP Tutorial Java Tutorial ","srcFilePath":"src/pages/tutorials/nodejs/you-made-it/index.md","id":"you-made-it","url":"/tutorials/nodejs/you-made-it/"}},"childIds":["get-started","download-sample","add-config-file","deploy-project","it-works","you-made-it"]},"java":{"title":"Java Tutorial","description":"In this section, you'll learn how to deploy an application using Java.","tutorialTitle":"Getting started with Java","url":"/tutorials/java/get-started/","hidden":true,"content":" ","srcFilePath":"src/pages/tutorials/java/index.soy","id":"java","location":"/tutorials/java/","children":{"add-config-file":{"title":"Add Config File","description":"In this section, you'll learn how to deploy an application using Java.","buttonTitle":"I created the wedeploy.json","tutorialTitle":"Getting started with Java","parentId":"java","layout":"tutorial","time":40,"weight":3,"content":" Add Config File Every service folder must have a wedeploy.json file that configures it, so let's add one file inside the sample project you just downloaded. Open the tutorial-java folder in a code editor Create a new file named wedeploy.json. In that file, paste this code: { \"id\": \"app\", \"memory\": 2048 } Pro Tip One of the awesome things you can do in your wedeploy.json file is add environment variables. There are many ways to use these; one example is to provide credentials for a external database. { \"id\": \"app\", \"env\": { \"DB_USER\": \"us3rname\", \"DB_PASSWORD\": \"passw0rd\", } } ","srcFilePath":"src/pages/tutorials/java/add-config-file/index.md","id":"add-config-file","url":"/tutorials/java/add-config-file/"},"deploy-project":{"title":"Deploy Project","description":"In this section, you'll learn how to deploy an application using Java.","buttonTitle":"I deployed the app","tutorialTitle":"Getting started with Java","parentId":"java","layout":"tutorial","time":30,"weight":4,"content":" Deploy Project Now the moment you have been waiting for! Go to tutorial-java in your terminal and deploy your project using the CLI. we deploy -p projectID Note: make sure to replace projectID with the ID that you'd like for your project. ","srcFilePath":"src/pages/tutorials/java/deploy-project/index.md","id":"deploy-project","url":"/tutorials/java/deploy-project/"},"download-sample":{"title":"Download Sample","description":"In this section, you'll learn how to deploy an application using Java.","buttonTitle":"I downloaded the sample files","tutorialTitle":"Getting started with Java","parentId":"java","layout":"tutorial","time":20,"weight":2,"content":" Download Sample First, you'll download a folder that contains the necessary files and directories for a Java project. There are basically two ways you can do this. A) Download a ZIP You can download a ZIP file. B) Download using Git Or clone this repository locally. git clone https://github.com/wedeploy/tutorial-java.git ","srcFilePath":"src/pages/tutorials/java/download-sample/index.md","id":"download-sample","url":"/tutorials/java/download-sample/"},"get-started":{"title":"Get Started","description":"In this section, you'll learn how to deploy an application using Java.","buttonTitle":"I'm ready to start!","tutorialTitle":"Getting started with Java","parentId":"java","layout":"tutorial","time":20,"weight":1,"content":" Get Started Using Java with WeDeploy is super easy. This tutorial will walk you through how to deploy a Spring Boot application using Gradle. What you'll need The WeDeploy CLI A code editor What you'll do Download a sample project Add a configuration file Deploy to production ","srcFilePath":"src/pages/tutorials/java/get-started/index.md","id":"get-started","url":"/tutorials/java/get-started/"},"it-works":{"title":"It Works","description":"In this section, you'll learn how to deploy an application using Java.","buttonTitle":"It works","tutorialTitle":"Getting started with Java","parentId":"java","layout":"tutorial","time":30,"weight":5,"content":" It Works Great work, your project is ready to be used! Go to app-.wedeploy.io in your browser. Awesome! You just deployed a Java app within a few minutes! We can't wait to see what else you create with WeDeploy! Pro Tip Wanting to make a pretty url for your service without purchasing a custom domain? Perfect, you can go to the Custom Domain section of your service on the Dashboard and add a custom domain that ends with wedeploy.io (e.g. yourapp.wedeploy.io). ","srcFilePath":"src/pages/tutorials/java/it-works/index.md","id":"it-works","url":"/tutorials/java/it-works/"},"you-made-it":{"title":"You Made It!","description":"In this section, you'll learn how to deploy an application using Java.","tutorialTitle":"Getting started with Java","parentId":"java","layout":"tutorial","weight":6,"content":" You made it! Now discover what else you can do with WeDeploy. Hosting Tutorial Email Tutorial Data Tutorial Auth Tutorial Node.js Tutorial Liferay DXP Tutorial Ruby Tutorial ","srcFilePath":"src/pages/tutorials/java/you-made-it/index.md","id":"you-made-it","url":"/tutorials/java/you-made-it/"}},"childIds":["get-started","download-sample","add-config-file","deploy-project","it-works","you-made-it"]},"ruby":{"title":"Ruby Tutorial","description":"In this section, you'll learn how to deploy an application using Ruby.","tutorialTitle":"Getting started with Ruby","url":"/tutorials/ruby/get-started/","hidden":true,"content":" ","srcFilePath":"src/pages/tutorials/ruby/index.soy","id":"ruby","location":"/tutorials/ruby/","children":{"add-config-file":{"title":"Add Config File","description":"In this section, you'll learn how to deploy an application using Ruby.","buttonTitle":"I created the wedeploy.json","tutorialTitle":"Getting started with Ruby","parentId":"ruby","layout":"tutorial","time":40,"weight":3,"content":" Add Config File Every service folder must have a wedeploy.json file that configures it, so let's add one file inside the sample project you just downloaded. Open the tutorial-ruby folder in a code editor Create a new file named wedeploy.json. In that file, paste this code: { \"id\": \"app\" } Pro Tip One of the awesome things you can do in your wedeploy.json file is add environment variables. There are many ways to use these; one example is to provide credentials for a external database. { \"id\": \"app\", \"env\": { \"DB_USER\": \"us3rname\", \"DB_PASSWORD\": \"passw0rd\", } } ","srcFilePath":"src/pages/tutorials/ruby/add-config-file/index.md","id":"add-config-file","url":"/tutorials/ruby/add-config-file/"},"deploy-project":{"title":"Deploy Project","description":"In this section, you'll learn how to deploy an application using Ruby.","buttonTitle":"I deployed the app","tutorialTitle":"Getting started with Ruby","parentId":"ruby","layout":"tutorial","time":30,"weight":4,"content":" Deploy Project Now the moment you have been waiting for! Go to tutorial-ruby in your terminal and deploy your project using the CLI. we deploy -p projectID Note: make sure to replace projectID with the ID that you'd like for your project. ","srcFilePath":"src/pages/tutorials/ruby/deploy-project/index.md","id":"deploy-project","url":"/tutorials/ruby/deploy-project/"},"download-sample":{"title":"Download Sample","description":"In this section, you'll learn how to deploy an application using Ruby.","buttonTitle":"I downloaded the sample files","tutorialTitle":"Getting started with Ruby","parentId":"ruby","layout":"tutorial","time":20,"weight":2,"content":" Download Sample First, you'll download a folder that contains the necessary files and directories for a Ruby project. There are basically two ways you can do this. A) Download a ZIP You can download a ZIP file. B) Download using Git Or clone this repository locally. git clone https://github.com/wedeploy/tutorial-ruby.git ","srcFilePath":"src/pages/tutorials/ruby/download-sample/index.md","id":"download-sample","url":"/tutorials/ruby/download-sample/"},"get-started":{"title":"Get Started","description":"In this section, you'll learn how to deploy an application using Ruby.","buttonTitle":"I'm ready to start!","tutorialTitle":"Getting started with Ruby","parentId":"ruby","layout":"tutorial","time":20,"weight":1,"content":" Get Started Using Ruby with WeDeploy is super easy. This tutorial will walk you through how to deploy a Ruby app using Sinatra as our web framework. What you'll need The WeDeploy CLI A code editor What you'll do Download a sample project Add a configuration file Deploy to production ","srcFilePath":"src/pages/tutorials/ruby/get-started/index.md","id":"get-started","url":"/tutorials/ruby/get-started/"},"it-works":{"title":"It Works","description":"In this section, you'll learn how to deploy an application using Ruby.","buttonTitle":"It works","tutorialTitle":"Getting started with Ruby","parentId":"ruby","layout":"tutorial","time":30,"weight":5,"content":" It Works Great work, your project is ready to be used! Go to app-.wedeploy.io in your browser. Awesome! You just deployed a Ruby app within a few minutes! We can't wait to see what else you create with WeDeploy! Pro Tip Wanting to make a pretty url for your service without purchasing a custom domain? Perfect, you can go to the Custom Domain section of your service on the Dashboard and add a custom domain that ends with wedeploy.io (e.g. yourapp.wedeploy.io). ","srcFilePath":"src/pages/tutorials/ruby/it-works/index.md","id":"it-works","url":"/tutorials/ruby/it-works/"},"you-made-it":{"title":"You Made It!","description":"In this section, you'll learn how to deploy an application using Ruby.","tutorialTitle":"Getting started with Ruby","parentId":"ruby","layout":"tutorial","weight":6,"content":" You made it! Now discover what else you can do with WeDeploy. Hosting Tutorial Email Tutorial Data Tutorial Auth Tutorial Node.js Tutorial Liferay DXP Tutorial Java Tutorial ","srcFilePath":"src/pages/tutorials/ruby/you-made-it/index.md","id":"you-made-it","url":"/tutorials/ruby/you-made-it/"}},"childIds":["get-started","download-sample","add-config-file","deploy-project","it-works","you-made-it"]}},"childIds":["auth-web","auth-android","auth-ios","data-web","data-android","data-ios","docker","email-web","email-android","email-ios","hosting","java","liferay-dxp","nodejs","ruby"]},"updates":{"title":"Updates","description":"See what is new with the WeDeploy","url":"/updates/apis/android/","hidden":true,"content":" ","srcFilePath":"src/pages/updates/index.soy","id":"updates","location":"/updates/","children":{"apis":{"title":"APIs","hidden":true,"content":" ","srcFilePath":"src/pages/updates/apis/index.soy","id":"apis","url":"/updates/apis/","children":{"android":{"title":"Android","description":"Check out what's new","layout":"updates","updates":[{"version":"0.1.0","date":"Aug 1st, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."}],"content":"","srcFilePath":"src/pages/updates/apis/android/index.md","id":"android","url":"/updates/apis/android/"},"ios":{"title":"iOS","description":"Check out what's new","layout":"updates","updates":[{"version":"0.5.0","date":"Aug 1st, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."}],"content":"","srcFilePath":"src/pages/updates/apis/ios/index.md","id":"ios","url":"/updates/apis/ios/"},"javascript":{"title":"JavaScript","description":"Check out what's new","layout":"updates","updates":[{"version":"3.0.2","date":"Aug 10th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."},{"version":"3.0.1","date":"Aug 9th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."},{"version":"3.0.0","date":"Aug 9th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."},{"version":"2.3.1","date":"Aug 1st, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."}],"content":"","srcFilePath":"src/pages/updates/apis/javascript/index.md","id":"javascript","url":"/updates/apis/javascript/"}},"childIds":["android","javascript","ios"]},"cli":{"title":"CLI","description":"Check out what's new","layout":"updates","updates":[{"version":"1.0.12","date":"Aug 18th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."},{"version":"1.0.11","date":"Aug 14th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."},{"version":"1.0.11","date":"Aug 14th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."},{"version":"1.0.10","date":"Aug 11th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."},{"version":"1.0.9","date":"Aug 11th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."},{"version":"1.0.8","date":"Aug 10th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."},{"version":"1.0.7","date":"Aug 10th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."},{"version":"1.0.6","date":"Aug 10th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."},{"version":"1.0.5","date":"Aug 10th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."},{"version":"1.0.4","date":"Aug 9th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."},{"version":"1.0.3","date":"Aug 9th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."},{"version":"1.0.2","date":"Aug 9th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."},{"version":"1.0.1","date":"Aug 8th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."},{"version":"1.0.0","date":"Aug 8th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."}],"content":"","srcFilePath":"src/pages/updates/cli/index.md","id":"cli","url":"/updates/cli/"},"services":{"title":"Services","hidden":true,"content":" ","srcFilePath":"src/pages/updates/services/index.soy","id":"services","url":"/updates/services/","children":{"auth":{"title":"Auth","description":"Check out what's new","layout":"updates","updates":[{"version":"0.0.1","date":"Aug 7th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."}],"content":"","srcFilePath":"src/pages/updates/services/auth/index.md","id":"auth","url":"/updates/services/auth/"},"data":{"title":"Data","description":"Check out what's new","layout":"updates","updates":[{"version":"0.0.1","date":"Aug 7th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."}],"content":"","srcFilePath":"src/pages/updates/services/data/index.md","id":"data","url":"/updates/services/data/"},"email":{"title":"Email","description":"Check out what's new","layout":"updates","updates":[{"version":"0.0.1","date":"Aug 7th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."}],"content":"","srcFilePath":"src/pages/updates/services/email/index.md","id":"email","url":"/updates/services/email/"},"hosting":{"title":"Hosting","description":"Check out what's new","layout":"updates","updates":[{"version":"0.0.3","date":"Aug 10th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."},{"version":"0.0.2","date":"Aug 10th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."},{"version":"0.0.1","date":"Aug 7th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."}],"content":" ","srcFilePath":"src/pages/updates/services/hosting/index.md","id":"hosting","url":"/updates/services/hosting/"},"liferay-dxp":{"title":"Liferay DXP","description":"Check out what's new","layout":"updates","updates":[{"version":"dxp-sp4-20170822","date":"Aug 23rd, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."},{"version":"dxp-sp4-20170821","date":"Aug 21st, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."},{"version":"dxp-sp4-20170802","date":"Aug 7th, 2017","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum."}],"content":" ","srcFilePath":"src/pages/updates/services/liferay-dxp/index.md","id":"liferay-dxp","url":"/updates/services/liferay-dxp/"}},"childIds":["auth","data","email","hosting","liferay-dxp"]}},"childIds":["apis","cli","services"]}},"description":"Forget about infrastructure. Dedicate your time to what really matters: building great apps.","content":" WeDeploy CLI Available Commands: log Display logs of the services list Show list of projects and services restart Restart project or services $ we deploy | ","srcFilePath":"src/pages/index.soy","id":"pages","url":"/./","childIds":["blog","docs","chat","login","get-started","terms","tutorials","updates"]}}